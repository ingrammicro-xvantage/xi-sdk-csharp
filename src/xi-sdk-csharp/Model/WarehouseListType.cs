/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-csharp.Model
{
    /// <summary>
    /// WarehouseListType
    /// </summary>
    [DataContract(Name = "warehouseListType")]
    public partial class WarehouseListType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseListType" /> class.
        /// </summary>
        /// <param name="warehouseid">warehouseid.</param>
        /// <param name="warehousedescription">City of the Ingram Micro warehouse location.</param>
        /// <param name="availablequantity">On hand available quantity.</param>
        /// <param name="onorderquantity">On Order quantity.</param>
        /// <param name="onholdquantity">On hold quantity.</param>
        /// <param name="etadate">etadate.</param>
        public WarehouseListType(string warehouseid = default(string), string warehousedescription = default(string), int availablequantity = default(int), int onorderquantity = default(int), int onholdquantity = default(int), string etadate = default(string))
        {
            this.Warehouseid = warehouseid;
            this.Warehousedescription = warehousedescription;
            this.Availablequantity = availablequantity;
            this.Onorderquantity = onorderquantity;
            this.Onholdquantity = onholdquantity;
            this.Etadate = etadate;
        }

        /// <summary>
        /// Gets or Sets Warehouseid
        /// </summary>
        [DataMember(Name = "warehouseid", EmitDefaultValue = false)]
        public string Warehouseid { get; set; }

        /// <summary>
        /// City of the Ingram Micro warehouse location
        /// </summary>
        /// <value>City of the Ingram Micro warehouse location</value>
        [DataMember(Name = "warehousedescription", EmitDefaultValue = false)]
        public string Warehousedescription { get; set; }

        /// <summary>
        /// On hand available quantity
        /// </summary>
        /// <value>On hand available quantity</value>
        [DataMember(Name = "availablequantity", EmitDefaultValue = false)]
        public int Availablequantity { get; set; }

        /// <summary>
        /// On Order quantity
        /// </summary>
        /// <value>On Order quantity</value>
        [DataMember(Name = "onorderquantity", EmitDefaultValue = false)]
        public int Onorderquantity { get; set; }

        /// <summary>
        /// On hold quantity
        /// </summary>
        /// <value>On hold quantity</value>
        [DataMember(Name = "onholdquantity", EmitDefaultValue = false)]
        public int Onholdquantity { get; set; }

        /// <summary>
        /// Gets or Sets Etadate
        /// </summary>
        [DataMember(Name = "etadate", EmitDefaultValue = false)]
        public string Etadate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WarehouseListType {\n");
            sb.Append("  Warehouseid: ").Append(Warehouseid).Append("\n");
            sb.Append("  Warehousedescription: ").Append(Warehousedescription).Append("\n");
            sb.Append("  Availablequantity: ").Append(Availablequantity).Append("\n");
            sb.Append("  Onorderquantity: ").Append(Onorderquantity).Append("\n");
            sb.Append("  Onholdquantity: ").Append(Onholdquantity).Append("\n");
            sb.Append("  Etadate: ").Append(Etadate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
