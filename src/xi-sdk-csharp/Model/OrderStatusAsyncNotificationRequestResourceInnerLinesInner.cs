/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-csharp.Model
{
    /// <summary>
    /// OrderStatusAsyncNotificationRequestResourceInnerLinesInner
    /// </summary>
    [DataContract(Name = "OrderStatusAsyncNotificationRequest_resource_inner_lines_inner")]
    public partial class OrderStatusAsyncNotificationRequestResourceInnerLinesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusAsyncNotificationRequestResourceInnerLinesInner" /> class.
        /// </summary>
        /// <param name="lineNumber">The Ingram Micro line number for the product.</param>
        /// <param name="subOrderNumber">The sub order number. The two-digit prefix is the warehouse code of the warehouse nearest the reseller. The middle number is the order number. The two-digit suffix is the sub order number..</param>
        /// <param name="lineStatus">The status for the line item in the order. One of: Backordered, Open, Shipped.</param>
        /// <param name="ingramPartNumber">The Ingram Micro part number for the line item..</param>
        /// <param name="vendorPartNumber">The vendor part number for the line item..</param>
        /// <param name="requestedQuantity">The quantity of the line item requested..</param>
        /// <param name="shippedQuantity">The quantity of the line item that has been shipped..</param>
        /// <param name="backorderedQuantity">The quantity of the line item that is backordered..</param>
        /// <param name="shipmentDetails">shipmentDetails.</param>
        /// <param name="serialNumberDetails">serialNumberDetails.</param>
        public OrderStatusAsyncNotificationRequestResourceInnerLinesInner(string lineNumber = default(string), string subOrderNumber = default(string), string lineStatus = default(string), string ingramPartNumber = default(string), string vendorPartNumber = default(string), string requestedQuantity = default(string), string shippedQuantity = default(string), string backorderedQuantity = default(string), List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerShipmentDetailsInner> shipmentDetails = default(List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerShipmentDetailsInner>), List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerSerialNumberDetailsInner> serialNumberDetails = default(List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerSerialNumberDetailsInner>))
        {
            this.LineNumber = lineNumber;
            this.SubOrderNumber = subOrderNumber;
            this.LineStatus = lineStatus;
            this.IngramPartNumber = ingramPartNumber;
            this.VendorPartNumber = vendorPartNumber;
            this.RequestedQuantity = requestedQuantity;
            this.ShippedQuantity = shippedQuantity;
            this.BackorderedQuantity = backorderedQuantity;
            this.ShipmentDetails = shipmentDetails;
            this.SerialNumberDetails = serialNumberDetails;
        }

        /// <summary>
        /// The Ingram Micro line number for the product
        /// </summary>
        /// <value>The Ingram Micro line number for the product</value>
        [DataMember(Name = "LineNumber", EmitDefaultValue = false)]
        public string LineNumber { get; set; }

        /// <summary>
        /// The sub order number. The two-digit prefix is the warehouse code of the warehouse nearest the reseller. The middle number is the order number. The two-digit suffix is the sub order number.
        /// </summary>
        /// <value>The sub order number. The two-digit prefix is the warehouse code of the warehouse nearest the reseller. The middle number is the order number. The two-digit suffix is the sub order number.</value>
        [DataMember(Name = "subOrderNumber", EmitDefaultValue = false)]
        public string SubOrderNumber { get; set; }

        /// <summary>
        /// The status for the line item in the order. One of: Backordered, Open, Shipped
        /// </summary>
        /// <value>The status for the line item in the order. One of: Backordered, Open, Shipped</value>
        [DataMember(Name = "lineStatus", EmitDefaultValue = false)]
        public string LineStatus { get; set; }

        /// <summary>
        /// The Ingram Micro part number for the line item.
        /// </summary>
        /// <value>The Ingram Micro part number for the line item.</value>
        [DataMember(Name = "ingramPartNumber", EmitDefaultValue = false)]
        public string IngramPartNumber { get; set; }

        /// <summary>
        /// The vendor part number for the line item.
        /// </summary>
        /// <value>The vendor part number for the line item.</value>
        [DataMember(Name = "vendorPartNumber", EmitDefaultValue = false)]
        public string VendorPartNumber { get; set; }

        /// <summary>
        /// The quantity of the line item requested.
        /// </summary>
        /// <value>The quantity of the line item requested.</value>
        [DataMember(Name = "requestedQuantity", EmitDefaultValue = false)]
        public string RequestedQuantity { get; set; }

        /// <summary>
        /// The quantity of the line item that has been shipped.
        /// </summary>
        /// <value>The quantity of the line item that has been shipped.</value>
        [DataMember(Name = "shippedQuantity", EmitDefaultValue = false)]
        public string ShippedQuantity { get; set; }

        /// <summary>
        /// The quantity of the line item that is backordered.
        /// </summary>
        /// <value>The quantity of the line item that is backordered.</value>
        [DataMember(Name = "backorderedQuantity", EmitDefaultValue = false)]
        public string BackorderedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDetails
        /// </summary>
        [DataMember(Name = "shipmentDetails", EmitDefaultValue = false)]
        public List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerShipmentDetailsInner> ShipmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumberDetails
        /// </summary>
        [DataMember(Name = "serialNumberDetails", EmitDefaultValue = false)]
        public List<OrderStatusAsyncNotificationRequestResourceInnerLinesInnerSerialNumberDetailsInner> SerialNumberDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderStatusAsyncNotificationRequestResourceInnerLinesInner {\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  SubOrderNumber: ").Append(SubOrderNumber).Append("\n");
            sb.Append("  LineStatus: ").Append(LineStatus).Append("\n");
            sb.Append("  IngramPartNumber: ").Append(IngramPartNumber).Append("\n");
            sb.Append("  VendorPartNumber: ").Append(VendorPartNumber).Append("\n");
            sb.Append("  RequestedQuantity: ").Append(RequestedQuantity).Append("\n");
            sb.Append("  ShippedQuantity: ").Append(ShippedQuantity).Append("\n");
            sb.Append("  BackorderedQuantity: ").Append(BackorderedQuantity).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("  SerialNumberDetails: ").Append(SerialNumberDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
