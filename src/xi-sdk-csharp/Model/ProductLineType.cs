/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-csharp.Model
{
    /// <summary>
    /// Product line items object under each invoice
    /// </summary>
    [DataContract(Name = "productLineType")]
    public partial class ProductLineType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLineType" /> class.
        /// </summary>
        /// <param name="linenumber">linenumber.</param>
        /// <param name="linetype">linetype.</param>
        /// <param name="partnumber">partnumber.</param>
        /// <param name="vendorpartnumber">vendorpartnumber.</param>
        /// <param name="partdescription">partdescription.</param>
        /// <param name="shipfrombranch">shipfrombranch.</param>
        /// <param name="shippedquantity">shippedquantity.</param>
        /// <param name="orderedquantity">orderedquantity.</param>
        /// <param name="marginpercent">marginpercent.</param>
        /// <param name="backorderquantity">backorderquantity.</param>
        /// <param name="backorderetadate">backorderetadate.</param>
        /// <param name="extendedprice">extendedprice.</param>
        /// <param name="specialbidnumber">specialbidnumber.</param>
        /// <param name="ordersuffix">ordersuffix.</param>
        /// <param name="isacopapplied">isacopapplied.</param>
        /// <param name="unitprice">unitprice.</param>
        /// <param name="unitofmeasure">unitofmeasure.</param>
        /// <param name="serialnumberdetails">serialnumberdetails.</param>
        /// <param name="trackingnumberdetails">trackingnumberdetails.</param>
        /// <param name="productextendedspecs">productextendedspecs.</param>
        public ProductLineType(string linenumber = default(string), string linetype = default(string), string partnumber = default(string), string vendorpartnumber = default(string), string partdescription = default(string), string shipfrombranch = default(string), string shippedquantity = default(string), string orderedquantity = default(string), string marginpercent = default(string), string backorderquantity = default(string), DateTime backorderetadate = default(DateTime), string extendedprice = default(string), string specialbidnumber = default(string), string ordersuffix = default(string), string isacopapplied = default(string), string unitprice = default(string), string unitofmeasure = default(string), List<ProductLineTypeSerialnumberdetailsInner> serialnumberdetails = default(List<ProductLineTypeSerialnumberdetailsInner>), List<ProductLineTypeTrackingnumberdetailsInner> trackingnumberdetails = default(List<ProductLineTypeTrackingnumberdetailsInner>), List<InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner> productextendedspecs = default(List<InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner>))
        {
            this.Linenumber = linenumber;
            this.Linetype = linetype;
            this.Partnumber = partnumber;
            this.Vendorpartnumber = vendorpartnumber;
            this.Partdescription = partdescription;
            this.Shipfrombranch = shipfrombranch;
            this.Shippedquantity = shippedquantity;
            this.Orderedquantity = orderedquantity;
            this.Marginpercent = marginpercent;
            this.Backorderquantity = backorderquantity;
            this.Backorderetadate = backorderetadate;
            this.Extendedprice = extendedprice;
            this.Specialbidnumber = specialbidnumber;
            this.Ordersuffix = ordersuffix;
            this.Isacopapplied = isacopapplied;
            this.Unitprice = unitprice;
            this.Unitofmeasure = unitofmeasure;
            this.Serialnumberdetails = serialnumberdetails;
            this.Trackingnumberdetails = trackingnumberdetails;
            this.Productextendedspecs = productextendedspecs;
        }

        /// <summary>
        /// Gets or Sets Linenumber
        /// </summary>
        [DataMember(Name = "linenumber", EmitDefaultValue = false)]
        public string Linenumber { get; set; }

        /// <summary>
        /// Gets or Sets Linetype
        /// </summary>
        [DataMember(Name = "linetype", EmitDefaultValue = false)]
        public string Linetype { get; set; }

        /// <summary>
        /// Gets or Sets Partnumber
        /// </summary>
        [DataMember(Name = "partnumber", EmitDefaultValue = false)]
        public string Partnumber { get; set; }

        /// <summary>
        /// Gets or Sets Vendorpartnumber
        /// </summary>
        [DataMember(Name = "vendorpartnumber", EmitDefaultValue = false)]
        public string Vendorpartnumber { get; set; }

        /// <summary>
        /// Gets or Sets Partdescription
        /// </summary>
        [DataMember(Name = "partdescription", EmitDefaultValue = false)]
        public string Partdescription { get; set; }

        /// <summary>
        /// Gets or Sets Shipfrombranch
        /// </summary>
        [DataMember(Name = "shipfrombranch", EmitDefaultValue = false)]
        public string Shipfrombranch { get; set; }

        /// <summary>
        /// Gets or Sets Shippedquantity
        /// </summary>
        [DataMember(Name = "shippedquantity", EmitDefaultValue = false)]
        public string Shippedquantity { get; set; }

        /// <summary>
        /// Gets or Sets Orderedquantity
        /// </summary>
        [DataMember(Name = "orderedquantity", EmitDefaultValue = false)]
        public string Orderedquantity { get; set; }

        /// <summary>
        /// Gets or Sets Marginpercent
        /// </summary>
        [DataMember(Name = "marginpercent", EmitDefaultValue = false)]
        public string Marginpercent { get; set; }

        /// <summary>
        /// Gets or Sets Backorderquantity
        /// </summary>
        [DataMember(Name = "backorderquantity", EmitDefaultValue = false)]
        public string Backorderquantity { get; set; }

        /// <summary>
        /// Gets or Sets Backorderetadate
        /// </summary>
        [DataMember(Name = "backorderetadate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Backorderetadate { get; set; }

        /// <summary>
        /// Gets or Sets Extendedprice
        /// </summary>
        [DataMember(Name = "extendedprice", EmitDefaultValue = false)]
        public string Extendedprice { get; set; }

        /// <summary>
        /// Gets or Sets Specialbidnumber
        /// </summary>
        [DataMember(Name = "specialbidnumber", EmitDefaultValue = false)]
        public string Specialbidnumber { get; set; }

        /// <summary>
        /// Gets or Sets Ordersuffix
        /// </summary>
        [DataMember(Name = "ordersuffix", EmitDefaultValue = false)]
        public string Ordersuffix { get; set; }

        /// <summary>
        /// Gets or Sets Isacopapplied
        /// </summary>
        [DataMember(Name = "isacopapplied", EmitDefaultValue = false)]
        public string Isacopapplied { get; set; }

        /// <summary>
        /// Gets or Sets Unitprice
        /// </summary>
        [DataMember(Name = "unitprice", EmitDefaultValue = false)]
        public string Unitprice { get; set; }

        /// <summary>
        /// Gets or Sets Unitofmeasure
        /// </summary>
        [DataMember(Name = "unitofmeasure", EmitDefaultValue = false)]
        public string Unitofmeasure { get; set; }

        /// <summary>
        /// Gets or Sets Serialnumberdetails
        /// </summary>
        [DataMember(Name = "serialnumberdetails", EmitDefaultValue = false)]
        public List<ProductLineTypeSerialnumberdetailsInner> Serialnumberdetails { get; set; }

        /// <summary>
        /// Gets or Sets Trackingnumberdetails
        /// </summary>
        [DataMember(Name = "trackingnumberdetails", EmitDefaultValue = false)]
        public List<ProductLineTypeTrackingnumberdetailsInner> Trackingnumberdetails { get; set; }

        /// <summary>
        /// Gets or Sets Productextendedspecs
        /// </summary>
        [DataMember(Name = "productextendedspecs", EmitDefaultValue = false)]
        public List<InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner> Productextendedspecs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductLineType {\n");
            sb.Append("  Linenumber: ").Append(Linenumber).Append("\n");
            sb.Append("  Linetype: ").Append(Linetype).Append("\n");
            sb.Append("  Partnumber: ").Append(Partnumber).Append("\n");
            sb.Append("  Vendorpartnumber: ").Append(Vendorpartnumber).Append("\n");
            sb.Append("  Partdescription: ").Append(Partdescription).Append("\n");
            sb.Append("  Shipfrombranch: ").Append(Shipfrombranch).Append("\n");
            sb.Append("  Shippedquantity: ").Append(Shippedquantity).Append("\n");
            sb.Append("  Orderedquantity: ").Append(Orderedquantity).Append("\n");
            sb.Append("  Marginpercent: ").Append(Marginpercent).Append("\n");
            sb.Append("  Backorderquantity: ").Append(Backorderquantity).Append("\n");
            sb.Append("  Backorderetadate: ").Append(Backorderetadate).Append("\n");
            sb.Append("  Extendedprice: ").Append(Extendedprice).Append("\n");
            sb.Append("  Specialbidnumber: ").Append(Specialbidnumber).Append("\n");
            sb.Append("  Ordersuffix: ").Append(Ordersuffix).Append("\n");
            sb.Append("  Isacopapplied: ").Append(Isacopapplied).Append("\n");
            sb.Append("  Unitprice: ").Append(Unitprice).Append("\n");
            sb.Append("  Unitofmeasure: ").Append(Unitofmeasure).Append("\n");
            sb.Append("  Serialnumberdetails: ").Append(Serialnumberdetails).Append("\n");
            sb.Append("  Trackingnumberdetails: ").Append(Trackingnumberdetails).Append("\n");
            sb.Append("  Productextendedspecs: ").Append(Productextendedspecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
