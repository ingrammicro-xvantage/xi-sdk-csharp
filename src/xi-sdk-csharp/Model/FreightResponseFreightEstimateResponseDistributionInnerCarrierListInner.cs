/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-csharp.Model
{
    /// <summary>
    /// FreightResponseFreightEstimateResponseDistributionInnerCarrierListInner
    /// </summary>
    [DataContract(Name = "freightResponse_freightEstimateResponse_distribution_inner_carrierList_inner")]
    public partial class FreightResponseFreightEstimateResponseDistributionInnerCarrierListInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreightResponseFreightEstimateResponseDistributionInnerCarrierListInner" /> class.
        /// </summary>
        /// <param name="carrierCode">The code for the shipping carrier for the line item..</param>
        /// <param name="shipVia">The name of the shipping carrier..</param>
        /// <param name="carrierMode">Mode of the carrier..</param>
        /// <param name="estimatedFreightCharge">Estimated freight charge..</param>
        /// <param name="daysInTransit">Number of transit days..</param>
        public FreightResponseFreightEstimateResponseDistributionInnerCarrierListInner(string carrierCode = default(string), string shipVia = default(string), string carrierMode = default(string), decimal estimatedFreightCharge = default(decimal), int daysInTransit = default(int))
        {
            this.CarrierCode = carrierCode;
            this.ShipVia = shipVia;
            this.CarrierMode = carrierMode;
            this.EstimatedFreightCharge = estimatedFreightCharge;
            this.DaysInTransit = daysInTransit;
        }

        /// <summary>
        /// The code for the shipping carrier for the line item.
        /// </summary>
        /// <value>The code for the shipping carrier for the line item.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The name of the shipping carrier.
        /// </summary>
        /// <value>The name of the shipping carrier.</value>
        [DataMember(Name = "shipVia", EmitDefaultValue = false)]
        public string ShipVia { get; set; }

        /// <summary>
        /// Mode of the carrier.
        /// </summary>
        /// <value>Mode of the carrier.</value>
        [DataMember(Name = "carrierMode", EmitDefaultValue = false)]
        public string CarrierMode { get; set; }

        /// <summary>
        /// Estimated freight charge.
        /// </summary>
        /// <value>Estimated freight charge.</value>
        [DataMember(Name = "estimatedFreightCharge", EmitDefaultValue = false)]
        public decimal EstimatedFreightCharge { get; set; }

        /// <summary>
        /// Number of transit days.
        /// </summary>
        /// <value>Number of transit days.</value>
        [DataMember(Name = "daysInTransit", EmitDefaultValue = false)]
        public int DaysInTransit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FreightResponseFreightEstimateResponseDistributionInnerCarrierListInner {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  CarrierMode: ").Append(CarrierMode).Append("\n");
            sb.Append("  EstimatedFreightCharge: ").Append(EstimatedFreightCharge).Append("\n");
            sb.Append("  DaysInTransit: ").Append(DaysInTransit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
