/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using xi-sdk-csharp.Client;
using xi-sdk-csharp.Client.Auth;
using xi-sdk-csharp.Model;

namespace xi-sdk-csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deals Details
        /// </summary>
        /// <remarks>
        /// The Deals Details API will retrieve all the details related to the specific deal id.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealsDetailsResponse</returns>
        DealsDetailsResponse GetResellersV6Dealsdetails(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deals Details
        /// </summary>
        /// <remarks>
        /// The Deals Details API will retrieve all the details related to the specific deal id.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealsDetailsResponse</returns>
        ApiResponse<DealsDetailsResponse> GetResellersV6DealsdetailsWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deals Search
        /// </summary>
        /// <remarks>
        /// The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealsSearchResponse</returns>
        DealsSearchResponse GetResellersV6Dealssearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deals Search
        /// </summary>
        /// <remarks>
        /// The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealsSearchResponse</returns>
        ApiResponse<DealsSearchResponse> GetResellersV6DealssearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deals Details
        /// </summary>
        /// <remarks>
        /// The Deals Details API will retrieve all the details related to the specific deal id.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsDetailsResponse</returns>
        System.Threading.Tasks.Task<DealsDetailsResponse> GetResellersV6DealsdetailsAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deals Details
        /// </summary>
        /// <remarks>
        /// The Deals Details API will retrieve all the details related to the specific deal id.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsDetailsResponse>> GetResellersV6DealsdetailsWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deals Search
        /// </summary>
        /// <remarks>
        /// The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSearchResponse</returns>
        System.Threading.Tasks.Task<DealsSearchResponse> GetResellersV6DealssearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deals Search
        /// </summary>
        /// <remarks>
        /// The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsSearchResponse>> GetResellersV6DealssearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApi : IDealsApiSync, IDealsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DealsApi : IDealsApi
    {
        private xi-sdk-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi(string basePath)
        {
            this.Configuration = xi-sdk-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-csharp.Client.GlobalConfiguration.Instance,
                new xi-sdk-csharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DealsApi(xi-sdk-csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi-sdk-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DealsApi(xi-sdk-csharp.Client.ISynchronousClient client, xi-sdk-csharp.Client.IAsynchronousClient asyncClient, xi-sdk-csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi-sdk-csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi-sdk-csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi-sdk-csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi-sdk-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deals Details The Deals Details API will retrieve all the details related to the specific deal id.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealsDetailsResponse</returns>
        public DealsDetailsResponse GetResellersV6Dealsdetails(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            xi-sdk-csharp.Client.ApiResponse<DealsDetailsResponse> localVarResponse = GetResellersV6DealsdetailsWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, dealId, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deals Details The Deals Details API will retrieve all the details related to the specific deal id.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealsDetailsResponse</returns>
        public xi-sdk-csharp.Client.ApiResponse<DealsDetailsResponse> GetResellersV6DealsdetailsWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'dealId' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", xi-sdk-csharp.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "DealsApi.GetResellersV6Dealsdetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DealsDetailsResponse>("/resellers/v6/deals/{dealId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Dealsdetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deals Details The Deals Details API will retrieve all the details related to the specific deal id.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsDetailsResponse</returns>
        public async System.Threading.Tasks.Task<DealsDetailsResponse> GetResellersV6DealsdetailsAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-csharp.Client.ApiResponse<DealsDetailsResponse> localVarResponse = await GetResellersV6DealsdetailsWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, dealId, iMSenderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deals Details The Deals Details API will retrieve all the details related to the specific deal id.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="dealId">Unique deal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-csharp.Client.ApiResponse<DealsDetailsResponse>> GetResellersV6DealsdetailsWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string dealId, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling DealsApi->GetResellersV6Dealsdetails");
            }

            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'dealId' when calling DealsApi->GetResellersV6Dealsdetails");
            }


            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", xi-sdk-csharp.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "DealsApi.GetResellersV6Dealsdetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealsDetailsResponse>("/resellers/v6/deals/{dealId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Dealsdetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deals Search The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealsSearchResponse</returns>
        public DealsSearchResponse GetResellersV6Dealssearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0)
        {
            xi-sdk-csharp.Client.ApiResponse<DealsSearchResponse> localVarResponse = GetResellersV6DealssearchWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, endUser, vendor, dealId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deals Search The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealsSearchResponse</returns>
        public xi-sdk-csharp.Client.ApiResponse<DealsSearchResponse> GetResellersV6DealssearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling DealsApi->GetResellersV6Dealssearch");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling DealsApi->GetResellersV6Dealssearch");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling DealsApi->GetResellersV6Dealssearch");
            }

            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "endUser", endUser));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (dealId != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "dealId", dealId));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "DealsApi.GetResellersV6Dealssearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DealsSearchResponse>("/resellers/v6/deals/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Dealssearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deals Search The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSearchResponse</returns>
        public async System.Threading.Tasks.Task<DealsSearchResponse> GetResellersV6DealssearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-csharp.Client.ApiResponse<DealsSearchResponse> localVarResponse = await GetResellersV6DealssearchWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, endUser, vendor, dealId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deals Search The Deals Search API, by default, will retrieve all the deals that are associated with the customer’s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="endUser">The end user/customer&#39;s name. (optional)</param>
        /// <param name="vendor">The vendor&#39;s name. (optional)</param>
        /// <param name="dealId">Deal/Special bid number. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-csharp.Client.ApiResponse<DealsSearchResponse>> GetResellersV6DealssearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? endUser = default(string?), string? vendor = default(string?), string? dealId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling DealsApi->GetResellersV6Dealssearch");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling DealsApi->GetResellersV6Dealssearch");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling DealsApi->GetResellersV6Dealssearch");
            }


            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "endUser", endUser));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (dealId != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "dealId", dealId));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "DealsApi.GetResellersV6Dealssearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealsSearchResponse>("/resellers/v6/deals/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Dealssearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
