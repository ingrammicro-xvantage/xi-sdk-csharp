/*
 * Reseller API Documentation - United States
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using xi-sdk-csharp.Client;
using xi-sdk-csharp.Client.Auth;
using xi-sdk-csharp.Model;

namespace xi-sdk-csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuotesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Quote Search
        /// </summary>
        /// <remarks>
        /// The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuoteSearchResponse</returns>
        QuoteSearchResponse GetQuotessearchV6(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Quote Search
        /// </summary>
        /// <remarks>
        /// The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuoteSearchResponse</returns>
        ApiResponse<QuoteSearchResponse> GetQuotessearchV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Validate Quote
        /// </summary>
        /// <remarks>
        /// The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateQuoteResponse</returns>
        ValidateQuoteResponse GetResellerV6ValidateQuote(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Validate Quote
        /// </summary>
        /// <remarks>
        /// The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateQuoteResponse</returns>
        ApiResponse<ValidateQuoteResponse> GetResellerV6ValidateQuoteWithHttpInfo(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Quote Details
        /// </summary>
        /// <remarks>
        /// The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuoteDetailsResponse</returns>
        QuoteDetailsResponse GetResellersV6Quotes(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Quote Details
        /// </summary>
        /// <remarks>
        /// The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuoteDetailsResponse</returns>
        ApiResponse<QuoteDetailsResponse> GetResellersV6QuotesWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuotesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Quote Search
        /// </summary>
        /// <remarks>
        /// The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteSearchResponse</returns>
        System.Threading.Tasks.Task<QuoteSearchResponse> GetQuotessearchV6Async(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Quote Search
        /// </summary>
        /// <remarks>
        /// The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteSearchResponse>> GetQuotessearchV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Quote
        /// </summary>
        /// <remarks>
        /// The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateQuoteResponse</returns>
        System.Threading.Tasks.Task<ValidateQuoteResponse> GetResellerV6ValidateQuoteAsync(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Quote
        /// </summary>
        /// <remarks>
        /// The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateQuoteResponse>> GetResellerV6ValidateQuoteWithHttpInfoAsync(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Quote Details
        /// </summary>
        /// <remarks>
        /// The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteDetailsResponse</returns>
        System.Threading.Tasks.Task<QuoteDetailsResponse> GetResellersV6QuotesAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Quote Details
        /// </summary>
        /// <remarks>
        /// The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </remarks>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteDetailsResponse>> GetResellersV6QuotesWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuotesApi : IQuotesApiSync, IQuotesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuotesApi : IQuotesApi
    {
        private xi-sdk-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuotesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuotesApi(string basePath)
        {
            this.Configuration = xi-sdk-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-csharp.Client.GlobalConfiguration.Instance,
                new xi-sdk-csharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuotesApi(xi-sdk-csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi-sdk-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-csharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QuotesApi(xi-sdk-csharp.Client.ISynchronousClient client, xi-sdk-csharp.Client.IAsynchronousClient asyncClient, xi-sdk-csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi-sdk-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi-sdk-csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi-sdk-csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi-sdk-csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi-sdk-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Quote Search The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuoteSearchResponse</returns>
        public QuoteSearchResponse GetQuotessearchV6(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0)
        {
            xi-sdk-csharp.Client.ApiResponse<QuoteSearchResponse> localVarResponse = GetQuotessearchV6WithHttpInfo(iMCustomerNumber, iMCountryCode, iMCustomerContact, iMCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quote Search The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuoteSearchResponse</returns>
        public xi-sdk-csharp.Client.ApiResponse<QuoteSearchResponse> GetQuotessearchV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCustomerContact' is set
            if (iMCustomerContact == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerContact' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetQuotessearchV6");
            }

            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingramOrderDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("multi", "ingramOrderDate-bt", ingramOrderDateBt));
            }
            if (quoteNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteNumber", quoteNumber));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            if (endUserContact != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "endUserContact", endUserContact));
            }
            if (sortingOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "sortingOrder", sortingOrder));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "vendorName", vendorName));
            }
            if (quoteName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteName", quoteName));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (quoteCreateDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteCreateDate-bt", quoteCreateDateBt));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerContact", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerContact)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "QuotesApi.GetQuotessearchV6";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuoteSearchResponse>("/resellers/v6/quotes/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotessearchV6", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quote Search The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteSearchResponse</returns>
        public async System.Threading.Tasks.Task<QuoteSearchResponse> GetQuotessearchV6Async(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-csharp.Client.ApiResponse<QuoteSearchResponse> localVarResponse = await GetQuotessearchV6WithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCustomerContact, iMCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, iMSenderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quote Search The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCustomerContact">Logged in Users email address contact.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="ingramOrderDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)</param>
        /// <param name="specialBidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)</param>
        /// <param name="endUserContact">End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)</param>
        /// <param name="sortingOrder">Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)</param>
        /// <param name="sortBy">Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)</param>
        /// <param name="pageSize">Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)</param>
        /// <param name="pageNumber">Page index or page number for the list of quotes being returned. (optional, default to 1)</param>
        /// <param name="vendorName">The name of the vendor. (optional)</param>
        /// <param name="quoteName">The quote name was given by the customer while creating quote. (optional)</param>
        /// <param name="status">The status of the quote. (optional)</param>
        /// <param name="quoteCreateDateBt">Search with start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-csharp.Client.ApiResponse<QuoteSearchResponse>> GetQuotessearchV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCustomerContact, string iMCorrelationID, List<string>? ingramOrderDateBt = default(List<string>?), string? quoteNumber = default(string?), string? specialBidNumber = default(string?), string? endUserContact = default(string?), string? sortingOrder = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? vendorName = default(string?), string? quoteName = default(string?), string? status = default(string?), string? quoteCreateDateBt = default(string?), string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCustomerContact' is set
            if (iMCustomerContact == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerContact' when calling QuotesApi->GetQuotessearchV6");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetQuotessearchV6");
            }


            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingramOrderDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("multi", "ingramOrderDate-bt", ingramOrderDateBt));
            }
            if (quoteNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteNumber", quoteNumber));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            if (endUserContact != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "endUserContact", endUserContact));
            }
            if (sortingOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "sortingOrder", sortingOrder));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "vendorName", vendorName));
            }
            if (quoteName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteName", quoteName));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (quoteCreateDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteCreateDate-bt", quoteCreateDateBt));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerContact", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerContact)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            localVarRequestOptions.Operation = "QuotesApi.GetQuotessearchV6";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuoteSearchResponse>("/resellers/v6/quotes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotessearchV6", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Quote The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateQuoteResponse</returns>
        public ValidateQuoteResponse GetResellerV6ValidateQuote(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            xi-sdk-csharp.Client.ApiResponse<ValidateQuoteResponse> localVarResponse = GetResellerV6ValidateQuoteWithHttpInfo(quoteNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Quote The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateQuoteResponse</returns>
        public xi-sdk-csharp.Client.ApiResponse<ValidateQuoteResponse> GetResellerV6ValidateQuoteWithHttpInfo(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteNumber", quoteNumber));
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            localVarRequestOptions.Operation = "QuotesApi.GetResellerV6ValidateQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidateQuoteResponse>("/resellers/v6/q2o/validatequote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6ValidateQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Quote The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateQuoteResponse</returns>
        public async System.Threading.Tasks.Task<ValidateQuoteResponse> GetResellerV6ValidateQuoteAsync(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-csharp.Client.ApiResponse<ValidateQuoteResponse> localVarResponse = await GetResellerV6ValidateQuoteWithHttpInfoAsync(quoteNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Quote The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</param>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-csharp.Client.ApiResponse<ValidateQuoteResponse>> GetResellerV6ValidateQuoteWithHttpInfoAsync(string quoteNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetResellerV6ValidateQuote");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetResellerV6ValidateQuote");
            }


            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(xi-sdk-csharp.Client.ClientUtils.ParameterToMultiMap("", "quoteNumber", quoteNumber));
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            localVarRequestOptions.Operation = "QuotesApi.GetResellerV6ValidateQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidateQuoteResponse>("/resellers/v6/q2o/validatequote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6ValidateQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Quote Details The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuoteDetailsResponse</returns>
        public QuoteDetailsResponse GetResellersV6Quotes(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            xi-sdk-csharp.Client.ApiResponse<QuoteDetailsResponse> localVarResponse = GetResellersV6QuotesWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, quoteNumber, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quote Details The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuoteDetailsResponse</returns>
        public xi-sdk-csharp.Client.ApiResponse<QuoteDetailsResponse> GetResellersV6QuotesWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->GetResellersV6Quotes");
            }

            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(quoteNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            localVarRequestOptions.Operation = "QuotesApi.GetResellersV6Quotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuoteDetailsResponse>("/resellers/v6/quotes/{quoteNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Quotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Quote Details The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteDetailsResponse</returns>
        public async System.Threading.Tasks.Task<QuoteDetailsResponse> GetResellersV6QuotesAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-csharp.Client.ApiResponse<QuoteDetailsResponse> localVarResponse = await GetResellersV6QuotesWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, quoteNumber, iMSenderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quote Details The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
        /// </summary>
        /// <exception cref="xi-sdk-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your Ingram Micro unique customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</param>
        /// <param name="iMSenderID">Unique identifier used to identify the third party source accessing the services. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-csharp.Client.ApiResponse<QuoteDetailsResponse>> GetResellersV6QuotesWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string quoteNumber, string? iMSenderID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuotesApi->GetResellersV6Quotes");
            }

            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
            {
                throw new xi-sdk-csharp.Client.ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->GetResellersV6Quotes");
            }


            xi-sdk-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(quoteNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi-sdk-csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            localVarRequestOptions.Operation = "QuotesApi.GetResellersV6Quotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuoteDetailsResponse>("/resellers/v6/quotes/{quoteNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Quotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
