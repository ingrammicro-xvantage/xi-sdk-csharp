/*
 * XI Sdk Resellers
 *
 * For Ingram Micro Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.Client;
using xi.sdk.resellers.Model;

namespace xi.sdk.resellers.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Invoice Details v6.1
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <returns>InvoiceDetailsv61Response</returns>
        InvoiceDetailsv61Response GetInvoicedetailsV61(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?));

        /// <summary>
        /// Get Invoice Details v6.1
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <returns>ApiResponse of InvoiceDetailsv61Response</returns>
        ApiResponse<InvoiceDetailsv61Response> GetInvoicedetailsV61WithHttpInfo(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?));
        /// <summary>
        /// Search your invoice
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <returns>InvoiceSearchResponse</returns>
        InvoiceSearchResponse GetResellersV6Invoicesearch(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?));

        /// <summary>
        /// Search your invoice
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <returns>ApiResponse of InvoiceSearchResponse</returns>
        ApiResponse<InvoiceSearchResponse> GetResellersV6InvoicesearchWithHttpInfo(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Invoice Details v6.1
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceDetailsv61Response</returns>
        System.Threading.Tasks.Task<InvoiceDetailsv61Response> GetInvoicedetailsV61Async(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Invoice Details v6.1
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceDetailsv61Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceDetailsv61Response>> GetInvoicedetailsV61WithHttpInfoAsync(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search your invoice
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceSearchResponse</returns>
        System.Threading.Tasks.Task<InvoiceSearchResponse> GetResellersV6InvoicesearchAsync(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search your invoice
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceSearchResponse>> GetResellersV6InvoicesearchWithHttpInfoAsync(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApi : IInvoicesApiSync, IInvoicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoicesApi : IDisposable, IInvoicesApi
    {
        private xi.sdk.resellers.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public InvoicesApi(string basePath)
        {
            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public InvoicesApi(xi.sdk.resellers.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InvoicesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InvoicesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InvoicesApi(HttpClient client, xi.sdk.resellers.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public InvoicesApi(xi.sdk.resellers.Client.ISynchronousClient client, xi.sdk.resellers.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Invoice Details v6.1 Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <returns>InvoiceDetailsv61Response</returns>
        public InvoiceDetailsv61Response GetInvoicedetailsV61(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?))
        {
            xi.sdk.resellers.Client.ApiResponse<InvoiceDetailsv61Response> localVarResponse = GetInvoicedetailsV61WithHttpInfo(invoiceNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMApplicationID, customerType, includeSerialNumbers);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Details v6.1 Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <returns>ApiResponse of InvoiceDetailsv61Response</returns>
        public xi.sdk.resellers.Client.ApiResponse<InvoiceDetailsv61Response> GetInvoicedetailsV61WithHttpInfo(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?))
        {
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'invoiceNumber' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMApplicationID' is set
            if (iMApplicationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMApplicationID' when calling InvoicesApi->GetInvoicedetailsV61");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("invoiceNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(invoiceNumber)); // path parameter
            if (customerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerType", customerType));
            }
            if (includeSerialNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeSerialNumbers", includeSerialNumbers));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-ApplicationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMApplicationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvoiceDetailsv61Response>("/resellers/v6.1/invoices/{invoiceNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoicedetailsV61", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice Details v6.1 Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceDetailsv61Response</returns>
        public async System.Threading.Tasks.Task<InvoiceDetailsv61Response> GetInvoicedetailsV61Async(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<InvoiceDetailsv61Response> localVarResponse = await GetInvoicedetailsV61WithHttpInfoAsync(invoiceNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMApplicationID, customerType, includeSerialNumbers, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Details v6.1 Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceNumber">The Ingram Micro invoice number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany.</param>
        /// <param name="customerType">it should be invoice or order (optional)</param>
        /// <param name="includeSerialNumbers">if serial in the response send as true or else false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceDetailsv61Response)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<InvoiceDetailsv61Response>> GetInvoicedetailsV61WithHttpInfoAsync(string invoiceNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string iMApplicationID, string? customerType = default(string?), bool? includeSerialNumbers = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'invoiceNumber' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling InvoicesApi->GetInvoicedetailsV61");

            // verify the required parameter 'iMApplicationID' is set
            if (iMApplicationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMApplicationID' when calling InvoicesApi->GetInvoicedetailsV61");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("invoiceNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(invoiceNumber)); // path parameter
            if (customerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerType", customerType));
            }
            if (includeSerialNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeSerialNumbers", includeSerialNumbers));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-ApplicationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMApplicationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceDetailsv61Response>("/resellers/v6.1/invoices/{invoiceNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoicedetailsV61", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your invoice Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <returns>InvoiceSearchResponse</returns>
        public InvoiceSearchResponse GetResellersV6Invoicesearch(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<InvoiceSearchResponse> localVarResponse = GetResellersV6InvoicesearchWithHttpInfo(iMApplicationID, iMCustomerNumber, iMCountryCode, iMCorrelationID, paymentTermsNetDate, invoiceDate, invoiceDueDate, orderDate, orderFromDate, orderToDate, orderNumber, deliveryNumber, invoiceNumber, invoiceStatus, invoiceType, customerOrderNumber, endCustomerOrderNumber, specialBidNumber, invoiceFromDueDate, invoiceToDueDate, invoiceFromDate, invoiceToDate, pageSize, pageNumber, orderby, direction, serialNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your invoice Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <returns>ApiResponse of InvoiceSearchResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<InvoiceSearchResponse> GetResellersV6InvoicesearchWithHttpInfo(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?))
        {
            // verify the required parameter 'iMApplicationID' is set
            if (iMApplicationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMApplicationID' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling InvoicesApi->GetResellersV6Invoicesearch");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (paymentTermsNetDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "paymentTermsNetDate", paymentTermsNetDate));
            }
            if (invoiceDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceDate", invoiceDate));
            }
            if (invoiceDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceDueDate", invoiceDueDate));
            }
            if (orderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderDate", orderDate));
            }
            if (orderFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderFromDate", orderFromDate));
            }
            if (orderToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderToDate", orderToDate));
            }
            if (orderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderNumber", orderNumber));
            }
            if (deliveryNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "DeliveryNumber", deliveryNumber));
            }
            if (invoiceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceNumber", invoiceNumber));
            }
            if (invoiceStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceStatus", invoiceStatus));
            }
            if (invoiceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceType", invoiceType));
            }
            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (endCustomerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "endCustomerOrderNumber", endCustomerOrderNumber));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            if (invoiceFromDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceFromDueDate", invoiceFromDueDate));
            }
            if (invoiceToDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceToDueDate", invoiceToDueDate));
            }
            if (invoiceFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceFromDate", invoiceFromDate));
            }
            if (invoiceToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceToDate", invoiceToDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-ApplicationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMApplicationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvoiceSearchResponse>("/resellers/v6/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Invoicesearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your invoice Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceSearchResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceSearchResponse> GetResellersV6InvoicesearchAsync(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<InvoiceSearchResponse> localVarResponse = await GetResellersV6InvoicesearchWithHttpInfoAsync(iMApplicationID, iMCustomerNumber, iMCountryCode, iMCorrelationID, paymentTermsNetDate, invoiceDate, invoiceDueDate, orderDate, orderFromDate, orderToDate, orderNumber, deliveryNumber, invoiceNumber, invoiceStatus, invoiceType, customerOrderNumber, endCustomerOrderNumber, specialBidNumber, invoiceFromDueDate, invoiceToDueDate, invoiceFromDate, invoiceToDate, pageSize, pageNumber, orderby, direction, serialNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your invoice Search your Ingram Micro invoices. This endpoint searches by multiple invoice parameters and supports pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMApplicationID">Unique value used to identify the sender of the transaction. Example: MyCompany</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="paymentTermsNetDate">Search by payment terms net date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDate">Search by invoice date(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceDueDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="orderDate">Search by OrderDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderFromDate">Search by OrderFromDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderToDate">Search by OrderToDate date(yyyy-MM-dd). (optional)</param>
        /// <param name="orderNumber">Search by order number (optional)</param>
        /// <param name="deliveryNumber">Search by delivery number. (optional)</param>
        /// <param name="invoiceNumber">The Ingram Micro invoice number. (optional)</param>
        /// <param name="invoiceStatus">Ingram Micro invoice status. (optional)</param>
        /// <param name="invoiceType">Ingram Micro InvoiceType. (optional)</param>
        /// <param name="customerOrderNumber">Ingram Micro CustomerOrderNumber. (optional)</param>
        /// <param name="endCustomerOrderNumber">Ingram Micro EndCustomerOrderNumber. (optional)</param>
        /// <param name="specialBidNumber">Ingram Micro SpecialBidNumber. (optional)</param>
        /// <param name="invoiceFromDueDate">Search by invoice due date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDueDate">Search by invoice due date to(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceFromDate">Search by invoice date from(yyyy-MM-dd). (optional)</param>
        /// <param name="invoiceToDate">Search by invoice date To(yyyy-MM-dd). (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="orderby">Column name with which we want to sort. (optional)</param>
        /// <param name="direction">asc or desc , along with orderby column result set will be sorted. (optional)</param>
        /// <param name="serialNumber">Serial number of the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<InvoiceSearchResponse>> GetResellersV6InvoicesearchWithHttpInfoAsync(string iMApplicationID, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? paymentTermsNetDate = default(string?), string? invoiceDate = default(string?), string? invoiceDueDate = default(string?), string? orderDate = default(string?), string? orderFromDate = default(string?), string? orderToDate = default(string?), string? orderNumber = default(string?), string? deliveryNumber = default(string?), string? invoiceNumber = default(string?), string? invoiceStatus = default(string?), string? invoiceType = default(string?), string? customerOrderNumber = default(string?), string? endCustomerOrderNumber = default(string?), string? specialBidNumber = default(string?), string? invoiceFromDueDate = default(string?), string? invoiceToDueDate = default(string?), List<string>? invoiceFromDate = default(List<string>?), List<string>? invoiceToDate = default(List<string>?), int? pageSize = default(int?), int? pageNumber = default(int?), string? orderby = default(string?), string? direction = default(string?), string? serialNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMApplicationID' is set
            if (iMApplicationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMApplicationID' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling InvoicesApi->GetResellersV6Invoicesearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling InvoicesApi->GetResellersV6Invoicesearch");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (paymentTermsNetDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "paymentTermsNetDate", paymentTermsNetDate));
            }
            if (invoiceDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceDate", invoiceDate));
            }
            if (invoiceDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceDueDate", invoiceDueDate));
            }
            if (orderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderDate", orderDate));
            }
            if (orderFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderFromDate", orderFromDate));
            }
            if (orderToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderToDate", orderToDate));
            }
            if (orderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderNumber", orderNumber));
            }
            if (deliveryNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "DeliveryNumber", deliveryNumber));
            }
            if (invoiceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceNumber", invoiceNumber));
            }
            if (invoiceStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceStatus", invoiceStatus));
            }
            if (invoiceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceType", invoiceType));
            }
            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (endCustomerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "endCustomerOrderNumber", endCustomerOrderNumber));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            if (invoiceFromDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceFromDueDate", invoiceFromDueDate));
            }
            if (invoiceToDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "invoiceToDueDate", invoiceToDueDate));
            }
            if (invoiceFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceFromDate", invoiceFromDate));
            }
            if (invoiceToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceToDate", invoiceToDate));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-ApplicationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMApplicationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceSearchResponse>("/resellers/v6/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Invoicesearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
