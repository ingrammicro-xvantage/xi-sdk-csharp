/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.Client;
using xi.sdk.resellers.Model;

namespace xi.sdk.resellers.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductCatalogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <returns>ProductDetailResponse</returns>
        ProductDetailResponse GetResellerV6Productdetail(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?));

        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        ApiResponse<ProductDetailResponse> GetResellerV6ProductdetailWithHttpInfo(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?));
        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <returns>ProductDetailResponse</returns>
        ProductDetailResponse GetResellerV6Productdetailcmp(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?));

        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        ApiResponse<ProductDetailResponse> GetResellerV6ProductdetailcmpWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?));
        /// <summary>
        /// Search Products
        /// </summary>
        /// <remarks>
        /// Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <returns>ProductSearchResponse</returns>
        ProductSearchResponse GetResellerV6Productsearch(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?));

        /// <summary>
        /// Search Products
        /// </summary>
        /// <remarks>
        /// Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <returns>ApiResponse of ProductSearchResponse</returns>
        ApiResponse<ProductSearchResponse> GetResellerV6ProductsearchWithHttpInfo(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?));
        /// <summary>
        /// Price and Availability
        /// </summary>
        /// <remarks>
        /// The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        List<PriceAndAvailabilityResponseInner> PostPriceandavailability(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?));

        /// <summary>
        /// Price and Availability
        /// </summary>
        /// <remarks>
        /// The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        ApiResponse<List<PriceAndAvailabilityResponseInner>> PostPriceandavailabilityWithHttpInfo(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductCatalogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        System.Threading.Tasks.Task<ProductDetailResponse> GetResellerV6ProductdetailAsync(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDetailResponse>> GetResellerV6ProductdetailWithHttpInfoAsync(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        System.Threading.Tasks.Task<ProductDetailResponse> GetResellerV6ProductdetailcmpAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Product Details
        /// </summary>
        /// <remarks>
        /// Search all the product-related details.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDetailResponse>> GetResellerV6ProductdetailcmpWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search Products
        /// </summary>
        /// <remarks>
        /// Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSearchResponse</returns>
        System.Threading.Tasks.Task<ProductSearchResponse> GetResellerV6ProductsearchAsync(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search Products
        /// </summary>
        /// <remarks>
        /// Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSearchResponse>> GetResellerV6ProductsearchWithHttpInfoAsync(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Price and Availability
        /// </summary>
        /// <remarks>
        /// The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<PriceAndAvailabilityResponseInner>> PostPriceandavailabilityAsync(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Price and Availability
        /// </summary>
        /// <remarks>
        /// The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceAndAvailabilityResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PriceAndAvailabilityResponseInner>>> PostPriceandavailabilityWithHttpInfoAsync(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductCatalogApi : IProductCatalogApiSync, IProductCatalogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductCatalogApi : IDisposable, IProductCatalogApi
    {
        private xi.sdk.resellers.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProductCatalogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProductCatalogApi(string basePath)
        {
            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProductCatalogApi(xi.sdk.resellers.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductCatalogApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductCatalogApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProductCatalogApi(HttpClient client, xi.sdk.resellers.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCatalogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProductCatalogApi(xi.sdk.resellers.Client.ISynchronousClient client, xi.sdk.resellers.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Product Details Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <returns>ProductDetailResponse</returns>
        public ProductDetailResponse GetResellerV6Productdetail(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> localVarResponse = GetResellerV6ProductdetailWithHttpInfo(ingramPartNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Details Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> GetResellerV6ProductdetailWithHttpInfo(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?))
        {
            // verify the required parameter 'ingramPartNumber' is set
            if (ingramPartNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'ingramPartNumber' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productdetail");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ingramPartNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(ingramPartNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductDetailResponse>("/resellers/v6/catalog/details/{ingramPartNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productdetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Details Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        public async System.Threading.Tasks.Task<ProductDetailResponse> GetResellerV6ProductdetailAsync(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> localVarResponse = await GetResellerV6ProductdetailWithHttpInfoAsync(ingramPartNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Details Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse>> GetResellerV6ProductdetailWithHttpInfoAsync(string ingramPartNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingramPartNumber' is set
            if (ingramPartNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'ingramPartNumber' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productdetail");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productdetail");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ingramPartNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(ingramPartNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductDetailResponse>("/resellers/v6/catalog/details/{ingramPartNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productdetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Details Search all the product-related details.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <returns>ProductDetailResponse</returns>
        public ProductDetailResponse GetResellerV6Productdetailcmp(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> localVarResponse = GetResellerV6ProductdetailcmpWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, planName, planId, vendorPartNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Details Search all the product-related details.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <returns>ApiResponse of ProductDetailResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> GetResellerV6ProductdetailcmpWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (planName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planName", planName));
            }
            if (planId != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planId", planId));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorPartNumber", vendorPartNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductDetailResponse>("/resellers/v6/catalog/details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productdetailcmp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Details Search all the product-related details.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDetailResponse</returns>
        public async System.Threading.Tasks.Task<ProductDetailResponse> GetResellerV6ProductdetailcmpAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse> localVarResponse = await GetResellerV6ProductdetailcmpWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, planName, planId, vendorPartNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Details Search all the product-related details.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="planName">Name of the subscription plan (optional)</param>
        /// <param name="planId">Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDetailResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<ProductDetailResponse>> GetResellerV6ProductdetailcmpWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), string? planName = default(string?), string? planId = default(string?), string? vendorPartNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productdetailcmp");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (planName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planName", planName));
            }
            if (planId != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planId", planId));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorPartNumber", vendorPartNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductDetailResponse>("/resellers/v6/catalog/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productdetailcmp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Products Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <returns>ProductSearchResponse</returns>
        public ProductSearchResponse GetResellerV6Productsearch(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductSearchResponse> localVarResponse = GetResellerV6ProductsearchWithHttpInfo(iMCustomerNumber, iMCorrelationID, iMCountryCode, pageNumber, pageSize, iMSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Products Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <returns>ApiResponse of ProductSearchResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<ProductSearchResponse> GetResellerV6ProductsearchWithHttpInfo(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productsearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productsearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productsearch");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (hasDiscounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "hasDiscounts", hasDiscounts));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "vendor", vendor));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "vendorPartNumber", vendorPartNumber));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "keyword", keyword));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (skipAuthorisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "skipAuthorisation", skipAuthorisation));
            }
            if (groupName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "groupName", groupName));
            }
            if (planID != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planID", planID));
            }
            if (showGroupInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "showGroupInfo", showGroupInfo));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", xi.sdk.resellers.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductSearchResponse>("/resellers/v6/catalog", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productsearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Products Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSearchResponse</returns>
        public async System.Threading.Tasks.Task<ProductSearchResponse> GetResellerV6ProductsearchAsync(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<ProductSearchResponse> localVarResponse = await GetResellerV6ProductsearchWithHttpInfoAsync(iMCustomerNumber, iMCorrelationID, iMCountryCode, pageNumber, pageSize, iMSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Products Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="pageNumber">Current page number. Default is 1 (optional)</param>
        /// <param name="pageSize">Number of records required in the call - max records 100 per page (optional)</param>
        /// <param name="iMSenderID">Sender Identification text (optional)</param>
        /// <param name="type">The SKU type of product. One of Physical, Digital, or Any. (optional)</param>
        /// <param name="hasDiscounts">Specifies if there are discounts available for the product. (optional)</param>
        /// <param name="vendor">The name of the vendor/manufacturer of the product. (optional)</param>
        /// <param name="vendorPartNumber">The vendors part number for the product. (optional)</param>
        /// <param name="acceptLanguage">Header to the API calls, the content will help us identify the response language. (optional, default to &quot;en&quot;)</param>
        /// <param name="vendorNumber">Vendor number of the product (optional)</param>
        /// <param name="keyword">Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)</param>
        /// <param name="category">The category of the product. Example: Displays. (optional)</param>
        /// <param name="skipAuthorisation">This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)</param>
        /// <param name="groupName">Name of the Product Group (optional)</param>
        /// <param name="planID">ID of the plan (optional)</param>
        /// <param name="showGroupInfo">In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<ProductSearchResponse>> GetResellerV6ProductsearchWithHttpInfoAsync(string iMCustomerNumber, string iMCorrelationID, string iMCountryCode, int? pageNumber = default(int?), int? pageSize = default(int?), string? iMSenderID = default(string?), string? type = default(string?), string? hasDiscounts = default(string?), List<string>? vendor = default(List<string>?), List<string>? vendorPartNumber = default(List<string>?), string? acceptLanguage = default(string?), string? vendorNumber = default(string?), List<string>? keyword = default(List<string>?), string? category = default(string?), string? skipAuthorisation = default(string?), string? groupName = default(string?), GetResellerV6ProductsearchPlanIDParameter? planID = default(GetResellerV6ProductsearchPlanIDParameter?), bool? showGroupInfo = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->GetResellerV6Productsearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->GetResellerV6Productsearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->GetResellerV6Productsearch");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (hasDiscounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "hasDiscounts", hasDiscounts));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "vendor", vendor));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "vendorPartNumber", vendorPartNumber));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "keyword", keyword));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (skipAuthorisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "skipAuthorisation", skipAuthorisation));
            }
            if (groupName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "groupName", groupName));
            }
            if (planID != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "planID", planID));
            }
            if (showGroupInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "showGroupInfo", showGroupInfo));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", xi.sdk.resellers.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductSearchResponse>("/resellers/v6/catalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellerV6Productsearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price and Availability The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        public List<PriceAndAvailabilityResponseInner> PostPriceandavailability(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<List<PriceAndAvailabilityResponseInner>> localVarResponse = PostPriceandavailabilityWithHttpInfo(includeAvailability, includePricing, iMCustomerNumber, iMCountryCode, iMCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price and Availability The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        public xi.sdk.resellers.Client.ApiResponse<List<PriceAndAvailabilityResponseInner>> PostPriceandavailabilityWithHttpInfo(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'priceAndAvailabilityRequest' is set
            if (priceAndAvailabilityRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'priceAndAvailabilityRequest' when calling ProductCatalogApi->PostPriceandavailability");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeAvailability", includeAvailability));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includePricing", includePricing));
            if (includeProductAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeProductAttributes", includeProductAttributes));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.Data = priceAndAvailabilityRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<PriceAndAvailabilityResponseInner>>("/resellers/v6/catalog/priceandavailability", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPriceandavailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price and Availability The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceAndAvailabilityResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<PriceAndAvailabilityResponseInner>> PostPriceandavailabilityAsync(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<List<PriceAndAvailabilityResponseInner>> localVarResponse = await PostPriceandavailabilityWithHttpInfoAsync(includeAvailability, includePricing, iMCustomerNumber, iMCountryCode, iMCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price and Availability The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAvailability">Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details</param>
        /// <param name="includePricing">Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="priceAndAvailabilityRequest"></param>
        /// <param name="includeProductAttributes">Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceAndAvailabilityResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<List<PriceAndAvailabilityResponseInner>>> PostPriceandavailabilityWithHttpInfoAsync(bool includeAvailability, bool includePricing, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, bool? includeProductAttributes = default(bool?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling ProductCatalogApi->PostPriceandavailability");

            // verify the required parameter 'priceAndAvailabilityRequest' is set
            if (priceAndAvailabilityRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'priceAndAvailabilityRequest' when calling ProductCatalogApi->PostPriceandavailability");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeAvailability", includeAvailability));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includePricing", includePricing));
            if (includeProductAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "includeProductAttributes", includeProductAttributes));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.Data = priceAndAvailabilityRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<PriceAndAvailabilityResponseInner>>("/resellers/v6/catalog/priceandavailability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPriceandavailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
