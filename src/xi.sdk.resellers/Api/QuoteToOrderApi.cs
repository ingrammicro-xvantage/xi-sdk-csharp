/*
 * XI Sdk Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.Client;
using xi.sdk.resellers.Model;

namespace xi.sdk.resellers.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuoteToOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Quote To Order
        /// </summary>
        /// <remarks>
        /// The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>QuoteToOrderResponse</returns>
        QuoteToOrderResponse PostQuoteToOrderV6(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?));

        /// <summary>
        /// Quote To Order
        /// </summary>
        /// <remarks>
        /// The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>ApiResponse of QuoteToOrderResponse</returns>
        ApiResponse<QuoteToOrderResponse> PostQuoteToOrderV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuoteToOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Quote To Order
        /// </summary>
        /// <remarks>
        /// The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteToOrderResponse</returns>
        System.Threading.Tasks.Task<QuoteToOrderResponse> PostQuoteToOrderV6Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Quote To Order
        /// </summary>
        /// <remarks>
        /// The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteToOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteToOrderResponse>> PostQuoteToOrderV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuoteToOrderApi : IQuoteToOrderApiSync, IQuoteToOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuoteToOrderApi : IDisposable, IQuoteToOrderApi
    {
        private xi.sdk.resellers.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public QuoteToOrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public QuoteToOrderApi(string basePath)
        {
            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public QuoteToOrderApi(xi.sdk.resellers.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QuoteToOrderApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QuoteToOrderApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QuoteToOrderApi(HttpClient client, xi.sdk.resellers.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public QuoteToOrderApi(xi.sdk.resellers.Client.ISynchronousClient client, xi.sdk.resellers.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Quote To Order The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>QuoteToOrderResponse</returns>
        public QuoteToOrderResponse PostQuoteToOrderV6(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<QuoteToOrderResponse> localVarResponse = PostQuoteToOrderV6WithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, quoteToOrderDetailsDTO, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quote To Order The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>ApiResponse of QuoteToOrderResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<QuoteToOrderResponse> PostQuoteToOrderV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'quoteToOrderDetailsDTO' is set
            if (quoteToOrderDetailsDTO == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'quoteToOrderDetailsDTO' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = quoteToOrderDetailsDTO;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QuoteToOrderResponse>("/resellers/v6/q2o/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostQuoteToOrderV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quote To Order The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuoteToOrderResponse</returns>
        public async System.Threading.Tasks.Task<QuoteToOrderResponse> PostQuoteToOrderV6Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<QuoteToOrderResponse> localVarResponse = await PostQuoteToOrderV6WithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, quoteToOrderDetailsDTO, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quote To Order The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. &lt;br &gt; &lt;br &gt;Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. &lt;br &gt; &lt;br &gt; **Prerequisite:** Pre-defined callback URL &lt;br &gt; &lt;br &gt; Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. &lt;br &gt;&lt;br &gt; **How it works:** &lt;br &gt;&lt;br &gt; - The customer validates the quote with a quote number from Validate Quote endpoint. &lt;br &gt; - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. &lt;br &gt; - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. &lt;br &gt; - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="quoteToOrderDetailsDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuoteToOrderResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<QuoteToOrderResponse>> PostQuoteToOrderV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, QuoteToOrderDetailsDTO quoteToOrderDetailsDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling QuoteToOrderApi->PostQuoteToOrderV6");

            // verify the required parameter 'quoteToOrderDetailsDTO' is set
            if (quoteToOrderDetailsDTO == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'quoteToOrderDetailsDTO' when calling QuoteToOrderApi->PostQuoteToOrderV6");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = quoteToOrderDetailsDTO;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<QuoteToOrderResponse>("/resellers/v6/q2o/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostQuoteToOrderV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
