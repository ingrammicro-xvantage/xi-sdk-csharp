/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.Client;
using xi.sdk.resellers.Model;

namespace xi.sdk.resellers.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel your Order
        /// </summary>
        /// <remarks>
        /// This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns></returns>
        void DeleteOrdercancel(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?));

        /// <summary>
        /// Cancel your Order
        /// </summary>
        /// <remarks>
        /// This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrdercancelWithHttpInfo(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?));
        /// <summary>
        /// Get Order Details v6.1
        /// </summary>
        /// <remarks>
        /// The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>OrderDetailB2B</returns>
        OrderDetailB2B GetOrderdetailsV61(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?));

        /// <summary>
        /// Get Order Details v6.1
        /// </summary>
        /// <remarks>
        /// The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailB2B</returns>
        ApiResponse<OrderDetailB2B> GetOrderdetailsV61WithHttpInfo(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?));
        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <returns>OrderSearchResponse</returns>
        OrderSearchResponse GetResellersV6Ordersearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?));

        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        ApiResponse<OrderSearchResponse> GetResellersV6OrdersearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?));
        /// <summary>
        /// Create your Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>OrderCreateResponse</returns>
        OrderCreateResponse PostCreateorderV6(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?));

        /// <summary>
        /// Create your Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        ApiResponse<OrderCreateResponse> PostCreateorderV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?));
        /// <summary>
        /// Create your Order v7
        /// </summary>
        /// <remarks>
        /// This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>AsyncOrderCreateResponse</returns>
        AsyncOrderCreateResponse PostCreateorderV7(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?));

        /// <summary>
        /// Create your Order v7
        /// </summary>
        /// <remarks>
        /// This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>ApiResponse of AsyncOrderCreateResponse</returns>
        ApiResponse<AsyncOrderCreateResponse> PostCreateorderV7WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?));
        /// <summary>
        /// Modify your Order
        /// </summary>
        /// <remarks>
        /// The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>OrderModifyResponse</returns>
        OrderModifyResponse PutOrdermodify(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?));

        /// <summary>
        /// Modify your Order
        /// </summary>
        /// <remarks>
        /// The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of OrderModifyResponse</returns>
        ApiResponse<OrderModifyResponse> PutOrdermodifyWithHttpInfo(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel your Order
        /// </summary>
        /// <remarks>
        /// This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrdercancelAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel your Order
        /// </summary>
        /// <remarks>
        /// This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrdercancelWithHttpInfoAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Details v6.1
        /// </summary>
        /// <remarks>
        /// The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailB2B</returns>
        System.Threading.Tasks.Task<OrderDetailB2B> GetOrderdetailsV61Async(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Details v6.1
        /// </summary>
        /// <remarks>
        /// The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailB2B)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailB2B>> GetOrderdetailsV61WithHttpInfoAsync(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        System.Threading.Tasks.Task<OrderSearchResponse> GetResellersV6OrdersearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSearchResponse>> GetResellersV6OrdersearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create your Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        System.Threading.Tasks.Task<OrderCreateResponse> PostCreateorderV6Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create your Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCreateResponse>> PostCreateorderV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create your Order v7
        /// </summary>
        /// <remarks>
        /// This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AsyncOrderCreateResponse</returns>
        System.Threading.Tasks.Task<AsyncOrderCreateResponse> PostCreateorderV7Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create your Order v7
        /// </summary>
        /// <remarks>
        /// This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AsyncOrderCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncOrderCreateResponse>> PostCreateorderV7WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Modify your Order
        /// </summary>
        /// <remarks>
        /// The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderModifyResponse</returns>
        System.Threading.Tasks.Task<OrderModifyResponse> PutOrdermodifyAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Modify your Order
        /// </summary>
        /// <remarks>
        /// The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderModifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderModifyResponse>> PutOrdermodifyWithHttpInfoAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IDisposable, IOrdersApi
    {
        private xi.sdk.resellers.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrdersApi(xi.sdk.resellers.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersApi(HttpClient client, xi.sdk.resellers.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrdersApi(xi.sdk.resellers.Client.ISynchronousClient client, xi.sdk.resellers.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel your Order This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns></returns>
        public void DeleteOrdercancel(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?))
        {
            DeleteOrdercancelWithHttpInfo(orderNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, regionCode, iMSenderID);
        }

        /// <summary>
        /// Cancel your Order This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public xi.sdk.resellers.Client.ApiResponse<Object> DeleteOrdercancelWithHttpInfo(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?))
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->DeleteOrdercancel");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OrderNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/resellers/v6/orders/{OrderNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrdercancel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel your Order This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrdercancelAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOrdercancelWithHttpInfoAsync(orderNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, regionCode, iMSenderID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel your Order This call must be submitted before the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<Object>> DeleteOrdercancelWithHttpInfoAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->DeleteOrdercancel");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->DeleteOrdercancel");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OrderNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/resellers/v6/orders/{OrderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrdercancel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details v6.1 The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>OrderDetailB2B</returns>
        public OrderDetailB2B GetOrderdetailsV61(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderDetailB2B> localVarResponse = GetOrderdetailsV61WithHttpInfo(ordernumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details v6.1 The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailB2B</returns>
        public xi.sdk.resellers.Client.ApiResponse<OrderDetailB2B> GetOrderdetailsV61WithHttpInfo(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->GetOrderdetailsV61");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (simulateStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "simulateStatus", simulateStatus));
            }
            if (isIml != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "isIml", isIml));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderDetailB2B>("/resellers/v6.1/orders/{ordernumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderdetailsV61", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details v6.1 The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailB2B</returns>
        public async System.Threading.Tasks.Task<OrderDetailB2B> GetOrderdetailsV61Async(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderDetailB2B> localVarResponse = await GetOrderdetailsV61WithHttpInfoAsync(ordernumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details v6.1 The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailB2B)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<OrderDetailB2B>> GetOrderdetailsV61WithHttpInfoAsync(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateOnly? ingramOrderDate = default(DateOnly?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->GetOrderdetailsV61");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->GetOrderdetailsV61");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (simulateStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "simulateStatus", simulateStatus));
            }
            if (isIml != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "isIml", isIml));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderDetailB2B>("/resellers/v6.1/orders/{ordernumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderdetailsV61", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your Orders The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <returns>OrderSearchResponse</returns>
        public OrderSearchResponse GetResellersV6Ordersearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderSearchResponse> localVarResponse = GetResellersV6OrdersearchWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, iMSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your Orders The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<OrderSearchResponse> GetResellersV6OrdersearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->GetResellersV6Ordersearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->GetResellersV6Ordersearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->GetResellersV6Ordersearch");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ingramOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderNumber", ingramOrderNumber));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderStatus", orderStatus));
            }
            if (orderStatusIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "orderStatus-in", orderStatusIn));
            }
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (ingramOrderDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "ingramOrderDate-bt", ingramOrderDateBt));
            }
            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (endCustomerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "endCustomerOrderNumber", endCustomerOrderNumber));
            }
            if (invoiceDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceDate_bt", invoiceDateBt));
            }
            if (shipDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "shipDate_bt", shipDateBt));
            }
            if (deliveryDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "deliveryDate_bt", deliveryDateBt));
            }
            if (ingramPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramPartNumber", ingramPartNumber));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorPartNumber", vendorPartNumber));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            if (trackingNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorName", vendorName));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderSearchResponse>("/resellers/v6/orders/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Ordersearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your Orders The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        public async System.Threading.Tasks.Task<OrderSearchResponse> GetResellersV6OrdersearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderSearchResponse> localVarResponse = await GetResellersV6OrdersearchWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, iMSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your Orders The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="ingramOrderNumber">The Ingram Micro order number. (optional)</param>
        /// <param name="orderStatus">Ingram Micro order status. (optional)</param>
        /// <param name="orderStatusIn">Ingram Micro order status(can use it for multiple entries). (optional)</param>
        /// <param name="ingramOrderDate">Search by Order date(yyyy-MM-dd). (optional)</param>
        /// <param name="ingramOrderDateBt">Search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">Search using your PO/Order number. (optional)</param>
        /// <param name="pageSize">The number of records required in the call - max records 100 per page. (optional)</param>
        /// <param name="pageNumber">The page number reference. (optional)</param>
        /// <param name="endCustomerOrderNumber">End customer/user purchase order number. (optional)</param>
        /// <param name="invoiceDateBt">Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)</param>
        /// <param name="shipDateBt">Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)</param>
        /// <param name="deliveryDateBt">The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product. (optional)</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="trackingNumber">The tracking number of the order.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="vendorName">Name of the vendor. (optional)</param>
        /// <param name="specialBidNumber">The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<OrderSearchResponse>> GetResellersV6OrdersearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? ingramOrderNumber = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIn = default(List<string>?), string? ingramOrderDate = default(string?), List<string>? ingramOrderDateBt = default(List<string>?), string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? endCustomerOrderNumber = default(string?), List<string>? invoiceDateBt = default(List<string>?), List<string>? shipDateBt = default(List<string>?), List<string>? deliveryDateBt = default(List<string>?), string? ingramPartNumber = default(string?), string? vendorPartNumber = default(string?), string? serialNumber = default(string?), string? trackingNumber = default(string?), string? vendorName = default(string?), string? specialBidNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->GetResellersV6Ordersearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->GetResellersV6Ordersearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->GetResellersV6Ordersearch");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ingramOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderNumber", ingramOrderNumber));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "orderStatus", orderStatus));
            }
            if (orderStatusIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "orderStatus-in", orderStatusIn));
            }
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (ingramOrderDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "ingramOrderDate-bt", ingramOrderDateBt));
            }
            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (endCustomerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "endCustomerOrderNumber", endCustomerOrderNumber));
            }
            if (invoiceDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "invoiceDate_bt", invoiceDateBt));
            }
            if (shipDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "shipDate_bt", shipDateBt));
            }
            if (deliveryDateBt != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("multi", "deliveryDate_bt", deliveryDateBt));
            }
            if (ingramPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "ingramPartNumber", ingramPartNumber));
            }
            if (vendorPartNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorPartNumber", vendorPartNumber));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            if (trackingNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "trackingNumber", trackingNumber));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "vendorName", vendorName));
            }
            if (specialBidNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "specialBidNumber", specialBidNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderSearchResponse>("/resellers/v6/orders/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Ordersearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create your Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>OrderCreateResponse</returns>
        public OrderCreateResponse PostCreateorderV6(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderCreateResponse> localVarResponse = PostCreateorderV6WithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, orderCreateRequest, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create your Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<OrderCreateResponse> PostCreateorderV6WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'orderCreateRequest' is set
            if (orderCreateRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderCreateRequest' when calling OrdersApi->PostCreateorderV6");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = orderCreateRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderCreateResponse>("/resellers/v6/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreateorderV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create your Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        public async System.Threading.Tasks.Task<OrderCreateResponse> PostCreateorderV6Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderCreateResponse> localVarResponse = await PostCreateorderV6WithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, orderCreateRequest, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create your Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="orderCreateRequest"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<OrderCreateResponse>> PostCreateorderV6WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderCreateRequest orderCreateRequest, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PostCreateorderV6");

            // verify the required parameter 'orderCreateRequest' is set
            if (orderCreateRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderCreateRequest' when calling OrdersApi->PostCreateorderV6");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = orderCreateRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderCreateResponse>("/resellers/v6/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreateorderV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create your Order v7 This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>AsyncOrderCreateResponse</returns>
        public AsyncOrderCreateResponse PostCreateorderV7(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<AsyncOrderCreateResponse> localVarResponse = PostCreateorderV7WithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, asyncOrderCreateDTO, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create your Order v7 This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <returns>ApiResponse of AsyncOrderCreateResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<AsyncOrderCreateResponse> PostCreateorderV7WithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'asyncOrderCreateDTO' is set
            if (asyncOrderCreateDTO == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'asyncOrderCreateDTO' when calling OrdersApi->PostCreateorderV7");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = asyncOrderCreateDTO;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AsyncOrderCreateResponse>("/resellers/v7/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreateorderV7", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create your Order v7 This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AsyncOrderCreateResponse</returns>
        public async System.Threading.Tasks.Task<AsyncOrderCreateResponse> PostCreateorderV7Async(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<AsyncOrderCreateResponse> localVarResponse = await PostCreateorderV7WithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, asyncOrderCreateDTO, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create your Order v7 This API will allow customers to perform both standard ordering and quote to order functionality via a single API enabling them to have a single endpoint to cater to all types of orders.  This approach will standardize the ordering flow for customers where they will get the response for all orders on to their webhooks.  It provides the much-awaited async ordering flow for Reseller API where large orders can also be placed via a single API with guaranteed delivery. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="asyncOrderCreateDTO"></param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AsyncOrderCreateResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<AsyncOrderCreateResponse>> PostCreateorderV7WithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, AsyncOrderCreateDTO asyncOrderCreateDTO, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PostCreateorderV7");

            // verify the required parameter 'asyncOrderCreateDTO' is set
            if (asyncOrderCreateDTO == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'asyncOrderCreateDTO' when calling OrdersApi->PostCreateorderV7");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            localVarRequestOptions.Data = asyncOrderCreateDTO;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AsyncOrderCreateResponse>("/resellers/v7/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreateorderV7", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify your Order The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>OrderModifyResponse</returns>
        public OrderModifyResponse PutOrdermodify(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderModifyResponse> localVarResponse = PutOrdermodifyWithHttpInfo(orderNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, orderModifyRequest, actionCode, regionCode, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify your Order The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of OrderModifyResponse</returns>
        public xi.sdk.resellers.Client.ApiResponse<OrderModifyResponse> PutOrdermodifyWithHttpInfo(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?))
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'orderModifyRequest' is set
            if (orderModifyRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderModifyRequest' when calling OrdersApi->PutOrdermodify");

            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (actionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "actionCode", actionCode));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.Data = orderModifyRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<OrderModifyResponse>("/resellers/v6/orders/{orderNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOrdermodify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify your Order The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderModifyResponse</returns>
        public async System.Threading.Tasks.Task<OrderModifyResponse> PutOrdermodifyAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            xi.sdk.resellers.Client.ApiResponse<OrderModifyResponse> localVarResponse = await PutOrdermodifyWithHttpInfoAsync(orderNumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, orderModifyRequest, actionCode, regionCode, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify your Order The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber">Ingram sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="orderModifyRequest"></param>
        /// <param name="actionCode">Action code to be used for order release. (optional)</param>
        /// <param name="regionCode">Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderModifyResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.Client.ApiResponse<OrderModifyResponse>> PutOrdermodifyWithHttpInfoAsync(string orderNumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, OrderModifyRequest orderModifyRequest, string? actionCode = default(string?), string? regionCode = default(string?), string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersApi->PutOrdermodify");

            // verify the required parameter 'orderModifyRequest' is set
            if (orderModifyRequest == null)
                throw new xi.sdk.resellers.Client.ApiException(400, "Missing required parameter 'orderModifyRequest' when calling OrdersApi->PutOrdermodify");


            xi.sdk.resellers.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (actionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "actionCode", actionCode));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.Data = orderModifyRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OrderModifyResponse>("/resellers/v6/orders/{orderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOrdermodify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
