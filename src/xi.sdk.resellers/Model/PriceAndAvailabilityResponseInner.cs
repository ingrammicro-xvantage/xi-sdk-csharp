/*
 * XI SDK Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// PriceAndAvailabilityResponseInner
    /// </summary>
    [DataContract(Name = "PriceAndAvailabilityResponse_inner")]
    public partial class PriceAndAvailabilityResponseInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceAndAvailabilityResponseInner" /> class.
        /// </summary>
        /// <param name="productStatusCode">Codes signifying whether the sku is active or not..</param>
        /// <param name="productStatusMessage">Message returned saying whether sku is active..</param>
        /// <param name="ingramPartNumber">Ingram Micro unique part number for the product..</param>
        /// <param name="vendorPartNumber">Vendor’s part number for the product..</param>
        /// <param name="extendedVendorPartNumber">Extended Vendor Part Number. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara)..</param>
        /// <param name="customerPartNumber">Reseller / end-user’s part number for the product..</param>
        /// <param name="upc">The UPC code for the product. Consists of 12 numeric digits that are uniquely assigned to each trade item..</param>
        /// <param name="partNumberType">Number type of the part..</param>
        /// <param name="vendorNumber">Vendor number that identifies the product..</param>
        /// <param name="vendorName">Vendor name for the order..</param>
        /// <param name="description">The description given for the product..</param>
        /// <param name="productClass">Indicates whether the product is directly shipped from the vendor’s warehouse or if the product ships from Ingram Micro’s warehouse. Class Codes are Ingram classifications on how skus are stocked A &#x3D; Product that is stocked usually in all IM warehouses and replenished on a regular basis. B &#x3D; Product that is stocked in limited IM warehouses and replenished on a regular basis C &#x3D; Product that is stocked in fewer IM warehouses and replenished on a regular basis. D &#x3D; Product that Ingram Micro has elected to discontinue. E &#x3D; Product that will be phased out later, according to the vendor. You may not want to replenish this product, but instead sell down what is in stock. F &#x3D; Product that we carry for a specific customer or supplier under a contractual agreement. N &#x3D; New Sku. Classification before first receipt O &#x3D; Discontinued product to be liquidated S&#x3D; Order for Specialized Demand (Order to backorder) X&#x3D; direct ship from Vendor V &#x3D; product that vendor has elected to discontinue..</param>
        /// <param name="uom">The description given for the product..</param>
        /// <param name="productStatus">Status that gives whether the product is Active..</param>
        /// <param name="acceptBackOrder">Boolean that indicates if the product accepts backorder..</param>
        /// <param name="productAuthorized">Boolean that indicates whether a product is authorized..</param>
        /// <param name="returnableProduct">Boolean that indicates if the product can be returned..</param>
        /// <param name="endUserInfoRequired">Boolean that indicates  if end user information is required..</param>
        /// <param name="govtSpecialPriceAvailable">Boolean that indicates if special pricing is available for the product..</param>
        /// <param name="govtProgramType">Program type, “PA” for government orders, “ED” for education order..</param>
        /// <param name="govtEndUserType">Type of end user of the program. F &#x3D; Federal, S &#x3D; State, E &#x3D; Local, K &#x3D; K-12 school, and H &#x3D; Higher Education..</param>
        /// <param name="availability">availability.</param>
        /// <param name="reserveInventoryDetails">reserveInventoryDetails.</param>
        /// <param name="pricing">pricing.</param>
        /// <param name="discounts">discounts.</param>
        /// <param name="bundlePartIndicator">True of false value to indicate whether it’s bundle part. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara)..</param>
        /// <param name="serviceFees">*Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara)..</param>
        public PriceAndAvailabilityResponseInner(string productStatusCode = default(string), string productStatusMessage = default(string), string ingramPartNumber = default(string), string vendorPartNumber = default(string), string extendedVendorPartNumber = default(string), string customerPartNumber = default(string), string upc = default(string), string partNumberType = default(string), string vendorNumber = default(string), string vendorName = default(string), string description = default(string), string productClass = default(string), string uom = default(string), string productStatus = default(string), bool acceptBackOrder = default(bool), bool productAuthorized = default(bool), bool returnableProduct = default(bool), bool endUserInfoRequired = default(bool), bool govtSpecialPriceAvailable = default(bool), string govtProgramType = default(string), string govtEndUserType = default(string), PriceAndAvailabilityResponseInnerAvailability availability = default(PriceAndAvailabilityResponseInnerAvailability), List<PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner> reserveInventoryDetails = default(List<PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner>), PriceAndAvailabilityResponseInnerPricing pricing = default(PriceAndAvailabilityResponseInnerPricing), List<PriceAndAvailabilityResponseInnerDiscountsInner> discounts = default(List<PriceAndAvailabilityResponseInnerDiscountsInner>), bool bundlePartIndicator = default(bool), List<PriceAndAvailabilityResponseInnerServiceFeesInner> serviceFees = default(List<PriceAndAvailabilityResponseInnerServiceFeesInner>))
        {
            this.ProductStatusCode = productStatusCode;
            this.ProductStatusMessage = productStatusMessage;
            this.IngramPartNumber = ingramPartNumber;
            this.VendorPartNumber = vendorPartNumber;
            this.ExtendedVendorPartNumber = extendedVendorPartNumber;
            this.CustomerPartNumber = customerPartNumber;
            this.Upc = upc;
            this.PartNumberType = partNumberType;
            this.VendorNumber = vendorNumber;
            this.VendorName = vendorName;
            this.Description = description;
            this.ProductClass = productClass;
            this.Uom = uom;
            this.ProductStatus = productStatus;
            this.AcceptBackOrder = acceptBackOrder;
            this.ProductAuthorized = productAuthorized;
            this.ReturnableProduct = returnableProduct;
            this.EndUserInfoRequired = endUserInfoRequired;
            this.GovtSpecialPriceAvailable = govtSpecialPriceAvailable;
            this.GovtProgramType = govtProgramType;
            this.GovtEndUserType = govtEndUserType;
            this.Availability = availability;
            this.ReserveInventoryDetails = reserveInventoryDetails;
            this.Pricing = pricing;
            this.Discounts = discounts;
            this.BundlePartIndicator = bundlePartIndicator;
            this.ServiceFees = serviceFees;
        }

        /// <summary>
        /// Codes signifying whether the sku is active or not.
        /// </summary>
        /// <value>Codes signifying whether the sku is active or not.</value>
        [DataMember(Name = "productStatusCode", EmitDefaultValue = false)]
        public string ProductStatusCode { get; set; }

        /// <summary>
        /// Message returned saying whether sku is active.
        /// </summary>
        /// <value>Message returned saying whether sku is active.</value>
        [DataMember(Name = "productStatusMessage", EmitDefaultValue = false)]
        public string ProductStatusMessage { get; set; }

        /// <summary>
        /// Ingram Micro unique part number for the product.
        /// </summary>
        /// <value>Ingram Micro unique part number for the product.</value>
        [DataMember(Name = "ingramPartNumber", EmitDefaultValue = false)]
        public string IngramPartNumber { get; set; }

        /// <summary>
        /// Vendor’s part number for the product.
        /// </summary>
        /// <value>Vendor’s part number for the product.</value>
        [DataMember(Name = "vendorPartNumber", EmitDefaultValue = false)]
        public string VendorPartNumber { get; set; }

        /// <summary>
        /// Extended Vendor Part Number. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
        /// </summary>
        /// <value>Extended Vendor Part Number. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).</value>
        [DataMember(Name = "extendedVendorPartNumber", EmitDefaultValue = false)]
        public string ExtendedVendorPartNumber { get; set; }

        /// <summary>
        /// Reseller / end-user’s part number for the product.
        /// </summary>
        /// <value>Reseller / end-user’s part number for the product.</value>
        [DataMember(Name = "customerPartNumber", EmitDefaultValue = false)]
        public string CustomerPartNumber { get; set; }

        /// <summary>
        /// The UPC code for the product. Consists of 12 numeric digits that are uniquely assigned to each trade item.
        /// </summary>
        /// <value>The UPC code for the product. Consists of 12 numeric digits that are uniquely assigned to each trade item.</value>
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        public string Upc { get; set; }

        /// <summary>
        /// Number type of the part.
        /// </summary>
        /// <value>Number type of the part.</value>
        [DataMember(Name = "partNumberType", EmitDefaultValue = false)]
        public string PartNumberType { get; set; }

        /// <summary>
        /// Vendor number that identifies the product.
        /// </summary>
        /// <value>Vendor number that identifies the product.</value>
        [DataMember(Name = "vendorNumber", EmitDefaultValue = false)]
        public string VendorNumber { get; set; }

        /// <summary>
        /// Vendor name for the order.
        /// </summary>
        /// <value>Vendor name for the order.</value>
        [DataMember(Name = "vendorName", EmitDefaultValue = false)]
        public string VendorName { get; set; }

        /// <summary>
        /// The description given for the product.
        /// </summary>
        /// <value>The description given for the product.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether the product is directly shipped from the vendor’s warehouse or if the product ships from Ingram Micro’s warehouse. Class Codes are Ingram classifications on how skus are stocked A &#x3D; Product that is stocked usually in all IM warehouses and replenished on a regular basis. B &#x3D; Product that is stocked in limited IM warehouses and replenished on a regular basis C &#x3D; Product that is stocked in fewer IM warehouses and replenished on a regular basis. D &#x3D; Product that Ingram Micro has elected to discontinue. E &#x3D; Product that will be phased out later, according to the vendor. You may not want to replenish this product, but instead sell down what is in stock. F &#x3D; Product that we carry for a specific customer or supplier under a contractual agreement. N &#x3D; New Sku. Classification before first receipt O &#x3D; Discontinued product to be liquidated S&#x3D; Order for Specialized Demand (Order to backorder) X&#x3D; direct ship from Vendor V &#x3D; product that vendor has elected to discontinue.
        /// </summary>
        /// <value>Indicates whether the product is directly shipped from the vendor’s warehouse or if the product ships from Ingram Micro’s warehouse. Class Codes are Ingram classifications on how skus are stocked A &#x3D; Product that is stocked usually in all IM warehouses and replenished on a regular basis. B &#x3D; Product that is stocked in limited IM warehouses and replenished on a regular basis C &#x3D; Product that is stocked in fewer IM warehouses and replenished on a regular basis. D &#x3D; Product that Ingram Micro has elected to discontinue. E &#x3D; Product that will be phased out later, according to the vendor. You may not want to replenish this product, but instead sell down what is in stock. F &#x3D; Product that we carry for a specific customer or supplier under a contractual agreement. N &#x3D; New Sku. Classification before first receipt O &#x3D; Discontinued product to be liquidated S&#x3D; Order for Specialized Demand (Order to backorder) X&#x3D; direct ship from Vendor V &#x3D; product that vendor has elected to discontinue.</value>
        [DataMember(Name = "productClass", EmitDefaultValue = false)]
        public string ProductClass { get; set; }

        /// <summary>
        /// The description given for the product.
        /// </summary>
        /// <value>The description given for the product.</value>
        [DataMember(Name = "uom", EmitDefaultValue = false)]
        public string Uom { get; set; }

        /// <summary>
        /// Status that gives whether the product is Active.
        /// </summary>
        /// <value>Status that gives whether the product is Active.</value>
        [DataMember(Name = "productStatus", EmitDefaultValue = false)]
        public string ProductStatus { get; set; }

        /// <summary>
        /// Boolean that indicates if the product accepts backorder.
        /// </summary>
        /// <value>Boolean that indicates if the product accepts backorder.</value>
        [DataMember(Name = "acceptBackOrder", EmitDefaultValue = true)]
        public bool AcceptBackOrder { get; set; }

        /// <summary>
        /// Boolean that indicates whether a product is authorized.
        /// </summary>
        /// <value>Boolean that indicates whether a product is authorized.</value>
        [DataMember(Name = "productAuthorized", EmitDefaultValue = true)]
        public bool ProductAuthorized { get; set; }

        /// <summary>
        /// Boolean that indicates if the product can be returned.
        /// </summary>
        /// <value>Boolean that indicates if the product can be returned.</value>
        [DataMember(Name = "returnableProduct", EmitDefaultValue = true)]
        public bool ReturnableProduct { get; set; }

        /// <summary>
        /// Boolean that indicates  if end user information is required.
        /// </summary>
        /// <value>Boolean that indicates  if end user information is required.</value>
        [DataMember(Name = "endUserInfoRequired", EmitDefaultValue = true)]
        public bool EndUserInfoRequired { get; set; }

        /// <summary>
        /// Boolean that indicates if special pricing is available for the product.
        /// </summary>
        /// <value>Boolean that indicates if special pricing is available for the product.</value>
        [DataMember(Name = "govtSpecialPriceAvailable", EmitDefaultValue = true)]
        public bool GovtSpecialPriceAvailable { get; set; }

        /// <summary>
        /// Program type, “PA” for government orders, “ED” for education order.
        /// </summary>
        /// <value>Program type, “PA” for government orders, “ED” for education order.</value>
        [DataMember(Name = "govtProgramType", EmitDefaultValue = false)]
        public string GovtProgramType { get; set; }

        /// <summary>
        /// Type of end user of the program. F &#x3D; Federal, S &#x3D; State, E &#x3D; Local, K &#x3D; K-12 school, and H &#x3D; Higher Education.
        /// </summary>
        /// <value>Type of end user of the program. F &#x3D; Federal, S &#x3D; State, E &#x3D; Local, K &#x3D; K-12 school, and H &#x3D; Higher Education.</value>
        [DataMember(Name = "govtEndUserType", EmitDefaultValue = false)]
        public string GovtEndUserType { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name = "availability", EmitDefaultValue = false)]
        public PriceAndAvailabilityResponseInnerAvailability Availability { get; set; }

        /// <summary>
        /// Gets or Sets ReserveInventoryDetails
        /// </summary>
        [DataMember(Name = "reserveInventoryDetails", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerReserveInventoryDetailsInner> ReserveInventoryDetails { get; set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [DataMember(Name = "pricing", EmitDefaultValue = false)]
        public PriceAndAvailabilityResponseInnerPricing Pricing { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>
        [DataMember(Name = "discounts", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerDiscountsInner> Discounts { get; set; }

        /// <summary>
        /// True of false value to indicate whether it’s bundle part. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
        /// </summary>
        /// <value>True of false value to indicate whether it’s bundle part. *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).</value>
        [DataMember(Name = "bundlePartIndicator", EmitDefaultValue = true)]
        public bool BundlePartIndicator { get; set; }

        /// <summary>
        /// *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
        /// </summary>
        /// <value>*Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).</value>
        [DataMember(Name = "serviceFees", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerServiceFeesInner> ServiceFees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceAndAvailabilityResponseInner {\n");
            sb.Append("  ProductStatusCode: ").Append(ProductStatusCode).Append("\n");
            sb.Append("  ProductStatusMessage: ").Append(ProductStatusMessage).Append("\n");
            sb.Append("  IngramPartNumber: ").Append(IngramPartNumber).Append("\n");
            sb.Append("  VendorPartNumber: ").Append(VendorPartNumber).Append("\n");
            sb.Append("  ExtendedVendorPartNumber: ").Append(ExtendedVendorPartNumber).Append("\n");
            sb.Append("  CustomerPartNumber: ").Append(CustomerPartNumber).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  PartNumberType: ").Append(PartNumberType).Append("\n");
            sb.Append("  VendorNumber: ").Append(VendorNumber).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProductClass: ").Append(ProductClass).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  ProductStatus: ").Append(ProductStatus).Append("\n");
            sb.Append("  AcceptBackOrder: ").Append(AcceptBackOrder).Append("\n");
            sb.Append("  ProductAuthorized: ").Append(ProductAuthorized).Append("\n");
            sb.Append("  ReturnableProduct: ").Append(ReturnableProduct).Append("\n");
            sb.Append("  EndUserInfoRequired: ").Append(EndUserInfoRequired).Append("\n");
            sb.Append("  GovtSpecialPriceAvailable: ").Append(GovtSpecialPriceAvailable).Append("\n");
            sb.Append("  GovtProgramType: ").Append(GovtProgramType).Append("\n");
            sb.Append("  GovtEndUserType: ").Append(GovtEndUserType).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  ReserveInventoryDetails: ").Append(ReserveInventoryDetails).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  BundlePartIndicator: ").Append(BundlePartIndicator).Append("\n");
            sb.Append("  ServiceFees: ").Append(ServiceFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
