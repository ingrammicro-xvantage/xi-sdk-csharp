/*
 * XI Sdk Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner
    /// </summary>
    [DataContract(Name = "orderDetailResponse_serviceresponse_orderdetailresponse_lines_inner_shipmentdetails_inner")]
    public partial class OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner" /> class.
        /// </summary>
        /// <param name="quantity">quantity shipped.</param>
        /// <param name="shipmentdate">date of shipment.</param>
        /// <param name="shipfromwarehouseid">Warehouse product was shipped from.</param>
        /// <param name="warehousename">name of the warehouse.</param>
        /// <param name="invoicenumber">Invoice Number.</param>
        /// <param name="invoicedate">date on the invoice generated.</param>
        /// <param name="status">code for current Status of the order.</param>
        /// <param name="statusdescription">Description of status.</param>
        /// <param name="shippeddate">date of shipment.</param>
        /// <param name="holdreasoncodedescription">Description of the code if the order is on hold.</param>
        /// <param name="ponumber">Ingram PO Number to vendors for direct ship orders.</param>
        /// <param name="carriertype">Helps to determine shipment type. for e.g. LTL is used for heavy shipment. SML is used for light shipment.</param>
        /// <param name="carriercode">carriercode.</param>
        /// <param name="carriername">Name of the carrier. If carriername is LTL then the tracking info is in the \&quot;pronumber\&quot; data field.</param>
        /// <param name="pronumber">pronumber.</param>
        /// <param name="packagedetails">packagedetails.</param>
        public OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner(decimal quantity = default(decimal), string shipmentdate = default(string), string shipfromwarehouseid = default(string), string warehousename = default(string), string invoicenumber = default(string), string invoicedate = default(string), string status = default(string), string statusdescription = default(string), string shippeddate = default(string), string holdreasoncodedescription = default(string), string ponumber = default(string), string carriertype = default(string), string carriercode = default(string), string carriername = default(string), string pronumber = default(string), OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails packagedetails = default(OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails))
        {
            this.Quantity = quantity;
            this.Shipmentdate = shipmentdate;
            this.Shipfromwarehouseid = shipfromwarehouseid;
            this.Warehousename = warehousename;
            this.Invoicenumber = invoicenumber;
            this.Invoicedate = invoicedate;
            this.Status = status;
            this.Statusdescription = statusdescription;
            this.Shippeddate = shippeddate;
            this.Holdreasoncodedescription = holdreasoncodedescription;
            this.Ponumber = ponumber;
            this.Carriertype = carriertype;
            this.Carriercode = carriercode;
            this.Carriername = carriername;
            this.Pronumber = pronumber;
            this.Packagedetails = packagedetails;
        }

        /// <summary>
        /// quantity shipped
        /// </summary>
        /// <value>quantity shipped</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// date of shipment
        /// </summary>
        /// <value>date of shipment</value>
        [DataMember(Name = "shipmentdate", EmitDefaultValue = false)]
        public string Shipmentdate { get; set; }

        /// <summary>
        /// Warehouse product was shipped from
        /// </summary>
        /// <value>Warehouse product was shipped from</value>
        [DataMember(Name = "shipfromwarehouseid", EmitDefaultValue = false)]
        public string Shipfromwarehouseid { get; set; }

        /// <summary>
        /// name of the warehouse
        /// </summary>
        /// <value>name of the warehouse</value>
        [DataMember(Name = "warehousename", EmitDefaultValue = false)]
        public string Warehousename { get; set; }

        /// <summary>
        /// Invoice Number
        /// </summary>
        /// <value>Invoice Number</value>
        [DataMember(Name = "invoicenumber", EmitDefaultValue = false)]
        public string Invoicenumber { get; set; }

        /// <summary>
        /// date on the invoice generated
        /// </summary>
        /// <value>date on the invoice generated</value>
        [DataMember(Name = "invoicedate", EmitDefaultValue = false)]
        public string Invoicedate { get; set; }

        /// <summary>
        /// code for current Status of the order
        /// </summary>
        /// <value>code for current Status of the order</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Description of status
        /// </summary>
        /// <value>Description of status</value>
        [DataMember(Name = "statusdescription", EmitDefaultValue = false)]
        public string Statusdescription { get; set; }

        /// <summary>
        /// date of shipment
        /// </summary>
        /// <value>date of shipment</value>
        [DataMember(Name = "shippeddate", EmitDefaultValue = false)]
        public string Shippeddate { get; set; }

        /// <summary>
        /// Description of the code if the order is on hold
        /// </summary>
        /// <value>Description of the code if the order is on hold</value>
        [DataMember(Name = "holdreasoncodedescription", EmitDefaultValue = false)]
        public string Holdreasoncodedescription { get; set; }

        /// <summary>
        /// Ingram PO Number to vendors for direct ship orders
        /// </summary>
        /// <value>Ingram PO Number to vendors for direct ship orders</value>
        [DataMember(Name = "ponumber", EmitDefaultValue = false)]
        public string Ponumber { get; set; }

        /// <summary>
        /// Helps to determine shipment type. for e.g. LTL is used for heavy shipment. SML is used for light shipment
        /// </summary>
        /// <value>Helps to determine shipment type. for e.g. LTL is used for heavy shipment. SML is used for light shipment</value>
        [DataMember(Name = "carriertype", EmitDefaultValue = false)]
        public string Carriertype { get; set; }

        /// <summary>
        /// Gets or Sets Carriercode
        /// </summary>
        [DataMember(Name = "carriercode", EmitDefaultValue = false)]
        public string Carriercode { get; set; }

        /// <summary>
        /// Name of the carrier. If carriername is LTL then the tracking info is in the \&quot;pronumber\&quot; data field
        /// </summary>
        /// <value>Name of the carrier. If carriername is LTL then the tracking info is in the \&quot;pronumber\&quot; data field</value>
        [DataMember(Name = "carriername", EmitDefaultValue = false)]
        public string Carriername { get; set; }

        /// <summary>
        /// Gets or Sets Pronumber
        /// </summary>
        [DataMember(Name = "pronumber", EmitDefaultValue = false)]
        public string Pronumber { get; set; }

        /// <summary>
        /// Gets or Sets Packagedetails
        /// </summary>
        [DataMember(Name = "packagedetails", EmitDefaultValue = false)]
        public OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails Packagedetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Shipmentdate: ").Append(Shipmentdate).Append("\n");
            sb.Append("  Shipfromwarehouseid: ").Append(Shipfromwarehouseid).Append("\n");
            sb.Append("  Warehousename: ").Append(Warehousename).Append("\n");
            sb.Append("  Invoicenumber: ").Append(Invoicenumber).Append("\n");
            sb.Append("  Invoicedate: ").Append(Invoicedate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Statusdescription: ").Append(Statusdescription).Append("\n");
            sb.Append("  Shippeddate: ").Append(Shippeddate).Append("\n");
            sb.Append("  Holdreasoncodedescription: ").Append(Holdreasoncodedescription).Append("\n");
            sb.Append("  Ponumber: ").Append(Ponumber).Append("\n");
            sb.Append("  Carriertype: ").Append(Carriertype).Append("\n");
            sb.Append("  Carriercode: ").Append(Carriercode).Append("\n");
            sb.Append("  Carriername: ").Append(Carriername).Append("\n");
            sb.Append("  Pronumber: ").Append(Pronumber).Append("\n");
            sb.Append("  Packagedetails: ").Append(Packagedetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
