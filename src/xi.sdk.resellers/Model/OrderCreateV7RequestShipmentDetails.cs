/*
 * XI Sdk Resellers
 *
 * For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// Shipping details for the order provided by the customer.
    /// </summary>
    [DataContract(Name = "order_create_v7_request_shipmentDetails")]
    public partial class OrderCreateV7RequestShipmentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateV7RequestShipmentDetails" /> class.
        /// </summary>
        /// <param name="carrierCode">The code for the shipping carrier for the line item..</param>
        /// <param name="requestedDeliveryDate">The reseller-requested delivery date in UTC format. Delivery date is not guaranteed. Must be a future date..</param>
        /// <param name="shipComplete">Specifies whether the shipment will be shipped only when all products are fulfilled. The value of this field along with acceptBackOrder field decides the value of backorderflag. If this field is set, acceptBackOrder field is ignored. Possible values for this field are true, C, P, E.With value as true or C, backorderflag will be set as C.With value as P, or E, backorderflag will be set as P or E respectively.C &#x3D; Ship complete at distribution level.P &#x3D; ship complete at line level.E &#x3D; ship complete across all distributions..</param>
        /// <param name="shippingInstructions">Any special shipping instructions for the order..</param>
        /// <param name="freightAccountNumber">The reseller &#39;s shipping account number with carrier. Used to bill the shipping carrier directly from the reseller&#39;s account with the carrier..</param>
        /// <param name="signatureRequired">Specifies whether a signature is required for delivery. Default is False..</param>
        public OrderCreateV7RequestShipmentDetails(string carrierCode = default(string), string requestedDeliveryDate = default(string), string shipComplete = default(string), string shippingInstructions = default(string), string freightAccountNumber = default(string), bool? signatureRequired = default(bool?))
        {
            this.CarrierCode = carrierCode;
            this.RequestedDeliveryDate = requestedDeliveryDate;
            this.ShipComplete = shipComplete;
            this.ShippingInstructions = shippingInstructions;
            this.FreightAccountNumber = freightAccountNumber;
            this.SignatureRequired = signatureRequired;
        }

        /// <summary>
        /// The code for the shipping carrier for the line item.
        /// </summary>
        /// <value>The code for the shipping carrier for the line item.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = true)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The reseller-requested delivery date in UTC format. Delivery date is not guaranteed. Must be a future date.
        /// </summary>
        /// <value>The reseller-requested delivery date in UTC format. Delivery date is not guaranteed. Must be a future date.</value>
        [DataMember(Name = "requestedDeliveryDate", EmitDefaultValue = true)]
        public string RequestedDeliveryDate { get; set; }

        /// <summary>
        /// Specifies whether the shipment will be shipped only when all products are fulfilled. The value of this field along with acceptBackOrder field decides the value of backorderflag. If this field is set, acceptBackOrder field is ignored. Possible values for this field are true, C, P, E.With value as true or C, backorderflag will be set as C.With value as P, or E, backorderflag will be set as P or E respectively.C &#x3D; Ship complete at distribution level.P &#x3D; ship complete at line level.E &#x3D; ship complete across all distributions.
        /// </summary>
        /// <value>Specifies whether the shipment will be shipped only when all products are fulfilled. The value of this field along with acceptBackOrder field decides the value of backorderflag. If this field is set, acceptBackOrder field is ignored. Possible values for this field are true, C, P, E.With value as true or C, backorderflag will be set as C.With value as P, or E, backorderflag will be set as P or E respectively.C &#x3D; Ship complete at distribution level.P &#x3D; ship complete at line level.E &#x3D; ship complete across all distributions.</value>
        [DataMember(Name = "shipComplete", EmitDefaultValue = true)]
        public string ShipComplete { get; set; }

        /// <summary>
        /// Any special shipping instructions for the order.
        /// </summary>
        /// <value>Any special shipping instructions for the order.</value>
        [DataMember(Name = "shippingInstructions", EmitDefaultValue = true)]
        public string ShippingInstructions { get; set; }

        /// <summary>
        /// The reseller &#39;s shipping account number with carrier. Used to bill the shipping carrier directly from the reseller&#39;s account with the carrier.
        /// </summary>
        /// <value>The reseller &#39;s shipping account number with carrier. Used to bill the shipping carrier directly from the reseller&#39;s account with the carrier.</value>
        [DataMember(Name = "freightAccountNumber", EmitDefaultValue = true)]
        public string FreightAccountNumber { get; set; }

        /// <summary>
        /// Specifies whether a signature is required for delivery. Default is False.
        /// </summary>
        /// <value>Specifies whether a signature is required for delivery. Default is False.</value>
        [DataMember(Name = "signatureRequired", EmitDefaultValue = true)]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateV7RequestShipmentDetails {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  RequestedDeliveryDate: ").Append(RequestedDeliveryDate).Append("\n");
            sb.Append("  ShipComplete: ").Append(ShipComplete).Append("\n");
            sb.Append("  ShippingInstructions: ").Append(ShippingInstructions).Append("\n");
            sb.Append("  FreightAccountNumber: ").Append(FreightAccountNumber).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CarrierCode (string) maxLength
            if (this.CarrierCode != null && this.CarrierCode.Length > 10)
            {
                yield return new ValidationResult("Invalid value for CarrierCode, length must be less than 10.", new [] { "CarrierCode" });
            }

            // RequestedDeliveryDate (string) maxLength
            if (this.RequestedDeliveryDate != null && this.RequestedDeliveryDate.Length > 8)
            {
                yield return new ValidationResult("Invalid value for RequestedDeliveryDate, length must be less than 8.", new [] { "RequestedDeliveryDate" });
            }

            // ShipComplete (string) maxLength
            if (this.ShipComplete != null && this.ShipComplete.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ShipComplete, length must be less than 1.", new [] { "ShipComplete" });
            }

            // ShippingInstructions (string) maxLength
            if (this.ShippingInstructions != null && this.ShippingInstructions.Length > 132)
            {
                yield return new ValidationResult("Invalid value for ShippingInstructions, length must be less than 132.", new [] { "ShippingInstructions" });
            }

            yield break;
        }
    }

}
