/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of APIs and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// InvoiceDetailsv61ResponseSummaryMiscChargesInner
    /// </summary>
    [DataContract(Name = "InvoiceDetailsv6_1Response_summary_miscCharges_inner")]
    public partial class InvoiceDetailsv61ResponseSummaryMiscChargesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsv61ResponseSummaryMiscChargesInner" /> class.
        /// </summary>
        /// <param name="chargeDescription">Description of the charge..</param>
        /// <param name="miscChargeLineCount">The number of lines for which miscellaneous charges are applicable..</param>
        /// <param name="miscChargeLineTotal">Miscellaneous charge amount..</param>
        /// <param name="chargeLineReference">Reference of the chargeLine..</param>
        /// <param name="isNonMisc">Is charge non miscellaneous..</param>
        public InvoiceDetailsv61ResponseSummaryMiscChargesInner(string chargeDescription = default(string), int miscChargeLineCount = default(int), double miscChargeLineTotal = default(double), string chargeLineReference = default(string), string isNonMisc = default(string))
        {
            this.ChargeDescription = chargeDescription;
            this.MiscChargeLineCount = miscChargeLineCount;
            this.MiscChargeLineTotal = miscChargeLineTotal;
            this.ChargeLineReference = chargeLineReference;
            this.IsNonMisc = isNonMisc;
        }

        /// <summary>
        /// Description of the charge.
        /// </summary>
        /// <value>Description of the charge.</value>
        [DataMember(Name = "chargeDescription", EmitDefaultValue = false)]
        public string ChargeDescription { get; set; }

        /// <summary>
        /// The number of lines for which miscellaneous charges are applicable.
        /// </summary>
        /// <value>The number of lines for which miscellaneous charges are applicable.</value>
        [DataMember(Name = "miscChargeLineCount", EmitDefaultValue = false)]
        public int MiscChargeLineCount { get; set; }

        /// <summary>
        /// Miscellaneous charge amount.
        /// </summary>
        /// <value>Miscellaneous charge amount.</value>
        [DataMember(Name = "miscChargeLineTotal", EmitDefaultValue = false)]
        public double MiscChargeLineTotal { get; set; }

        /// <summary>
        /// Reference of the chargeLine.
        /// </summary>
        /// <value>Reference of the chargeLine.</value>
        [DataMember(Name = "chargeLineReference", EmitDefaultValue = false)]
        public string ChargeLineReference { get; set; }

        /// <summary>
        /// Is charge non miscellaneous.
        /// </summary>
        /// <value>Is charge non miscellaneous.</value>
        [DataMember(Name = "isNonMisc", EmitDefaultValue = false)]
        public string IsNonMisc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsv61ResponseSummaryMiscChargesInner {\n");
            sb.Append("  ChargeDescription: ").Append(ChargeDescription).Append("\n");
            sb.Append("  MiscChargeLineCount: ").Append(MiscChargeLineCount).Append("\n");
            sb.Append("  MiscChargeLineTotal: ").Append(MiscChargeLineTotal).Append("\n");
            sb.Append("  ChargeLineReference: ").Append(ChargeLineReference).Append("\n");
            sb.Append("  IsNonMisc: ").Append(IsNonMisc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
