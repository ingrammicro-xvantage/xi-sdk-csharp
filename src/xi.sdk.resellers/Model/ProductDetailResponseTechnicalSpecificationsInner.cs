/*
 * XI Sdk Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// ProductDetailResponseTechnicalSpecificationsInner
    /// </summary>
    [DataContract(Name = "ProductDetailResponse_technicalSpecifications_inner")]
    public partial class ProductDetailResponseTechnicalSpecificationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDetailResponseTechnicalSpecificationsInner" /> class.
        /// </summary>
        /// <param name="headerName">Example : &#39;Basic&#39;.</param>
        /// <param name="attributeName">Example : &#39;Product Type&#39;.</param>
        /// <param name="attributeDisplay">Example : &#39;Basic|Product Type|LCD Monitor&#39;.</param>
        /// <param name="attributeValue">Example : &#39;LCD Monitor&#39;.</param>
        public ProductDetailResponseTechnicalSpecificationsInner(string headerName = default(string), string attributeName = default(string), string attributeDisplay = default(string), string attributeValue = default(string))
        {
            this.HeaderName = headerName;
            this.AttributeName = attributeName;
            this.AttributeDisplay = attributeDisplay;
            this.AttributeValue = attributeValue;
        }

        /// <summary>
        /// Example : &#39;Basic&#39;
        /// </summary>
        /// <value>Example : &#39;Basic&#39;</value>
        [DataMember(Name = "headerName", EmitDefaultValue = false)]
        public string HeaderName { get; set; }

        /// <summary>
        /// Example : &#39;Product Type&#39;
        /// </summary>
        /// <value>Example : &#39;Product Type&#39;</value>
        [DataMember(Name = "attributeName", EmitDefaultValue = false)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Example : &#39;Basic|Product Type|LCD Monitor&#39;
        /// </summary>
        /// <value>Example : &#39;Basic|Product Type|LCD Monitor&#39;</value>
        [DataMember(Name = "attributeDisplay", EmitDefaultValue = false)]
        public string AttributeDisplay { get; set; }

        /// <summary>
        /// Example : &#39;LCD Monitor&#39;
        /// </summary>
        /// <value>Example : &#39;LCD Monitor&#39;</value>
        [DataMember(Name = "attributeValue", EmitDefaultValue = false)]
        public string AttributeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductDetailResponseTechnicalSpecificationsInner {\n");
            sb.Append("  HeaderName: ").Append(HeaderName).Append("\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeDisplay: ").Append(AttributeDisplay).Append("\n");
            sb.Append("  AttributeValue: ").Append(AttributeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
