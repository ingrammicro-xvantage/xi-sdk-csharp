/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// ProductDetailResponseSubscriptionDetailsInner
    /// </summary>
    [DataContract(Name = "ProductDetailResponse_subscriptionDetails_inner")]
    public partial class ProductDetailResponseSubscriptionDetailsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDetailResponseSubscriptionDetailsInner" /> class.
        /// </summary>
        /// <param name="planId">ID of the subscription plan..</param>
        /// <param name="planName">Name of the subscription plan..</param>
        /// <param name="planDescription">Description of the subscription plan..</param>
        /// <param name="groups">Details of the groups subscription product part of..</param>
        /// <param name="subscriptionPeriod">Details of the subscription period..</param>
        /// <param name="billingPeriod">billingPeriod.</param>
        /// <param name="options">Details of the resources available..</param>
        /// <param name="links">links.</param>
        /// <param name="nextPage">link/URL for accessing next page..</param>
        /// <param name="previousPage">link/URL for accessing previous page..</param>
        public ProductDetailResponseSubscriptionDetailsInner(string planId = default(string), string planName = default(string), string planDescription = default(string), List<ProductDetailResponseSubscriptionDetailsInnerGroupsInner> groups = default(List<ProductDetailResponseSubscriptionDetailsInnerGroupsInner>), List<ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner> subscriptionPeriod = default(List<ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner>), ProductDetailResponseSubscriptionDetailsInnerBillingPeriod billingPeriod = default(ProductDetailResponseSubscriptionDetailsInnerBillingPeriod), List<ProductDetailResponseSubscriptionDetailsInnerOptionsInner> options = default(List<ProductDetailResponseSubscriptionDetailsInnerOptionsInner>), List<ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner> links = default(List<ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner>), string nextPage = default(string), string previousPage = default(string))
        {
            this.PlanId = planId;
            this.PlanName = planName;
            this.PlanDescription = planDescription;
            this.Groups = groups;
            this.SubscriptionPeriod = subscriptionPeriod;
            this.BillingPeriod = billingPeriod;
            this.Options = options;
            this.Links = links;
            this.NextPage = nextPage;
            this.PreviousPage = previousPage;
        }

        /// <summary>
        /// ID of the subscription plan.
        /// </summary>
        /// <value>ID of the subscription plan.</value>
        [DataMember(Name = "planId", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// Name of the subscription plan.
        /// </summary>
        /// <value>Name of the subscription plan.</value>
        [DataMember(Name = "planName", EmitDefaultValue = false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Description of the subscription plan.
        /// </summary>
        /// <value>Description of the subscription plan.</value>
        [DataMember(Name = "planDescription", EmitDefaultValue = false)]
        public string PlanDescription { get; set; }

        /// <summary>
        /// Details of the groups subscription product part of.
        /// </summary>
        /// <value>Details of the groups subscription product part of.</value>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<ProductDetailResponseSubscriptionDetailsInnerGroupsInner> Groups { get; set; }

        /// <summary>
        /// Details of the subscription period.
        /// </summary>
        /// <value>Details of the subscription period.</value>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public List<ProductDetailResponseSubscriptionDetailsInnerSubscriptionPeriodInner> SubscriptionPeriod { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name = "billingPeriod", EmitDefaultValue = false)]
        public ProductDetailResponseSubscriptionDetailsInnerBillingPeriod BillingPeriod { get; set; }

        /// <summary>
        /// Details of the resources available.
        /// </summary>
        /// <value>Details of the resources available.</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<ProductDetailResponseSubscriptionDetailsInnerOptionsInner> Options { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<ProductSearchResponseSubscriptionCatalogInnerPlansInnerLinksInner> Links { get; set; }

        /// <summary>
        /// link/URL for accessing next page.
        /// </summary>
        /// <value>link/URL for accessing next page.</value>
        [DataMember(Name = "nextPage", EmitDefaultValue = false)]
        public string NextPage { get; set; }

        /// <summary>
        /// link/URL for accessing previous page.
        /// </summary>
        /// <value>link/URL for accessing previous page.</value>
        [DataMember(Name = "previousPage", EmitDefaultValue = false)]
        public string PreviousPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductDetailResponseSubscriptionDetailsInner {\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanDescription: ").Append(PlanDescription).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PreviousPage: ").Append(PreviousPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
