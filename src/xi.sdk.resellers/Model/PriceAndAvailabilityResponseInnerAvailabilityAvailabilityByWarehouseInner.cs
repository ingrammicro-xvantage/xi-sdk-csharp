/*
 * XI Sdk Resellers
 *
 * For Ingram Micro Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInner
    /// </summary>
    [DataContract(Name = "PriceAndAvailabilityResponse_inner_availability_availabilityByWarehouse_inner")]
    public partial class PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInner" /> class.
        /// </summary>
        /// <param name="location">Indicates where (location) the product is available..</param>
        /// <param name="warehouseId">Indicates where (Ingram Warehouse Id) the product is available..</param>
        /// <param name="quantityAvailable">The quantity of the product available in a given warehouse..</param>
        /// <param name="quantityBackordered">The quantity of a product backordered in a given warehouse..</param>
        /// <param name="quantityBackorderedEta">The estimated time of arrival of a product that has been backordered in a given warehouse..</param>
        /// <param name="quantityOnOrder">The quantity of the product on order..</param>
        /// <param name="backOrderInfo">*Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara)..</param>
        public PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInner(string location = default(string), string warehouseId = default(string), int quantityAvailable = default(int), int quantityBackordered = default(int), string quantityBackorderedEta = default(string), int quantityOnOrder = default(int), List<PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInnerBackOrderInfoInner> backOrderInfo = default(List<PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInnerBackOrderInfoInner>))
        {
            this.Location = location;
            this.WarehouseId = warehouseId;
            this.QuantityAvailable = quantityAvailable;
            this.QuantityBackordered = quantityBackordered;
            this.QuantityBackorderedEta = quantityBackorderedEta;
            this.QuantityOnOrder = quantityOnOrder;
            this.BackOrderInfo = backOrderInfo;
        }

        /// <summary>
        /// Indicates where (location) the product is available.
        /// </summary>
        /// <value>Indicates where (location) the product is available.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Indicates where (Ingram Warehouse Id) the product is available.
        /// </summary>
        /// <value>Indicates where (Ingram Warehouse Id) the product is available.</value>
        [DataMember(Name = "warehouseId", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// The quantity of the product available in a given warehouse.
        /// </summary>
        /// <value>The quantity of the product available in a given warehouse.</value>
        [DataMember(Name = "quantityAvailable", EmitDefaultValue = false)]
        public int QuantityAvailable { get; set; }

        /// <summary>
        /// The quantity of a product backordered in a given warehouse.
        /// </summary>
        /// <value>The quantity of a product backordered in a given warehouse.</value>
        [DataMember(Name = "quantityBackordered", EmitDefaultValue = false)]
        public int QuantityBackordered { get; set; }

        /// <summary>
        /// The estimated time of arrival of a product that has been backordered in a given warehouse.
        /// </summary>
        /// <value>The estimated time of arrival of a product that has been backordered in a given warehouse.</value>
        [DataMember(Name = "quantityBackorderedEta", EmitDefaultValue = false)]
        public string QuantityBackorderedEta { get; set; }

        /// <summary>
        /// The quantity of the product on order.
        /// </summary>
        /// <value>The quantity of the product on order.</value>
        [DataMember(Name = "quantityOnOrder", EmitDefaultValue = false)]
        public int QuantityOnOrder { get; set; }

        /// <summary>
        /// *Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).
        /// </summary>
        /// <value>*Currently, this feature is not available in these countries (Mexico, Turkey, New Zealand, Colombia, Chile, Brazil, Peru, Western Sahara).</value>
        [DataMember(Name = "backOrderInfo", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInnerBackOrderInfoInner> BackOrderInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceAndAvailabilityResponseInnerAvailabilityAvailabilityByWarehouseInner {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  QuantityBackordered: ").Append(QuantityBackordered).Append("\n");
            sb.Append("  QuantityBackorderedEta: ").Append(QuantityBackorderedEta).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  BackOrderInfo: ").Append(BackOrderInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
