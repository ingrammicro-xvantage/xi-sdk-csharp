/*
 * XI SDK Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// Indicators of the Product
    /// </summary>
    [DataContract(Name = "ProductDetailResponse_indicators")]
    public partial class ProductDetailResponseIndicators : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDetailResponseIndicators" /> class.
        /// </summary>
        /// <param name="hasWarranty">Boolean that indicates whether product has a warranty..</param>
        /// <param name="isNewProduct">Boolean that indicates whether it’s a new product. .</param>
        /// <param name="hasReturnLimits">Boolean that indicates whether there is any limit to return the product..</param>
        /// <param name="isBackOrderAllowed">Boolean that indicates whether back order is allowed for the product..</param>
        /// <param name="isShippedFromPartner">Boolean that indicates whether product is shipped from the partner..</param>
        /// <param name="isReplacementProduct">Boolean that indicates whether product is a replacement product..</param>
        /// <param name="isDirectship">Boolean that indicates whether it’s a direct ship product..</param>
        /// <param name="isDownloadable">Boolean that indicates whether product is downloadable..</param>
        /// <param name="isDigitalType">Boolean that indicates whether it’s a digital product. .</param>
        /// <param name="skuType">skutype.</param>
        /// <param name="hasStdSpecialPrice">Boolean that indicates whether product has any standard special price..</param>
        /// <param name="hasAcopSpecialPrice">Boolean that indicates whether product has any ACOP special price..</param>
        /// <param name="hasAcopQuantityBreak">Boolean that indicates whether product has any ACOP quantity break..</param>
        /// <param name="hasStdWebDiscount">Boolean that indicates whether product has any standard web discount..</param>
        /// <param name="hasSpecialBid">Boolean that indicates whether product has any special bid..</param>
        /// <param name="isExportableToCountry">Boolean that indicates whether product is exportable..</param>
        /// <param name="isDiscontinuedProduct">Boolean that indicates whether it’s a discontinued product..</param>
        /// <param name="isRefurbishedProduct">Boolean that indicates whether product is refurbished..</param>
        /// <param name="isReturnableProduct">Boolean that indicates if the product can be returned..</param>
        /// <param name="isIngramShip">Boolean that indicates whether it’s a Ingram shipped product..</param>
        /// <param name="isEnduserRequired">Do vendor requires Enduser name required to create an order..</param>
        /// <param name="isHeavyWeight">Boolean that indicates whether it’s  heavy weight product..</param>
        /// <param name="hasLtl">Boolean that indicates whether it hasLtl or not..</param>
        /// <param name="isClearanceProduct">Boolean that indicates whether it’s clearnce product..</param>
        /// <param name="hasBundle">Boolean that indicates whether it’s a bundled product..</param>
        /// <param name="isOversizeProduct">Boolean that indicates whether it’s oversized product..</param>
        /// <param name="isPreorderProduct">Boolean that indicates whether it’s a preorder product..</param>
        /// <param name="isLicenseProduct">Boolean that indicates whether it’s a licened product..</param>
        /// <param name="isDirectshipOrderable">Boolean that indicates whether product is directship orderable..</param>
        /// <param name="isServiceSku">Boolean that indicates whether product is service SKU..</param>
        /// <param name="isConfigurable">Boolean that indicates whether product is configurable..</param>
        public ProductDetailResponseIndicators(bool hasWarranty = default(bool), bool isNewProduct = default(bool), bool hasReturnLimits = default(bool), bool isBackOrderAllowed = default(bool), bool isShippedFromPartner = default(bool), bool isReplacementProduct = default(bool), bool isDirectship = default(bool), bool isDownloadable = default(bool), bool isDigitalType = default(bool), string skuType = default(string), bool hasStdSpecialPrice = default(bool), bool hasAcopSpecialPrice = default(bool), bool hasAcopQuantityBreak = default(bool), bool hasStdWebDiscount = default(bool), bool hasSpecialBid = default(bool), bool isExportableToCountry = default(bool), bool isDiscontinuedProduct = default(bool), bool isRefurbishedProduct = default(bool), bool isReturnableProduct = default(bool), bool isIngramShip = default(bool), bool isEnduserRequired = default(bool), bool isHeavyWeight = default(bool), bool hasLtl = default(bool), bool isClearanceProduct = default(bool), bool hasBundle = default(bool), bool isOversizeProduct = default(bool), bool isPreorderProduct = default(bool), bool isLicenseProduct = default(bool), bool isDirectshipOrderable = default(bool), bool isServiceSku = default(bool), bool isConfigurable = default(bool))
        {
            this.HasWarranty = hasWarranty;
            this.IsNewProduct = isNewProduct;
            this.HasReturnLimits = hasReturnLimits;
            this.IsBackOrderAllowed = isBackOrderAllowed;
            this.IsShippedFromPartner = isShippedFromPartner;
            this.IsReplacementProduct = isReplacementProduct;
            this.IsDirectship = isDirectship;
            this.IsDownloadable = isDownloadable;
            this.IsDigitalType = isDigitalType;
            this.SkuType = skuType;
            this.HasStdSpecialPrice = hasStdSpecialPrice;
            this.HasAcopSpecialPrice = hasAcopSpecialPrice;
            this.HasAcopQuantityBreak = hasAcopQuantityBreak;
            this.HasStdWebDiscount = hasStdWebDiscount;
            this.HasSpecialBid = hasSpecialBid;
            this.IsExportableToCountry = isExportableToCountry;
            this.IsDiscontinuedProduct = isDiscontinuedProduct;
            this.IsRefurbishedProduct = isRefurbishedProduct;
            this.IsReturnableProduct = isReturnableProduct;
            this.IsIngramShip = isIngramShip;
            this.IsEnduserRequired = isEnduserRequired;
            this.IsHeavyWeight = isHeavyWeight;
            this.HasLtl = hasLtl;
            this.IsClearanceProduct = isClearanceProduct;
            this.HasBundle = hasBundle;
            this.IsOversizeProduct = isOversizeProduct;
            this.IsPreorderProduct = isPreorderProduct;
            this.IsLicenseProduct = isLicenseProduct;
            this.IsDirectshipOrderable = isDirectshipOrderable;
            this.IsServiceSku = isServiceSku;
            this.IsConfigurable = isConfigurable;
        }

        /// <summary>
        /// Boolean that indicates whether product has a warranty.
        /// </summary>
        /// <value>Boolean that indicates whether product has a warranty.</value>
        [DataMember(Name = "hasWarranty", EmitDefaultValue = true)]
        public bool HasWarranty { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a new product. 
        /// </summary>
        /// <value>Boolean that indicates whether it’s a new product. </value>
        [DataMember(Name = "isNewProduct", EmitDefaultValue = true)]
        public bool IsNewProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether there is any limit to return the product.
        /// </summary>
        /// <value>Boolean that indicates whether there is any limit to return the product.</value>
        [DataMember(Name = "HasReturnLimits", EmitDefaultValue = true)]
        public bool HasReturnLimits { get; set; }

        /// <summary>
        /// Boolean that indicates whether back order is allowed for the product.
        /// </summary>
        /// <value>Boolean that indicates whether back order is allowed for the product.</value>
        [DataMember(Name = "IsBackOrderAllowed", EmitDefaultValue = true)]
        public bool IsBackOrderAllowed { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is shipped from the partner.
        /// </summary>
        /// <value>Boolean that indicates whether product is shipped from the partner.</value>
        [DataMember(Name = "isShippedFromPartner", EmitDefaultValue = true)]
        public bool IsShippedFromPartner { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is a replacement product.
        /// </summary>
        /// <value>Boolean that indicates whether product is a replacement product.</value>
        [DataMember(Name = "isReplacementProduct", EmitDefaultValue = true)]
        public bool IsReplacementProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a direct ship product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a direct ship product.</value>
        [DataMember(Name = "isDirectship", EmitDefaultValue = true)]
        public bool IsDirectship { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is downloadable.
        /// </summary>
        /// <value>Boolean that indicates whether product is downloadable.</value>
        [DataMember(Name = "isDownloadable", EmitDefaultValue = true)]
        public bool IsDownloadable { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a digital product. 
        /// </summary>
        /// <value>Boolean that indicates whether it’s a digital product. </value>
        [DataMember(Name = "isDigitalType", EmitDefaultValue = true)]
        public bool IsDigitalType { get; set; }

        /// <summary>
        /// skutype
        /// </summary>
        /// <value>skutype</value>
        [DataMember(Name = "skuType", EmitDefaultValue = false)]
        public string SkuType { get; set; }

        /// <summary>
        /// Boolean that indicates whether product has any standard special price.
        /// </summary>
        /// <value>Boolean that indicates whether product has any standard special price.</value>
        [DataMember(Name = "hasStdSpecialPrice", EmitDefaultValue = true)]
        public bool HasStdSpecialPrice { get; set; }

        /// <summary>
        /// Boolean that indicates whether product has any ACOP special price.
        /// </summary>
        /// <value>Boolean that indicates whether product has any ACOP special price.</value>
        [DataMember(Name = "hasAcopSpecialPrice", EmitDefaultValue = true)]
        public bool HasAcopSpecialPrice { get; set; }

        /// <summary>
        /// Boolean that indicates whether product has any ACOP quantity break.
        /// </summary>
        /// <value>Boolean that indicates whether product has any ACOP quantity break.</value>
        [DataMember(Name = "hasAcopQuantityBreak", EmitDefaultValue = true)]
        public bool HasAcopQuantityBreak { get; set; }

        /// <summary>
        /// Boolean that indicates whether product has any standard web discount.
        /// </summary>
        /// <value>Boolean that indicates whether product has any standard web discount.</value>
        [DataMember(Name = "hasStdWebDiscount", EmitDefaultValue = true)]
        public bool HasStdWebDiscount { get; set; }

        /// <summary>
        /// Boolean that indicates whether product has any special bid.
        /// </summary>
        /// <value>Boolean that indicates whether product has any special bid.</value>
        [DataMember(Name = "hasSpecialBid", EmitDefaultValue = true)]
        public bool HasSpecialBid { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is exportable.
        /// </summary>
        /// <value>Boolean that indicates whether product is exportable.</value>
        [DataMember(Name = "isExportableToCountry", EmitDefaultValue = true)]
        public bool IsExportableToCountry { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a discontinued product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a discontinued product.</value>
        [DataMember(Name = "isDiscontinuedProduct", EmitDefaultValue = true)]
        public bool IsDiscontinuedProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is refurbished.
        /// </summary>
        /// <value>Boolean that indicates whether product is refurbished.</value>
        [DataMember(Name = "isRefurbishedProduct", EmitDefaultValue = true)]
        public bool IsRefurbishedProduct { get; set; }

        /// <summary>
        /// Boolean that indicates if the product can be returned.
        /// </summary>
        /// <value>Boolean that indicates if the product can be returned.</value>
        [DataMember(Name = "isReturnableProduct", EmitDefaultValue = true)]
        public bool IsReturnableProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a Ingram shipped product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a Ingram shipped product.</value>
        [DataMember(Name = "isIngramShip", EmitDefaultValue = true)]
        public bool IsIngramShip { get; set; }

        /// <summary>
        /// Do vendor requires Enduser name required to create an order.
        /// </summary>
        /// <value>Do vendor requires Enduser name required to create an order.</value>
        [DataMember(Name = "isEnduserRequired", EmitDefaultValue = true)]
        public bool IsEnduserRequired { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s  heavy weight product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s  heavy weight product.</value>
        [DataMember(Name = "isHeavyWeight", EmitDefaultValue = true)]
        public bool IsHeavyWeight { get; set; }

        /// <summary>
        /// Boolean that indicates whether it hasLtl or not.
        /// </summary>
        /// <value>Boolean that indicates whether it hasLtl or not.</value>
        [DataMember(Name = "hasLtl", EmitDefaultValue = true)]
        public bool HasLtl { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s clearnce product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s clearnce product.</value>
        [DataMember(Name = "isClearanceProduct", EmitDefaultValue = true)]
        public bool IsClearanceProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a bundled product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a bundled product.</value>
        [DataMember(Name = "hasBundle", EmitDefaultValue = true)]
        public bool HasBundle { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s oversized product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s oversized product.</value>
        [DataMember(Name = "isOversizeProduct", EmitDefaultValue = true)]
        public bool IsOversizeProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a preorder product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a preorder product.</value>
        [DataMember(Name = "isPreorderProduct", EmitDefaultValue = true)]
        public bool IsPreorderProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether it’s a licened product.
        /// </summary>
        /// <value>Boolean that indicates whether it’s a licened product.</value>
        [DataMember(Name = "isLicenseProduct", EmitDefaultValue = true)]
        public bool IsLicenseProduct { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is directship orderable.
        /// </summary>
        /// <value>Boolean that indicates whether product is directship orderable.</value>
        [DataMember(Name = "isDirectshipOrderable", EmitDefaultValue = true)]
        public bool IsDirectshipOrderable { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is service SKU.
        /// </summary>
        /// <value>Boolean that indicates whether product is service SKU.</value>
        [DataMember(Name = "isServiceSku", EmitDefaultValue = true)]
        public bool IsServiceSku { get; set; }

        /// <summary>
        /// Boolean that indicates whether product is configurable.
        /// </summary>
        /// <value>Boolean that indicates whether product is configurable.</value>
        [DataMember(Name = "isConfigurable", EmitDefaultValue = true)]
        public bool IsConfigurable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductDetailResponseIndicators {\n");
            sb.Append("  HasWarranty: ").Append(HasWarranty).Append("\n");
            sb.Append("  IsNewProduct: ").Append(IsNewProduct).Append("\n");
            sb.Append("  HasReturnLimits: ").Append(HasReturnLimits).Append("\n");
            sb.Append("  IsBackOrderAllowed: ").Append(IsBackOrderAllowed).Append("\n");
            sb.Append("  IsShippedFromPartner: ").Append(IsShippedFromPartner).Append("\n");
            sb.Append("  IsReplacementProduct: ").Append(IsReplacementProduct).Append("\n");
            sb.Append("  IsDirectship: ").Append(IsDirectship).Append("\n");
            sb.Append("  IsDownloadable: ").Append(IsDownloadable).Append("\n");
            sb.Append("  IsDigitalType: ").Append(IsDigitalType).Append("\n");
            sb.Append("  SkuType: ").Append(SkuType).Append("\n");
            sb.Append("  HasStdSpecialPrice: ").Append(HasStdSpecialPrice).Append("\n");
            sb.Append("  HasAcopSpecialPrice: ").Append(HasAcopSpecialPrice).Append("\n");
            sb.Append("  HasAcopQuantityBreak: ").Append(HasAcopQuantityBreak).Append("\n");
            sb.Append("  HasStdWebDiscount: ").Append(HasStdWebDiscount).Append("\n");
            sb.Append("  HasSpecialBid: ").Append(HasSpecialBid).Append("\n");
            sb.Append("  IsExportableToCountry: ").Append(IsExportableToCountry).Append("\n");
            sb.Append("  IsDiscontinuedProduct: ").Append(IsDiscontinuedProduct).Append("\n");
            sb.Append("  IsRefurbishedProduct: ").Append(IsRefurbishedProduct).Append("\n");
            sb.Append("  IsReturnableProduct: ").Append(IsReturnableProduct).Append("\n");
            sb.Append("  IsIngramShip: ").Append(IsIngramShip).Append("\n");
            sb.Append("  IsEnduserRequired: ").Append(IsEnduserRequired).Append("\n");
            sb.Append("  IsHeavyWeight: ").Append(IsHeavyWeight).Append("\n");
            sb.Append("  HasLtl: ").Append(HasLtl).Append("\n");
            sb.Append("  IsClearanceProduct: ").Append(IsClearanceProduct).Append("\n");
            sb.Append("  HasBundle: ").Append(HasBundle).Append("\n");
            sb.Append("  IsOversizeProduct: ").Append(IsOversizeProduct).Append("\n");
            sb.Append("  IsPreorderProduct: ").Append(IsPreorderProduct).Append("\n");
            sb.Append("  IsLicenseProduct: ").Append(IsLicenseProduct).Append("\n");
            sb.Append("  IsDirectshipOrderable: ").Append(IsDirectshipOrderable).Append("\n");
            sb.Append("  IsServiceSku: ").Append(IsServiceSku).Append("\n");
            sb.Append("  IsConfigurable: ").Append(IsConfigurable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
