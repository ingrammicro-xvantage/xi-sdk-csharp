/*
 * Reseller API
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner
    /// </summary>
    [DataContract(Name = "orderSearchResponse_serviceResponse_ordersearchresponse_orders_inner_suborders_inner")]
    public partial class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner" /> class.
        /// </summary>
        /// <param name="subordernumber">A sub order number.</param>
        /// <param name="statuscode">Order status code.</param>
        /// <param name="status">Details of the order statuscode - i.e. statuscode &#x3D; 4 then status &#x3D; SHIPPED.</param>
        /// <param name="holdreasoncode">Will be returned in case of order on hold.</param>
        /// <param name="holdreason">Reason for order hold - will be returned if the order is on hold.</param>
        /// <param name="links">HATEOAS links for the details and invoices of the sub-orders if available.</param>
        public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner(string subordernumber = default(string), string statuscode = default(string), string status = default(string), string holdreasoncode = default(string), string holdreason = default(string), List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> links = default(List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner>))
        {
            this.Subordernumber = subordernumber;
            this.Statuscode = statuscode;
            this.Status = status;
            this.Holdreasoncode = holdreasoncode;
            this.Holdreason = holdreason;
            this.Links = links;
        }

        /// <summary>
        /// A sub order number
        /// </summary>
        /// <value>A sub order number</value>
        [DataMember(Name = "subordernumber", EmitDefaultValue = false)]
        public string Subordernumber { get; set; }

        /// <summary>
        /// Order status code
        /// </summary>
        /// <value>Order status code</value>
        [DataMember(Name = "statuscode", EmitDefaultValue = false)]
        public string Statuscode { get; set; }

        /// <summary>
        /// Details of the order statuscode - i.e. statuscode &#x3D; 4 then status &#x3D; SHIPPED
        /// </summary>
        /// <value>Details of the order statuscode - i.e. statuscode &#x3D; 4 then status &#x3D; SHIPPED</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Will be returned in case of order on hold
        /// </summary>
        /// <value>Will be returned in case of order on hold</value>
        [DataMember(Name = "holdreasoncode", EmitDefaultValue = false)]
        public string Holdreasoncode { get; set; }

        /// <summary>
        /// Reason for order hold - will be returned if the order is on hold
        /// </summary>
        /// <value>Reason for order hold - will be returned if the order is on hold</value>
        [DataMember(Name = "holdreason", EmitDefaultValue = false)]
        public string Holdreason { get; set; }

        /// <summary>
        /// HATEOAS links for the details and invoices of the sub-orders if available
        /// </summary>
        /// <value>HATEOAS links for the details and invoices of the sub-orders if available</value>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner {\n");
            sb.Append("  Subordernumber: ").Append(Subordernumber).Append("\n");
            sb.Append("  Statuscode: ").Append(Statuscode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Holdreasoncode: ").Append(Holdreasoncode).Append("\n");
            sb.Append("  Holdreason: ").Append(Holdreason).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
