/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of APIs and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// AsyncOrderCreateDTO
    /// </summary>
    [DataContract(Name = "AsyncOrderCreateDTO")]
    public partial class AsyncOrderCreateDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsyncOrderCreateDTO" /> class.
        /// </summary>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote..</param>
        /// <param name="customerOrderNumber">The reseller&#39;s order number for reference in their system..</param>
        /// <param name="endcustomerOrderNumber">The end customer&#39;s order number for reference in their system..</param>
        /// <param name="notes">Order header level notes..</param>
        /// <param name="billToAddressId">Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit..</param>
        /// <param name="specialBidNumber">The bid number is provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers..</param>
        /// <param name="internalComments">need to replace with actual description.</param>
        /// <param name="acceptBackOrder">ENUM [\&quot;true\&quot;,\&quot;false\&quot;] - accept order if this item is backordered. This field along with shipComplete field decides the value of backorderflag. The value of this field is ignored when shipComplete field is present..</param>
        /// <param name="vendAuthNumber">Authorization number provided by vendor to Ingram&#39;s reseller. Orders will be placed on hold without this value, vendor specific mandatory field - please reach out Ingram Sales team for list of vendor for whom this is mandatory..</param>
        /// <param name="resellerInfo">resellerInfo.</param>
        /// <param name="endUserInfo">endUserInfo.</param>
        /// <param name="shipToInfo">shipToInfo.</param>
        /// <param name="shipmentDetails">shipmentDetails.</param>
        /// <param name="additionalAttributes">Additional order create attributes..</param>
        /// <param name="vmfadditionalAttributes">The object containing the list of fields required at a header level by the vendor..</param>
        /// <param name="lines">The object containing the lines that require vendor mandatory fields..</param>
        /// <param name="warrantyInfo">Warranty Information.</param>
        public AsyncOrderCreateDTO(string quoteNumber = default(string), string customerOrderNumber = default(string), string endcustomerOrderNumber = default(string), string notes = default(string), string billToAddressId = default(string), string specialBidNumber = default(string), string internalComments = default(string), bool acceptBackOrder = default(bool), string vendAuthNumber = default(string), AsyncOrderCreateDTOResellerInfo resellerInfo = default(AsyncOrderCreateDTOResellerInfo), AsyncOrderCreateDTOEndUserInfo endUserInfo = default(AsyncOrderCreateDTOEndUserInfo), AsyncOrderCreateDTOShipToInfo shipToInfo = default(AsyncOrderCreateDTOShipToInfo), AsyncOrderCreateDTOShipmentDetails shipmentDetails = default(AsyncOrderCreateDTOShipmentDetails), List<AsyncOrderCreateDTOAdditionalAttributesInner> additionalAttributes = default(List<AsyncOrderCreateDTOAdditionalAttributesInner>), List<AsyncOrderCreateDTOVmfadditionalAttributesInner> vmfadditionalAttributes = default(List<AsyncOrderCreateDTOVmfadditionalAttributesInner>), List<AsyncOrderCreateDTOLinesInner> lines = default(List<AsyncOrderCreateDTOLinesInner>), List<AsyncOrderCreateDTOWarrantyInfoInner> warrantyInfo = default(List<AsyncOrderCreateDTOWarrantyInfoInner>))
        {
            this.QuoteNumber = quoteNumber;
            this.CustomerOrderNumber = customerOrderNumber;
            this.EndcustomerOrderNumber = endcustomerOrderNumber;
            this.Notes = notes;
            this.BillToAddressId = billToAddressId;
            this.SpecialBidNumber = specialBidNumber;
            this.InternalComments = internalComments;
            this.AcceptBackOrder = acceptBackOrder;
            this.VendAuthNumber = vendAuthNumber;
            this.ResellerInfo = resellerInfo;
            this.EndUserInfo = endUserInfo;
            this.ShipToInfo = shipToInfo;
            this.ShipmentDetails = shipmentDetails;
            this.AdditionalAttributes = additionalAttributes;
            this.VmfadditionalAttributes = vmfadditionalAttributes;
            this.Lines = lines;
            this.WarrantyInfo = warrantyInfo;
        }

        /// <summary>
        /// A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.
        /// </summary>
        /// <value>A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</value>
        [DataMember(Name = "quoteNumber", EmitDefaultValue = true)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// The reseller&#39;s order number for reference in their system.
        /// </summary>
        /// <value>The reseller&#39;s order number for reference in their system.</value>
        [DataMember(Name = "customerOrderNumber", EmitDefaultValue = true)]
        public string CustomerOrderNumber { get; set; }

        /// <summary>
        /// The end customer&#39;s order number for reference in their system.
        /// </summary>
        /// <value>The end customer&#39;s order number for reference in their system.</value>
        [DataMember(Name = "endcustomerOrderNumber", EmitDefaultValue = true)]
        public string EndcustomerOrderNumber { get; set; }

        /// <summary>
        /// Order header level notes.
        /// </summary>
        /// <value>Order header level notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.
        /// </summary>
        /// <value>Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.</value>
        [DataMember(Name = "billToAddressId", EmitDefaultValue = true)]
        public string BillToAddressId { get; set; }

        /// <summary>
        /// The bid number is provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.
        /// </summary>
        /// <value>The bid number is provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.</value>
        [DataMember(Name = "specialBidNumber", EmitDefaultValue = false)]
        public string SpecialBidNumber { get; set; }

        /// <summary>
        /// need to replace with actual description
        /// </summary>
        /// <value>need to replace with actual description</value>
        [DataMember(Name = "internalComments", EmitDefaultValue = false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// ENUM [\&quot;true\&quot;,\&quot;false\&quot;] - accept order if this item is backordered. This field along with shipComplete field decides the value of backorderflag. The value of this field is ignored when shipComplete field is present.
        /// </summary>
        /// <value>ENUM [\&quot;true\&quot;,\&quot;false\&quot;] - accept order if this item is backordered. This field along with shipComplete field decides the value of backorderflag. The value of this field is ignored when shipComplete field is present.</value>
        [DataMember(Name = "acceptBackOrder", EmitDefaultValue = true)]
        public bool AcceptBackOrder { get; set; }

        /// <summary>
        /// Authorization number provided by vendor to Ingram&#39;s reseller. Orders will be placed on hold without this value, vendor specific mandatory field - please reach out Ingram Sales team for list of vendor for whom this is mandatory.
        /// </summary>
        /// <value>Authorization number provided by vendor to Ingram&#39;s reseller. Orders will be placed on hold without this value, vendor specific mandatory field - please reach out Ingram Sales team for list of vendor for whom this is mandatory.</value>
        [DataMember(Name = "vendAuthNumber", EmitDefaultValue = false)]
        public string VendAuthNumber { get; set; }

        /// <summary>
        /// Gets or Sets ResellerInfo
        /// </summary>
        [DataMember(Name = "resellerInfo", EmitDefaultValue = false)]
        public AsyncOrderCreateDTOResellerInfo ResellerInfo { get; set; }

        /// <summary>
        /// Gets or Sets EndUserInfo
        /// </summary>
        [DataMember(Name = "endUserInfo", EmitDefaultValue = false)]
        public AsyncOrderCreateDTOEndUserInfo EndUserInfo { get; set; }

        /// <summary>
        /// Gets or Sets ShipToInfo
        /// </summary>
        [DataMember(Name = "shipToInfo", EmitDefaultValue = false)]
        public AsyncOrderCreateDTOShipToInfo ShipToInfo { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDetails
        /// </summary>
        [DataMember(Name = "shipmentDetails", EmitDefaultValue = false)]
        public AsyncOrderCreateDTOShipmentDetails ShipmentDetails { get; set; }

        /// <summary>
        /// Additional order create attributes.
        /// </summary>
        /// <value>Additional order create attributes.</value>
        [DataMember(Name = "additionalAttributes", EmitDefaultValue = false)]
        public List<AsyncOrderCreateDTOAdditionalAttributesInner> AdditionalAttributes { get; set; }

        /// <summary>
        /// The object containing the list of fields required at a header level by the vendor.
        /// </summary>
        /// <value>The object containing the list of fields required at a header level by the vendor.</value>
        [DataMember(Name = "vmfadditionalAttributes", EmitDefaultValue = false)]
        public List<AsyncOrderCreateDTOVmfadditionalAttributesInner> VmfadditionalAttributes { get; set; }

        /// <summary>
        /// The object containing the lines that require vendor mandatory fields.
        /// </summary>
        /// <value>The object containing the lines that require vendor mandatory fields.</value>
        [DataMember(Name = "lines", EmitDefaultValue = false)]
        public List<AsyncOrderCreateDTOLinesInner> Lines { get; set; }

        /// <summary>
        /// Warranty Information
        /// </summary>
        /// <value>Warranty Information</value>
        [DataMember(Name = "warrantyInfo", EmitDefaultValue = false)]
        public List<AsyncOrderCreateDTOWarrantyInfoInner> WarrantyInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AsyncOrderCreateDTO {\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  CustomerOrderNumber: ").Append(CustomerOrderNumber).Append("\n");
            sb.Append("  EndcustomerOrderNumber: ").Append(EndcustomerOrderNumber).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  BillToAddressId: ").Append(BillToAddressId).Append("\n");
            sb.Append("  SpecialBidNumber: ").Append(SpecialBidNumber).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  AcceptBackOrder: ").Append(AcceptBackOrder).Append("\n");
            sb.Append("  VendAuthNumber: ").Append(VendAuthNumber).Append("\n");
            sb.Append("  ResellerInfo: ").Append(ResellerInfo).Append("\n");
            sb.Append("  EndUserInfo: ").Append(EndUserInfo).Append("\n");
            sb.Append("  ShipToInfo: ").Append(ShipToInfo).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("  AdditionalAttributes: ").Append(AdditionalAttributes).Append("\n");
            sb.Append("  VmfadditionalAttributes: ").Append(VmfadditionalAttributes).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  WarrantyInfo: ").Append(WarrantyInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuoteNumber (string) maxLength
            if (this.QuoteNumber != null && this.QuoteNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteNumber, length must be less than 35.", new [] { "QuoteNumber" });
            }

            // CustomerOrderNumber (string) maxLength
            if (this.CustomerOrderNumber != null && this.CustomerOrderNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerOrderNumber, length must be less than 35.", new [] { "CustomerOrderNumber" });
            }

            // EndcustomerOrderNumber (string) maxLength
            if (this.EndcustomerOrderNumber != null && this.EndcustomerOrderNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndcustomerOrderNumber, length must be less than 35.", new [] { "EndcustomerOrderNumber" });
            }

            yield break;
        }
    }

}
