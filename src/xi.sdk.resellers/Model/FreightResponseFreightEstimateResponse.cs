/*
 * XI SDK Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// FreightResponseFreightEstimateResponse
    /// </summary>
    [DataContract(Name = "freightResponse_freightEstimateResponse")]
    public partial class FreightResponseFreightEstimateResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreightResponseFreightEstimateResponse" /> class.
        /// </summary>
        /// <param name="currencyCode">The country-specific three-character ISO 4217 currency code used for the order..</param>
        /// <param name="totalFreightAmount">Total freight amount..</param>
        /// <param name="totalTaxAmount">Total tax amount..</param>
        /// <param name="totalFees">Total fees..</param>
        /// <param name="totalNetAmount">Total net amount..</param>
        /// <param name="grossAmount">Gross amount..</param>
        /// <param name="distribution">distribution.</param>
        /// <param name="lines">lines.</param>
        public FreightResponseFreightEstimateResponse(string currencyCode = default(string), decimal totalFreightAmount = default(decimal), decimal totalTaxAmount = default(decimal), decimal totalFees = default(decimal), decimal totalNetAmount = default(decimal), decimal grossAmount = default(decimal), List<FreightResponseFreightEstimateResponseDistributionInner> distribution = default(List<FreightResponseFreightEstimateResponseDistributionInner>), List<FreightResponseFreightEstimateResponseLinesInner> lines = default(List<FreightResponseFreightEstimateResponseLinesInner>))
        {
            this.CurrencyCode = currencyCode;
            this.TotalFreightAmount = totalFreightAmount;
            this.TotalTaxAmount = totalTaxAmount;
            this.TotalFees = totalFees;
            this.TotalNetAmount = totalNetAmount;
            this.GrossAmount = grossAmount;
            this.Distribution = distribution;
            this.Lines = lines;
        }

        /// <summary>
        /// The country-specific three-character ISO 4217 currency code used for the order.
        /// </summary>
        /// <value>The country-specific three-character ISO 4217 currency code used for the order.</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Total freight amount.
        /// </summary>
        /// <value>Total freight amount.</value>
        [DataMember(Name = "totalFreightAmount", EmitDefaultValue = false)]
        public decimal TotalFreightAmount { get; set; }

        /// <summary>
        /// Total tax amount.
        /// </summary>
        /// <value>Total tax amount.</value>
        [DataMember(Name = "totalTaxAmount", EmitDefaultValue = false)]
        public decimal TotalTaxAmount { get; set; }

        /// <summary>
        /// Total fees.
        /// </summary>
        /// <value>Total fees.</value>
        [DataMember(Name = "totalFees", EmitDefaultValue = false)]
        public decimal TotalFees { get; set; }

        /// <summary>
        /// Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "totalNetAmount", EmitDefaultValue = false)]
        public decimal TotalNetAmount { get; set; }

        /// <summary>
        /// Gross amount.
        /// </summary>
        /// <value>Gross amount.</value>
        [DataMember(Name = "grossAmount", EmitDefaultValue = false)]
        public decimal GrossAmount { get; set; }

        /// <summary>
        /// Gets or Sets Distribution
        /// </summary>
        [DataMember(Name = "distribution", EmitDefaultValue = false)]
        public List<FreightResponseFreightEstimateResponseDistributionInner> Distribution { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name = "lines", EmitDefaultValue = false)]
        public List<FreightResponseFreightEstimateResponseLinesInner> Lines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FreightResponseFreightEstimateResponse {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TotalFreightAmount: ").Append(TotalFreightAmount).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  TotalNetAmount: ").Append(TotalNetAmount).Append("\n");
            sb.Append("  GrossAmount: ").Append(GrossAmount).Append("\n");
            sb.Append("  Distribution: ").Append(Distribution).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
