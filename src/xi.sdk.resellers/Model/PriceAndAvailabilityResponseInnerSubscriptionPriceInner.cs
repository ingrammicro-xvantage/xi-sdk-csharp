/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// PriceAndAvailabilityResponseInnerSubscriptionPriceInner
    /// </summary>
    [DataContract(Name = "PriceAndAvailabilityResponse_inner_subscriptionPrice_inner")]
    public partial class PriceAndAvailabilityResponseInnerSubscriptionPriceInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceAndAvailabilityResponseInnerSubscriptionPriceInner" /> class.
        /// </summary>
        /// <param name="index">index.</param>
        /// <param name="planId">Id of the plan..</param>
        /// <param name="planUId">planUId.</param>
        /// <param name="planName">Name of the plan..</param>
        /// <param name="planDescription">The description of the plan..</param>
        /// <param name="groups">groups.</param>
        /// <param name="billingPeriod">billingPeriod.</param>
        /// <param name="subscriptionPeriod">subscriptionPeriod.</param>
        /// <param name="options">options.</param>
        public PriceAndAvailabilityResponseInnerSubscriptionPriceInner(decimal index = default(decimal), string planId = default(string), string planUId = default(string), string planName = default(string), string planDescription = default(string), List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerGroupsInner> groups = default(List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerGroupsInner>), PriceAndAvailabilityResponseInnerSubscriptionPriceInnerBillingPeriod billingPeriod = default(PriceAndAvailabilityResponseInnerSubscriptionPriceInnerBillingPeriod), List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerSubscriptionPeriodInner> subscriptionPeriod = default(List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerSubscriptionPeriodInner>), List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner> options = default(List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner>))
        {
            this.Index = index;
            this.PlanId = planId;
            this.PlanUId = planUId;
            this.PlanName = planName;
            this.PlanDescription = planDescription;
            this.Groups = groups;
            this.BillingPeriod = billingPeriod;
            this.SubscriptionPeriod = subscriptionPeriod;
            this.Options = options;
        }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public decimal Index { get; set; }

        /// <summary>
        /// Id of the plan.
        /// </summary>
        /// <value>Id of the plan.</value>
        [DataMember(Name = "planId", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// Gets or Sets PlanUId
        /// </summary>
        [DataMember(Name = "planUId", EmitDefaultValue = false)]
        public string PlanUId { get; set; }

        /// <summary>
        /// Name of the plan.
        /// </summary>
        /// <value>Name of the plan.</value>
        [DataMember(Name = "planName", EmitDefaultValue = false)]
        public string PlanName { get; set; }

        /// <summary>
        /// The description of the plan.
        /// </summary>
        /// <value>The description of the plan.</value>
        [DataMember(Name = "planDescription", EmitDefaultValue = false)]
        public string PlanDescription { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerGroupsInner> Groups { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name = "billingPeriod", EmitDefaultValue = false)]
        public PriceAndAvailabilityResponseInnerSubscriptionPriceInnerBillingPeriod BillingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionPeriod
        /// </summary>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerSubscriptionPeriodInner> SubscriptionPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityResponseInnerSubscriptionPriceInnerOptionsInner> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceAndAvailabilityResponseInnerSubscriptionPriceInner {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanUId: ").Append(PlanUId).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanDescription: ").Append(PlanDescription).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
