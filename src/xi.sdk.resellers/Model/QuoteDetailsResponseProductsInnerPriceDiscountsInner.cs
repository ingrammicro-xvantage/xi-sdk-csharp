/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// QuoteDetailsResponseProductsInnerPriceDiscountsInner
    /// </summary>
    [DataContract(Name = "QuoteDetailsResponse_products_inner_price_discounts_inner")]
    public partial class QuoteDetailsResponseProductsInnerPriceDiscountsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteDetailsResponseProductsInnerPriceDiscountsInner" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="amount">amount.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="description">description.</param>
        /// <param name="avaliableQunatity">avaliableQunatity.</param>
        /// <param name="minimumQuantity">minimumQuantity.</param>
        /// <param name="bidNumber">bidNumber.</param>
        /// <param name="bidVersion">bidVersion.</param>
        /// <param name="validFrom">validFrom.</param>
        /// <param name="validTo">validTo.</param>
        /// <param name="discountOffList">discountOffList.</param>
        public QuoteDetailsResponseProductsInnerPriceDiscountsInner(string type = default(string), decimal amount = default(decimal), string expirationDate = default(string), string description = default(string), int avaliableQunatity = default(int), int minimumQuantity = default(int), string bidNumber = default(string), string bidVersion = default(string), string validFrom = default(string), string validTo = default(string), decimal discountOffList = default(decimal))
        {
            this.Type = type;
            this.Amount = amount;
            this.ExpirationDate = expirationDate;
            this.Description = description;
            this.AvaliableQunatity = avaliableQunatity;
            this.MinimumQuantity = minimumQuantity;
            this.BidNumber = bidNumber;
            this.BidVersion = bidVersion;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            this.DiscountOffList = discountOffList;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AvaliableQunatity
        /// </summary>
        [DataMember(Name = "avaliableQunatity", EmitDefaultValue = false)]
        public int AvaliableQunatity { get; set; }

        /// <summary>
        /// Gets or Sets MinimumQuantity
        /// </summary>
        [DataMember(Name = "minimumQuantity", EmitDefaultValue = false)]
        public int MinimumQuantity { get; set; }

        /// <summary>
        /// Gets or Sets BidNumber
        /// </summary>
        [DataMember(Name = "bidNumber", EmitDefaultValue = false)]
        public string BidNumber { get; set; }

        /// <summary>
        /// Gets or Sets BidVersion
        /// </summary>
        [DataMember(Name = "bidVersion", EmitDefaultValue = false)]
        public string BidVersion { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name = "validFrom", EmitDefaultValue = false)]
        public string ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [DataMember(Name = "validTo", EmitDefaultValue = false)]
        public string ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets DiscountOffList
        /// </summary>
        [DataMember(Name = "discountOffList", EmitDefaultValue = false)]
        public decimal DiscountOffList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteDetailsResponseProductsInnerPriceDiscountsInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AvaliableQunatity: ").Append(AvaliableQunatity).Append("\n");
            sb.Append("  MinimumQuantity: ").Append(MinimumQuantity).Append("\n");
            sb.Append("  BidNumber: ").Append(BidNumber).Append("\n");
            sb.Append("  BidVersion: ").Append(BidVersion).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  DiscountOffList: ").Append(DiscountOffList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
