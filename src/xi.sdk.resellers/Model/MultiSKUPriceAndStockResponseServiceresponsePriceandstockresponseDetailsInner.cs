/*
 * XI SDK Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner
    /// </summary>
    [DataContract(Name = "multiSKUPriceAndStockResponse_serviceresponse_priceandstockresponse_details_inner")]
    public partial class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner : IValidatableObject
    {
        /// <summary>
        /// Ingram Micro assigned product classification.
        /// </summary>
        /// <value>Ingram Micro assigned product classification.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassEnum
        {
            /// <summary>
            /// Enum AStockedProductInAllIMWarehouses for value: A-Stocked product in all IM warehouses
            /// </summary>
            [EnumMember(Value = "A-Stocked product in all IM warehouses")]
            AStockedProductInAllIMWarehouses = 1,

            /// <summary>
            /// Enum BLimitedStockInIMWarehouses for value: B-Limited stock in IM warehouses
            /// </summary>
            [EnumMember(Value = "B-Limited stock in IM warehouses")]
            BLimitedStockInIMWarehouses = 2,

            /// <summary>
            /// Enum CStockedInFewerWareshouses for value: C-Stocked in fewer wareshouses
            /// </summary>
            [EnumMember(Value = "C-Stocked in fewer wareshouses")]
            CStockedInFewerWareshouses = 3,

            /// <summary>
            /// Enum DIngramDiscontinued for value: D-Ingram discontinued
            /// </summary>
            [EnumMember(Value = "D-Ingram discontinued")]
            DIngramDiscontinued = 4,

            /// <summary>
            /// Enum EPlannedToBePhasedOutAsPerTheVendor for value: E-Planned to be phased out as per the vendor
            /// </summary>
            [EnumMember(Value = "E-Planned to be phased out as per the vendor")]
            EPlannedToBePhasedOutAsPerTheVendor = 5,

            /// <summary>
            /// Enum FCarriedForSpecificCustomerAsPerTheContract for value: F-Carried for specific customer as per the contract
            /// </summary>
            [EnumMember(Value = "F-Carried for specific customer as per the contract")]
            FCarriedForSpecificCustomerAsPerTheContract = 6,

            /// <summary>
            /// Enum NNewSKU for value: N-New SKU
            /// </summary>
            [EnumMember(Value = "N-New SKU")]
            NNewSKU = 7,

            /// <summary>
            /// Enum ODiscontinuedToBeLiquidated for value: O-Discontinued to be liquidated
            /// </summary>
            [EnumMember(Value = "O-Discontinued to be liquidated")]
            ODiscontinuedToBeLiquidated = 8,

            /// <summary>
            /// Enum SOrderForSpecializedDemand for value: S-Order for specialized demand
            /// </summary>
            [EnumMember(Value = "S-Order for specialized demand")]
            SOrderForSpecializedDemand = 9,

            /// <summary>
            /// Enum VDiscontinuedByVendor for value: V-Discontinued by vendor
            /// </summary>
            [EnumMember(Value = "V-Discontinued by vendor")]
            VDiscontinuedByVendor = 10,

            /// <summary>
            /// Enum XDirectShipProductsFromVendor for value: X-Direct Ship products from vendor
            /// </summary>
            [EnumMember(Value = "X-Direct Ship products from vendor")]
            XDirectShipProductsFromVendor = 11
        }


        /// <summary>
        /// Ingram Micro assigned product classification.
        /// </summary>
        /// <value>Ingram Micro assigned product classification.</value>
        [DataMember(Name = "class", EmitDefaultValue = false)]
        public ClassEnum? VarClass { get; set; }
        /// <summary>
        /// Y - End user required N - Not required End user
        /// </summary>
        /// <value>Y - End user required N - Not required End user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnduserrequiredEnum
        {
            /// <summary>
            /// Enum YEndUserDataRequired for value: Y-End user data required
            /// </summary>
            [EnumMember(Value = "Y-End user data required")]
            YEndUserDataRequired = 1,

            /// <summary>
            /// Enum NEndUserDataNotRequired for value: N-End user data not required
            /// </summary>
            [EnumMember(Value = "N-End user data not required")]
            NEndUserDataNotRequired = 2
        }


        /// <summary>
        /// Y - End user required N - Not required End user
        /// </summary>
        /// <value>Y - End user required N - Not required End user</value>
        [DataMember(Name = "enduserrequired", EmitDefaultValue = false)]
        public EnduserrequiredEnum? Enduserrequired { get; set; }
        /// <summary>
        /// Y- Allow Backorder Flag N- Not allowed
        /// </summary>
        /// <value>Y- Allow Backorder Flag N- Not allowed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BackorderflagEnum
        {
            /// <summary>
            /// Enum YCanBeBackordered for value: Y- Can be backordered
            /// </summary>
            [EnumMember(Value = "Y- Can be backordered")]
            YCanBeBackordered = 1,

            /// <summary>
            /// Enum NCannotBeBackordered for value: N-Cannot be backordered
            /// </summary>
            [EnumMember(Value = "N-Cannot be backordered")]
            NCannotBeBackordered = 2
        }


        /// <summary>
        /// Y- Allow Backorder Flag N- Not allowed
        /// </summary>
        /// <value>Y- Allow Backorder Flag N- Not allowed</value>
        [DataMember(Name = "backorderflag", EmitDefaultValue = false)]
        public BackorderflagEnum? Backorderflag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner" /> class.
        /// </summary>
        /// <param name="itemstatus">itemstatus.</param>
        /// <param name="statusmessage">statusmessage.</param>
        /// <param name="ingrampartnumber">SKU number for the product for which order needs to be created with Ingram Micro.</param>
        /// <param name="vendorpartnumber">Vendor Part number for the product.</param>
        /// <param name="globalskuid">globalskuid.</param>
        /// <param name="customerprice">Customer specific price for the product, excluding taxes.</param>
        /// <param name="partdescription1">Description on the part number that is being requested.</param>
        /// <param name="partdescription2">Contuiation of description on the part number that is being requested.</param>
        /// <param name="vendornumber">Internal four digit code assigned by Ingram.</param>
        /// <param name="vendorname">Name of the vendor.</param>
        /// <param name="cpucode">Ingram internal code for a product.</param>
        /// <param name="varClass">Ingram Micro assigned product classification..</param>
        /// <param name="skustatus">Identifies if the SKU has been discontinued. Rules must be defined on the values to be sent out to partner..</param>
        /// <param name="mediacpu">mediacpu.</param>
        /// <param name="categorysubcategory">Ingram&#39;s internal categorization of the product.</param>
        /// <param name="retailprice">MSRP Price 0.00 (required).</param>
        /// <param name="newmedia">Internal four-digit code assigned by Ingram to represent the item group.</param>
        /// <param name="enduserrequired">Y - End user required N - Not required End user.</param>
        /// <param name="backorderflag">Y- Allow Backorder Flag N- Not allowed.</param>
        /// <param name="skuauthorized">skuauthorized.</param>
        /// <param name="extendedvendorpartnumber">extendedvendorpartnumber.</param>
        /// <param name="warehousedetails">warehousedetails.</param>
        public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner(string itemstatus = default(string), string statusmessage = default(string), string ingrampartnumber = default(string), string vendorpartnumber = default(string), string globalskuid = default(string), string customerprice = default(string), string partdescription1 = default(string), string partdescription2 = default(string), string vendornumber = default(string), string vendorname = default(string), string cpucode = default(string), ClassEnum? varClass = default(ClassEnum?), string skustatus = default(string), string mediacpu = default(string), string categorysubcategory = default(string), decimal retailprice = default(decimal), string newmedia = default(string), EnduserrequiredEnum? enduserrequired = default(EnduserrequiredEnum?), BackorderflagEnum? backorderflag = default(BackorderflagEnum?), string skuauthorized = default(string), string extendedvendorpartnumber = default(string), List<MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner> warehousedetails = default(List<MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner>))
        {
            this.Retailprice = retailprice;
            this.Itemstatus = itemstatus;
            this.Statusmessage = statusmessage;
            this.Ingrampartnumber = ingrampartnumber;
            this.Vendorpartnumber = vendorpartnumber;
            this.Globalskuid = globalskuid;
            this.Customerprice = customerprice;
            this.Partdescription1 = partdescription1;
            this.Partdescription2 = partdescription2;
            this.Vendornumber = vendornumber;
            this.Vendorname = vendorname;
            this.Cpucode = cpucode;
            this.VarClass = varClass;
            this.Skustatus = skustatus;
            this.Mediacpu = mediacpu;
            this.Categorysubcategory = categorysubcategory;
            this.Newmedia = newmedia;
            this.Enduserrequired = enduserrequired;
            this.Backorderflag = backorderflag;
            this.Skuauthorized = skuauthorized;
            this.Extendedvendorpartnumber = extendedvendorpartnumber;
            this.Warehousedetails = warehousedetails;
        }

        /// <summary>
        /// Gets or Sets Itemstatus
        /// </summary>
        [DataMember(Name = "itemstatus", EmitDefaultValue = false)]
        public string Itemstatus { get; set; }

        /// <summary>
        /// Gets or Sets Statusmessage
        /// </summary>
        [DataMember(Name = "statusmessage", EmitDefaultValue = false)]
        public string Statusmessage { get; set; }

        /// <summary>
        /// SKU number for the product for which order needs to be created with Ingram Micro
        /// </summary>
        /// <value>SKU number for the product for which order needs to be created with Ingram Micro</value>
        [DataMember(Name = "ingrampartnumber", EmitDefaultValue = false)]
        public string Ingrampartnumber { get; set; }

        /// <summary>
        /// Vendor Part number for the product
        /// </summary>
        /// <value>Vendor Part number for the product</value>
        [DataMember(Name = "vendorpartnumber", EmitDefaultValue = false)]
        public string Vendorpartnumber { get; set; }

        /// <summary>
        /// Gets or Sets Globalskuid
        /// </summary>
        [DataMember(Name = "globalskuid", EmitDefaultValue = false)]
        public string Globalskuid { get; set; }

        /// <summary>
        /// Customer specific price for the product, excluding taxes
        /// </summary>
        /// <value>Customer specific price for the product, excluding taxes</value>
        [DataMember(Name = "customerprice", EmitDefaultValue = false)]
        public string Customerprice { get; set; }

        /// <summary>
        /// Description on the part number that is being requested
        /// </summary>
        /// <value>Description on the part number that is being requested</value>
        [DataMember(Name = "partdescription1", EmitDefaultValue = false)]
        public string Partdescription1 { get; set; }

        /// <summary>
        /// Contuiation of description on the part number that is being requested
        /// </summary>
        /// <value>Contuiation of description on the part number that is being requested</value>
        [DataMember(Name = "partdescription2", EmitDefaultValue = false)]
        public string Partdescription2 { get; set; }

        /// <summary>
        /// Internal four digit code assigned by Ingram
        /// </summary>
        /// <value>Internal four digit code assigned by Ingram</value>
        [DataMember(Name = "vendornumber", EmitDefaultValue = false)]
        public string Vendornumber { get; set; }

        /// <summary>
        /// Name of the vendor
        /// </summary>
        /// <value>Name of the vendor</value>
        [DataMember(Name = "vendorname", EmitDefaultValue = false)]
        public string Vendorname { get; set; }

        /// <summary>
        /// Ingram internal code for a product
        /// </summary>
        /// <value>Ingram internal code for a product</value>
        [DataMember(Name = "cpucode", EmitDefaultValue = false)]
        public string Cpucode { get; set; }

        /// <summary>
        /// Identifies if the SKU has been discontinued. Rules must be defined on the values to be sent out to partner.
        /// </summary>
        /// <value>Identifies if the SKU has been discontinued. Rules must be defined on the values to be sent out to partner.</value>
        [DataMember(Name = "skustatus", EmitDefaultValue = false)]
        public string Skustatus { get; set; }

        /// <summary>
        /// Gets or Sets Mediacpu
        /// </summary>
        [DataMember(Name = "mediacpu", EmitDefaultValue = false)]
        public string Mediacpu { get; set; }

        /// <summary>
        /// Ingram&#39;s internal categorization of the product
        /// </summary>
        /// <value>Ingram&#39;s internal categorization of the product</value>
        [DataMember(Name = "categorysubcategory", EmitDefaultValue = false)]
        public string Categorysubcategory { get; set; }

        /// <summary>
        /// MSRP Price 0.00
        /// </summary>
        /// <value>MSRP Price 0.00</value>
        [DataMember(Name = "retailprice", IsRequired = true, EmitDefaultValue = true)]
        public decimal Retailprice { get; set; }

        /// <summary>
        /// Internal four-digit code assigned by Ingram to represent the item group
        /// </summary>
        /// <value>Internal four-digit code assigned by Ingram to represent the item group</value>
        [DataMember(Name = "newmedia", EmitDefaultValue = false)]
        public string Newmedia { get; set; }

        /// <summary>
        /// Gets or Sets Skuauthorized
        /// </summary>
        [DataMember(Name = "skuauthorized", EmitDefaultValue = false)]
        public string Skuauthorized { get; set; }

        /// <summary>
        /// Gets or Sets Extendedvendorpartnumber
        /// </summary>
        [DataMember(Name = "extendedvendorpartnumber", EmitDefaultValue = false)]
        public string Extendedvendorpartnumber { get; set; }

        /// <summary>
        /// Gets or Sets Warehousedetails
        /// </summary>
        [DataMember(Name = "warehousedetails", EmitDefaultValue = false)]
        public List<MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner> Warehousedetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInner {\n");
            sb.Append("  Itemstatus: ").Append(Itemstatus).Append("\n");
            sb.Append("  Statusmessage: ").Append(Statusmessage).Append("\n");
            sb.Append("  Ingrampartnumber: ").Append(Ingrampartnumber).Append("\n");
            sb.Append("  Vendorpartnumber: ").Append(Vendorpartnumber).Append("\n");
            sb.Append("  Globalskuid: ").Append(Globalskuid).Append("\n");
            sb.Append("  Customerprice: ").Append(Customerprice).Append("\n");
            sb.Append("  Partdescription1: ").Append(Partdescription1).Append("\n");
            sb.Append("  Partdescription2: ").Append(Partdescription2).Append("\n");
            sb.Append("  Vendornumber: ").Append(Vendornumber).Append("\n");
            sb.Append("  Vendorname: ").Append(Vendorname).Append("\n");
            sb.Append("  Cpucode: ").Append(Cpucode).Append("\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  Skustatus: ").Append(Skustatus).Append("\n");
            sb.Append("  Mediacpu: ").Append(Mediacpu).Append("\n");
            sb.Append("  Categorysubcategory: ").Append(Categorysubcategory).Append("\n");
            sb.Append("  Retailprice: ").Append(Retailprice).Append("\n");
            sb.Append("  Newmedia: ").Append(Newmedia).Append("\n");
            sb.Append("  Enduserrequired: ").Append(Enduserrequired).Append("\n");
            sb.Append("  Backorderflag: ").Append(Backorderflag).Append("\n");
            sb.Append("  Skuauthorized: ").Append(Skuauthorized).Append("\n");
            sb.Append("  Extendedvendorpartnumber: ").Append(Extendedvendorpartnumber).Append("\n");
            sb.Append("  Warehousedetails: ").Append(Warehousedetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ingrampartnumber (string) maxLength
            if (this.Ingrampartnumber != null && this.Ingrampartnumber.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ingrampartnumber, length must be less than 6.", new [] { "Ingrampartnumber" });
            }

            // Vendorpartnumber (string) maxLength
            if (this.Vendorpartnumber != null && this.Vendorpartnumber.Length > 21)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vendorpartnumber, length must be less than 21.", new [] { "Vendorpartnumber" });
            }

            // Vendornumber (string) maxLength
            if (this.Vendornumber != null && this.Vendornumber.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vendornumber, length must be less than 4.", new [] { "Vendornumber" });
            }

            // Cpucode (string) maxLength
            if (this.Cpucode != null && this.Cpucode.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cpucode, length must be less than 6.", new [] { "Cpucode" });
            }

            // Skustatus (string) maxLength
            if (this.Skustatus != null && this.Skustatus.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Skustatus, length must be less than 1.", new [] { "Skustatus" });
            }

            yield break;
        }
    }

}
