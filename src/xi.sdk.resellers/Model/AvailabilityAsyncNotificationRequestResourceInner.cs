/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of APIs and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// AvailabilityAsyncNotificationRequestResourceInner
    /// </summary>
    [DataContract(Name = "AvailabilityAsyncNotificationRequest_resource_inner")]
    public partial class AvailabilityAsyncNotificationRequestResourceInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityAsyncNotificationRequestResourceInner" /> class.
        /// </summary>
        /// <param name="eventType">The event name sent in the event request..</param>
        /// <param name="ingramPartNumber">The Unique IngramMicro part number for the product..</param>
        /// <param name="vendorPartNumber">The vendors part number for the product..</param>
        /// <param name="vendorName">The name of the vendor/manufacturer of the product..</param>
        /// <param name="upcCode">The UPC code for the product. Consists of 12 numeric digits that are uniquly assigned to each trade item..</param>
        /// <param name="skuStatus">Status returned saying whether sku is active..</param>
        /// <param name="backOrderFlag">Backordered Flag..</param>
        /// <param name="totalAvailability">totalAvailability..</param>
        /// <param name="links">Link to Order Details for the order(s)..</param>
        public AvailabilityAsyncNotificationRequestResourceInner(string eventType = default(string), string ingramPartNumber = default(string), string vendorPartNumber = default(string), string vendorName = default(string), string upcCode = default(string), string skuStatus = default(string), string backOrderFlag = default(string), string totalAvailability = default(string), List<AvailabilityAsyncNotificationRequestResourceInnerLinksInner> links = default(List<AvailabilityAsyncNotificationRequestResourceInnerLinksInner>))
        {
            this.EventType = eventType;
            this.IngramPartNumber = ingramPartNumber;
            this.VendorPartNumber = vendorPartNumber;
            this.VendorName = vendorName;
            this.UpcCode = upcCode;
            this.SkuStatus = skuStatus;
            this.BackOrderFlag = backOrderFlag;
            this.TotalAvailability = totalAvailability;
            this.Links = links;
        }

        /// <summary>
        /// The event name sent in the event request.
        /// </summary>
        /// <value>The event name sent in the event request.</value>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// The Unique IngramMicro part number for the product.
        /// </summary>
        /// <value>The Unique IngramMicro part number for the product.</value>
        [DataMember(Name = "ingramPartNumber", EmitDefaultValue = false)]
        public string IngramPartNumber { get; set; }

        /// <summary>
        /// The vendors part number for the product.
        /// </summary>
        /// <value>The vendors part number for the product.</value>
        [DataMember(Name = "vendorPartNumber", EmitDefaultValue = false)]
        public string VendorPartNumber { get; set; }

        /// <summary>
        /// The name of the vendor/manufacturer of the product.
        /// </summary>
        /// <value>The name of the vendor/manufacturer of the product.</value>
        [DataMember(Name = "vendorName", EmitDefaultValue = false)]
        public string VendorName { get; set; }

        /// <summary>
        /// The UPC code for the product. Consists of 12 numeric digits that are uniquly assigned to each trade item.
        /// </summary>
        /// <value>The UPC code for the product. Consists of 12 numeric digits that are uniquly assigned to each trade item.</value>
        [DataMember(Name = "upcCode", EmitDefaultValue = false)]
        public string UpcCode { get; set; }

        /// <summary>
        /// Status returned saying whether sku is active.
        /// </summary>
        /// <value>Status returned saying whether sku is active.</value>
        [DataMember(Name = "skuStatus", EmitDefaultValue = false)]
        public string SkuStatus { get; set; }

        /// <summary>
        /// Backordered Flag.
        /// </summary>
        /// <value>Backordered Flag.</value>
        [DataMember(Name = "backOrderFlag", EmitDefaultValue = false)]
        public string BackOrderFlag { get; set; }

        /// <summary>
        /// totalAvailability.
        /// </summary>
        /// <value>totalAvailability.</value>
        [DataMember(Name = "totalAvailability", EmitDefaultValue = false)]
        public string TotalAvailability { get; set; }

        /// <summary>
        /// Link to Order Details for the order(s).
        /// </summary>
        /// <value>Link to Order Details for the order(s).</value>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<AvailabilityAsyncNotificationRequestResourceInnerLinksInner> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailabilityAsyncNotificationRequestResourceInner {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  IngramPartNumber: ").Append(IngramPartNumber).Append("\n");
            sb.Append("  VendorPartNumber: ").Append(VendorPartNumber).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  UpcCode: ").Append(UpcCode).Append("\n");
            sb.Append("  SkuStatus: ").Append(SkuStatus).Append("\n");
            sb.Append("  BackOrderFlag: ").Append(BackOrderFlag).Append("\n");
            sb.Append("  TotalAvailability: ").Append(TotalAvailability).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
