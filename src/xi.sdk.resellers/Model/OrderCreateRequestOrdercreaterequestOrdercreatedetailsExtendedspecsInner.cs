/*
 * XI Sdk Resellers
 *
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// Attribute Name and Value: This field identifies if your order is a DIRECT SHIP order (license / warranty) or how you want your Backorders managed as well as other process options like placing your order on hold or adding a comment. 
    /// </summary>
    [DataContract(Name = "orderCreateRequest_ordercreaterequest_ordercreatedetails_extendedspecs_inner")]
    public partial class OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner : IValidatableObject
    {
        /// <summary>
        /// Defines Attributename
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributenameEnum
        {
            /// <summary>
            /// Enum Isdirectshiporder for value: Isdirectshiporder
            /// </summary>
            [EnumMember(Value = "Isdirectshiporder")]
            Isdirectshiporder = 1,

            /// <summary>
            /// Enum Emailaddress for value: emailaddress
            /// </summary>
            [EnumMember(Value = "emailaddress")]
            Emailaddress = 2,

            /// <summary>
            /// Enum Isbackorderflagallowed for value: Isbackorderflagallowed
            /// </summary>
            [EnumMember(Value = "Isbackorderflagallowed")]
            Isbackorderflagallowed = 3,

            /// <summary>
            /// Enum Placeoncustomerhold for value: placeoncustomerhold
            /// </summary>
            [EnumMember(Value = "placeoncustomerhold")]
            Placeoncustomerhold = 4,

            /// <summary>
            /// Enum Signaturerequired for value: signaturerequired
            /// </summary>
            [EnumMember(Value = "signaturerequired")]
            Signaturerequired = 5,

            /// <summary>
            /// Enum Commenttext for value: commenttext
            /// </summary>
            [EnumMember(Value = "commenttext")]
            Commenttext = 6,

            /// <summary>
            /// Enum Resellerctacemail for value: resellerctacemail
            /// </summary>
            [EnumMember(Value = "resellerctacemail")]
            Resellerctacemail = 7,

            /// <summary>
            /// Enum Duplicatecustomerordernumbervalidate for value: duplicatecustomerordernumbervalidate
            /// </summary>
            [EnumMember(Value = "duplicatecustomerordernumbervalidate")]
            Duplicatecustomerordernumbervalidate = 8,

            /// <summary>
            /// Enum Quotenumber for value: quotenumber
            /// </summary>
            [EnumMember(Value = "quotenumber")]
            Quotenumber = 9,

            /// <summary>
            /// Enum Shipctacphone for value: shipctacphone
            /// </summary>
            [EnumMember(Value = "shipctacphone")]
            Shipctacphone = 10,

            /// <summary>
            /// Enum Vendauthnumber for value: vendauthnumber
            /// </summary>
            [EnumMember(Value = "vendauthnumber")]
            Vendauthnumber = 11,

            /// <summary>
            /// Enum Continueonerror for value: continueonerror
            /// </summary>
            [EnumMember(Value = "continueonerror")]
            Continueonerror = 12
        }


        /// <summary>
        /// Gets or Sets Attributename
        /// </summary>
        [DataMember(Name = "attributename", EmitDefaultValue = false)]
        public AttributenameEnum? Attributename { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner" /> class.
        /// </summary>
        /// <param name="attributename">attributename.</param>
        /// <param name="attributevalue">attributevalue.</param>
        public OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner(AttributenameEnum? attributename = default(AttributenameEnum?), string attributevalue = default(string))
        {
            this.Attributename = attributename;
            this.Attributevalue = attributevalue;
        }

        /// <summary>
        /// Gets or Sets Attributevalue
        /// </summary>
        [DataMember(Name = "attributevalue", EmitDefaultValue = false)]
        public string Attributevalue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner {\n");
            sb.Append("  Attributename: ").Append(Attributename).Append("\n");
            sb.Append("  Attributevalue: ").Append(Attributevalue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
