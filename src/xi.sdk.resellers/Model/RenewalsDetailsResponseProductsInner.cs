/*
 * XI Sdk Resellers
 *
 * For Ingram Micro Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// RenewalsDetailsResponseProductsInner
    /// </summary>
    [DataContract(Name = "renewalsDetailsResponse_products_inner")]
    public partial class RenewalsDetailsResponseProductsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsDetailsResponseProductsInner" /> class.
        /// </summary>
        /// <param name="ingramLineNumber">Unique Ingram Micro line number..</param>
        /// <param name="productDescription">The description of the product..</param>
        /// <param name="vendorPartNumber">The vendor&#39;s part number for the line item..</param>
        /// <param name="ingramPartNumber">Unique IngramMicro part number..</param>
        /// <param name="manufacturerPartNumber">The manufacturer&#39;s part number for the line item..</param>
        /// <param name="quantity">The quantity of the line item..</param>
        /// <param name="unitPrice">The unit price of the line item..</param>
        /// <param name="isConsolidated">Is the line item consolidated? Yes or No..</param>
        public RenewalsDetailsResponseProductsInner(string ingramLineNumber = default(string), string productDescription = default(string), string vendorPartNumber = default(string), string ingramPartNumber = default(string), string manufacturerPartNumber = default(string), string quantity = default(string), decimal unitPrice = default(decimal), string isConsolidated = default(string))
        {
            this.IngramLineNumber = ingramLineNumber;
            this.ProductDescription = productDescription;
            this.VendorPartNumber = vendorPartNumber;
            this.IngramPartNumber = ingramPartNumber;
            this.ManufacturerPartNumber = manufacturerPartNumber;
            this.Quantity = quantity;
            this.UnitPrice = unitPrice;
            this.IsConsolidated = isConsolidated;
        }

        /// <summary>
        /// Unique Ingram Micro line number.
        /// </summary>
        /// <value>Unique Ingram Micro line number.</value>
        [DataMember(Name = "ingramLineNumber", EmitDefaultValue = false)]
        public string IngramLineNumber { get; set; }

        /// <summary>
        /// The description of the product.
        /// </summary>
        /// <value>The description of the product.</value>
        [DataMember(Name = "productDescription", EmitDefaultValue = false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The vendor&#39;s part number for the line item.
        /// </summary>
        /// <value>The vendor&#39;s part number for the line item.</value>
        [DataMember(Name = "vendorPartNumber", EmitDefaultValue = false)]
        public string VendorPartNumber { get; set; }

        /// <summary>
        /// Unique IngramMicro part number.
        /// </summary>
        /// <value>Unique IngramMicro part number.</value>
        [DataMember(Name = "ingramPartNumber", EmitDefaultValue = false)]
        public string IngramPartNumber { get; set; }

        /// <summary>
        /// The manufacturer&#39;s part number for the line item.
        /// </summary>
        /// <value>The manufacturer&#39;s part number for the line item.</value>
        [DataMember(Name = "manufacturerPartNumber", EmitDefaultValue = false)]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// The quantity of the line item.
        /// </summary>
        /// <value>The quantity of the line item.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// The unit price of the line item.
        /// </summary>
        /// <value>The unit price of the line item.</value>
        [DataMember(Name = "unitPrice", EmitDefaultValue = false)]
        public decimal UnitPrice { get; set; }

        /// <summary>
        /// Is the line item consolidated? Yes or No.
        /// </summary>
        /// <value>Is the line item consolidated? Yes or No.</value>
        [DataMember(Name = "isConsolidated", EmitDefaultValue = false)]
        public string IsConsolidated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RenewalsDetailsResponseProductsInner {\n");
            sb.Append("  IngramLineNumber: ").Append(IngramLineNumber).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  VendorPartNumber: ").Append(VendorPartNumber).Append("\n");
            sb.Append("  IngramPartNumber: ").Append(IngramPartNumber).Append("\n");
            sb.Append("  ManufacturerPartNumber: ").Append(ManufacturerPartNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  IsConsolidated: ").Append(IsConsolidated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
