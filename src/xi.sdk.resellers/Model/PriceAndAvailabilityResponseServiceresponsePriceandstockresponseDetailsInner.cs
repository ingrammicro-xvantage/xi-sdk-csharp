/*
 * Reseller API
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
    /// </summary>
    [DataContract(Name = "priceAndAvailabilityResponse_serviceresponse_priceandstockresponse_details_inner")]
    public partial class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner : IValidatableObject
    {
        /// <summary>
        /// SUCCESS or FAILED
        /// </summary>
        /// <value>SUCCESS or FAILED</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemstatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2
        }


        /// <summary>
        /// SUCCESS or FAILED
        /// </summary>
        /// <value>SUCCESS or FAILED</value>
        [DataMember(Name = "itemstatus", EmitDefaultValue = false)]
        public ItemstatusEnum? Itemstatus { get; set; }
        /// <summary>
        /// Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor
        /// </summary>
        /// <value>Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4,

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 5,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 6,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 7,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 8,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 9,

            /// <summary>
            /// Enum V for value: V
            /// </summary>
            [EnumMember(Value = "V")]
            V = 10,

            /// <summary>
            /// Enum X for value: X
            /// </summary>
            [EnumMember(Value = "X")]
            X = 11
        }


        /// <summary>
        /// Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor
        /// </summary>
        /// <value>Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor</value>
        [DataMember(Name = "class", EmitDefaultValue = false)]
        public ClassEnum? VarClass { get; set; }
        /// <summary>
        /// Identifies if the SKU has been discontinued.
        /// </summary>
        /// <value>Identifies if the SKU has been discontinued.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SkustatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1
        }


        /// <summary>
        /// Identifies if the SKU has been discontinued.
        /// </summary>
        /// <value>Identifies if the SKU has been discontinued.</value>
        [DataMember(Name = "skustatus", EmitDefaultValue = false)]
        public SkustatusEnum? Skustatus { get; set; }
        /// <summary>
        /// Y - End user required N - Not required End user
        /// </summary>
        /// <value>Y - End user required N - Not required End user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnduserrequiredEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// Y - End user required N - Not required End user
        /// </summary>
        /// <value>Y - End user required N - Not required End user</value>
        [DataMember(Name = "enduserrequired", EmitDefaultValue = false)]
        public EnduserrequiredEnum? Enduserrequired { get; set; }
        /// <summary>
        /// Y- Allow Backorder Flag N- Not allowed
        /// </summary>
        /// <value>Y- Allow Backorder Flag N- Not allowed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BackorderflagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// Y- Allow Backorder Flag N- Not allowed
        /// </summary>
        /// <value>Y- Allow Backorder Flag N- Not allowed</value>
        [DataMember(Name = "backorderflag", EmitDefaultValue = false)]
        public BackorderflagEnum? Backorderflag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner" /> class.
        /// </summary>
        /// <param name="itemstatus">SUCCESS or FAILED.</param>
        /// <param name="statusmessage">Description of itemstatus.</param>
        /// <param name="ingrampartnumber">Ingram Micro part number.</param>
        /// <param name="vendorpartnumber">Manufacturer/Vendor part number.</param>
        /// <param name="globalskuid">globalskuid.</param>
        /// <param name="customerprice">Customer specific price for the product, excluding taxes.</param>
        /// <param name="partdescription1">Product description part 1.</param>
        /// <param name="partdescription2">Product description part 2.</param>
        /// <param name="vendornumber">vendornumber.</param>
        /// <param name="vendorname">Name of the vendor.</param>
        /// <param name="cpucode">cpucode.</param>
        /// <param name="varClass">Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor.</param>
        /// <param name="skustatus">Identifies if the SKU has been discontinued..</param>
        /// <param name="mediacpu">mediacpu.</param>
        /// <param name="categorysubcategory">categorysubcategory.</param>
        /// <param name="retailprice">retailprice.</param>
        /// <param name="newmedia">newmedia.</param>
        /// <param name="enduserrequired">Y - End user required N - Not required End user.</param>
        /// <param name="backorderflag">Y- Allow Backorder Flag N- Not allowed.</param>
        /// <param name="skuauthorized">skuauthorized.</param>
        /// <param name="extendedvendorpartnumber">extendedvendorpartnumber.</param>
        /// <param name="warehousedetails">warehousedetails.</param>
        public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner(ItemstatusEnum? itemstatus = default(ItemstatusEnum?), string statusmessage = default(string), string ingrampartnumber = default(string), string vendorpartnumber = default(string), string globalskuid = default(string), decimal customerprice = default(decimal), string partdescription1 = default(string), string partdescription2 = default(string), string vendornumber = default(string), string vendorname = default(string), string cpucode = default(string), ClassEnum? varClass = default(ClassEnum?), SkustatusEnum? skustatus = default(SkustatusEnum?), string mediacpu = default(string), string categorysubcategory = default(string), decimal retailprice = default(decimal), string newmedia = default(string), EnduserrequiredEnum? enduserrequired = default(EnduserrequiredEnum?), BackorderflagEnum? backorderflag = default(BackorderflagEnum?), string skuauthorized = default(string), string extendedvendorpartnumber = default(string), List<WarehouseListType> warehousedetails = default(List<WarehouseListType>))
        {
            this.Itemstatus = itemstatus;
            this.Statusmessage = statusmessage;
            this.Ingrampartnumber = ingrampartnumber;
            this.Vendorpartnumber = vendorpartnumber;
            this.Globalskuid = globalskuid;
            this.Customerprice = customerprice;
            this.Partdescription1 = partdescription1;
            this.Partdescription2 = partdescription2;
            this.Vendornumber = vendornumber;
            this.Vendorname = vendorname;
            this.Cpucode = cpucode;
            this.VarClass = varClass;
            this.Skustatus = skustatus;
            this.Mediacpu = mediacpu;
            this.Categorysubcategory = categorysubcategory;
            this.Retailprice = retailprice;
            this.Newmedia = newmedia;
            this.Enduserrequired = enduserrequired;
            this.Backorderflag = backorderflag;
            this.Skuauthorized = skuauthorized;
            this.Extendedvendorpartnumber = extendedvendorpartnumber;
            this.Warehousedetails = warehousedetails;
        }

        /// <summary>
        /// Description of itemstatus
        /// </summary>
        /// <value>Description of itemstatus</value>
        [DataMember(Name = "statusmessage", EmitDefaultValue = false)]
        public string Statusmessage { get; set; }

        /// <summary>
        /// Ingram Micro part number
        /// </summary>
        /// <value>Ingram Micro part number</value>
        [DataMember(Name = "ingrampartnumber", EmitDefaultValue = false)]
        public string Ingrampartnumber { get; set; }

        /// <summary>
        /// Manufacturer/Vendor part number
        /// </summary>
        /// <value>Manufacturer/Vendor part number</value>
        [DataMember(Name = "vendorpartnumber", EmitDefaultValue = false)]
        public string Vendorpartnumber { get; set; }

        /// <summary>
        /// Gets or Sets Globalskuid
        /// </summary>
        [DataMember(Name = "globalskuid", EmitDefaultValue = false)]
        public string Globalskuid { get; set; }

        /// <summary>
        /// Customer specific price for the product, excluding taxes
        /// </summary>
        /// <value>Customer specific price for the product, excluding taxes</value>
        [DataMember(Name = "customerprice", EmitDefaultValue = false)]
        public decimal Customerprice { get; set; }

        /// <summary>
        /// Product description part 1
        /// </summary>
        /// <value>Product description part 1</value>
        [DataMember(Name = "partdescription1", EmitDefaultValue = false)]
        public string Partdescription1 { get; set; }

        /// <summary>
        /// Product description part 2
        /// </summary>
        /// <value>Product description part 2</value>
        [DataMember(Name = "partdescription2", EmitDefaultValue = false)]
        public string Partdescription2 { get; set; }

        /// <summary>
        /// Gets or Sets Vendornumber
        /// </summary>
        [DataMember(Name = "vendornumber", EmitDefaultValue = false)]
        public string Vendornumber { get; set; }

        /// <summary>
        /// Name of the vendor
        /// </summary>
        /// <value>Name of the vendor</value>
        [DataMember(Name = "vendorname", EmitDefaultValue = false)]
        public string Vendorname { get; set; }

        /// <summary>
        /// Gets or Sets Cpucode
        /// </summary>
        [DataMember(Name = "cpucode", EmitDefaultValue = false)]
        public string Cpucode { get; set; }

        /// <summary>
        /// Gets or Sets Mediacpu
        /// </summary>
        [DataMember(Name = "mediacpu", EmitDefaultValue = false)]
        public string Mediacpu { get; set; }

        /// <summary>
        /// Gets or Sets Categorysubcategory
        /// </summary>
        [DataMember(Name = "categorysubcategory", EmitDefaultValue = false)]
        public string Categorysubcategory { get; set; }

        /// <summary>
        /// Gets or Sets Retailprice
        /// </summary>
        [DataMember(Name = "retailprice", EmitDefaultValue = false)]
        public decimal Retailprice { get; set; }

        /// <summary>
        /// Gets or Sets Newmedia
        /// </summary>
        [DataMember(Name = "newmedia", EmitDefaultValue = false)]
        public string Newmedia { get; set; }

        /// <summary>
        /// Gets or Sets Skuauthorized
        /// </summary>
        [DataMember(Name = "skuauthorized", EmitDefaultValue = false)]
        public string Skuauthorized { get; set; }

        /// <summary>
        /// Gets or Sets Extendedvendorpartnumber
        /// </summary>
        [DataMember(Name = "extendedvendorpartnumber", EmitDefaultValue = false)]
        public string Extendedvendorpartnumber { get; set; }

        /// <summary>
        /// Gets or Sets Warehousedetails
        /// </summary>
        [DataMember(Name = "warehousedetails", EmitDefaultValue = false)]
        public List<WarehouseListType> Warehousedetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner {\n");
            sb.Append("  Itemstatus: ").Append(Itemstatus).Append("\n");
            sb.Append("  Statusmessage: ").Append(Statusmessage).Append("\n");
            sb.Append("  Ingrampartnumber: ").Append(Ingrampartnumber).Append("\n");
            sb.Append("  Vendorpartnumber: ").Append(Vendorpartnumber).Append("\n");
            sb.Append("  Globalskuid: ").Append(Globalskuid).Append("\n");
            sb.Append("  Customerprice: ").Append(Customerprice).Append("\n");
            sb.Append("  Partdescription1: ").Append(Partdescription1).Append("\n");
            sb.Append("  Partdescription2: ").Append(Partdescription2).Append("\n");
            sb.Append("  Vendornumber: ").Append(Vendornumber).Append("\n");
            sb.Append("  Vendorname: ").Append(Vendorname).Append("\n");
            sb.Append("  Cpucode: ").Append(Cpucode).Append("\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  Skustatus: ").Append(Skustatus).Append("\n");
            sb.Append("  Mediacpu: ").Append(Mediacpu).Append("\n");
            sb.Append("  Categorysubcategory: ").Append(Categorysubcategory).Append("\n");
            sb.Append("  Retailprice: ").Append(Retailprice).Append("\n");
            sb.Append("  Newmedia: ").Append(Newmedia).Append("\n");
            sb.Append("  Enduserrequired: ").Append(Enduserrequired).Append("\n");
            sb.Append("  Backorderflag: ").Append(Backorderflag).Append("\n");
            sb.Append("  Skuauthorized: ").Append(Skuauthorized).Append("\n");
            sb.Append("  Extendedvendorpartnumber: ").Append(Extendedvendorpartnumber).Append("\n");
            sb.Append("  Warehousedetails: ").Append(Warehousedetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
