/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// ReturnsDetailsResponse
    /// </summary>
    [DataContract(Name = "returnsDetailsResponse")]
    public partial class ReturnsDetailsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsDetailsResponse" /> class.
        /// </summary>
        /// <param name="typeOfDetails">The type of the details. Return or Claim..</param>
        /// <param name="rmaClaimId">The rmaClaimId claim id..</param>
        /// <param name="caseRequestNumber">A unique return request number..</param>
        /// <param name="createdOn">The date on which the return request was created..</param>
        /// <param name="returnReason">The reason for the return..</param>
        /// <param name="referenceNumber">The reference number for the return..</param>
        /// <param name="status">The status of the request..</param>
        /// <param name="returnWarehouseAddress">The address of the return warehouse..</param>
        /// <param name="products">products.</param>
        /// <param name="subTotal">Sub total amount of the return request..</param>
        /// <param name="tax">The tax amount of the return request..</param>
        /// <param name="additionalFees">The additional fees for the return request..</param>
        /// <param name="estimatedTotal">The total estimated amount for the return request..</param>
        public ReturnsDetailsResponse(string typeOfDetails = default(string), string rmaClaimId = default(string), string caseRequestNumber = default(string), string createdOn = default(string), string returnReason = default(string), string referenceNumber = default(string), string status = default(string), string returnWarehouseAddress = default(string), List<ReturnsDetailsResponseProductsInner> products = default(List<ReturnsDetailsResponseProductsInner>), decimal subTotal = default(decimal), decimal tax = default(decimal), decimal additionalFees = default(decimal), decimal estimatedTotal = default(decimal))
        {
            this.TypeOfDetails = typeOfDetails;
            this.RmaClaimId = rmaClaimId;
            this.CaseRequestNumber = caseRequestNumber;
            this.CreatedOn = createdOn;
            this.ReturnReason = returnReason;
            this.ReferenceNumber = referenceNumber;
            this.Status = status;
            this.ReturnWarehouseAddress = returnWarehouseAddress;
            this.Products = products;
            this.SubTotal = subTotal;
            this.Tax = tax;
            this.AdditionalFees = additionalFees;
            this.EstimatedTotal = estimatedTotal;
        }

        /// <summary>
        /// The type of the details. Return or Claim.
        /// </summary>
        /// <value>The type of the details. Return or Claim.</value>
        [DataMember(Name = "typeOfDetails", EmitDefaultValue = false)]
        public string TypeOfDetails { get; set; }

        /// <summary>
        /// The rmaClaimId claim id.
        /// </summary>
        /// <value>The rmaClaimId claim id.</value>
        [DataMember(Name = "rmaClaimId", EmitDefaultValue = false)]
        public string RmaClaimId { get; set; }

        /// <summary>
        /// A unique return request number.
        /// </summary>
        /// <value>A unique return request number.</value>
        [DataMember(Name = "caseRequestNumber", EmitDefaultValue = false)]
        public string CaseRequestNumber { get; set; }

        /// <summary>
        /// The date on which the return request was created.
        /// </summary>
        /// <value>The date on which the return request was created.</value>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// The reason for the return.
        /// </summary>
        /// <value>The reason for the return.</value>
        [DataMember(Name = "returnReason", EmitDefaultValue = false)]
        public string ReturnReason { get; set; }

        /// <summary>
        /// The reference number for the return.
        /// </summary>
        /// <value>The reference number for the return.</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The status of the request.
        /// </summary>
        /// <value>The status of the request.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The address of the return warehouse.
        /// </summary>
        /// <value>The address of the return warehouse.</value>
        [DataMember(Name = "returnWarehouseAddress", EmitDefaultValue = false)]
        public string ReturnWarehouseAddress { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<ReturnsDetailsResponseProductsInner> Products { get; set; }

        /// <summary>
        /// Sub total amount of the return request.
        /// </summary>
        /// <value>Sub total amount of the return request.</value>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// The tax amount of the return request.
        /// </summary>
        /// <value>The tax amount of the return request.</value>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public decimal Tax { get; set; }

        /// <summary>
        /// The additional fees for the return request.
        /// </summary>
        /// <value>The additional fees for the return request.</value>
        [DataMember(Name = "additionalFees", EmitDefaultValue = false)]
        public decimal AdditionalFees { get; set; }

        /// <summary>
        /// The total estimated amount for the return request.
        /// </summary>
        /// <value>The total estimated amount for the return request.</value>
        [DataMember(Name = "estimatedTotal", EmitDefaultValue = false)]
        public decimal EstimatedTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnsDetailsResponse {\n");
            sb.Append("  TypeOfDetails: ").Append(TypeOfDetails).Append("\n");
            sb.Append("  RmaClaimId: ").Append(RmaClaimId).Append("\n");
            sb.Append("  CaseRequestNumber: ").Append(CaseRequestNumber).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ReturnReason: ").Append(ReturnReason).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReturnWarehouseAddress: ").Append(ReturnWarehouseAddress).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  AdditionalFees: ").Append(AdditionalFees).Append("\n");
            sb.Append("  EstimatedTotal: ").Append(EstimatedTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
