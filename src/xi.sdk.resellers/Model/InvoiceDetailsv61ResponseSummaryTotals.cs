/*
 * XI Sdk Resellers
 *
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of APIs and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.Model
{
    /// <summary>
    /// InvoiceDetailsv61ResponseSummaryTotals
    /// </summary>
    [DataContract(Name = "InvoiceDetailsv6_1Response_summary_totals")]
    public partial class InvoiceDetailsv61ResponseSummaryTotals : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsv61ResponseSummaryTotals" /> class.
        /// </summary>
        /// <param name="netInvoiceAmount">Net Invoice amount..</param>
        /// <param name="discountAmount">Discount amount..</param>
        /// <param name="discountType">Type of discount..</param>
        /// <param name="totalTaxAmount">Total Tax amount..</param>
        /// <param name="invoicedAmountDue">Total amount due for the invoice..</param>
        /// <param name="freightAmount">Freight amount.</param>
        public InvoiceDetailsv61ResponseSummaryTotals(double netInvoiceAmount = default(double), double discountAmount = default(double), string discountType = default(string), double totalTaxAmount = default(double), double invoicedAmountDue = default(double), double freightAmount = default(double))
        {
            this.NetInvoiceAmount = netInvoiceAmount;
            this.DiscountAmount = discountAmount;
            this.DiscountType = discountType;
            this.TotalTaxAmount = totalTaxAmount;
            this.InvoicedAmountDue = invoicedAmountDue;
            this.FreightAmount = freightAmount;
        }

        /// <summary>
        /// Net Invoice amount.
        /// </summary>
        /// <value>Net Invoice amount.</value>
        [DataMember(Name = "netInvoiceAmount", EmitDefaultValue = false)]
        public double NetInvoiceAmount { get; set; }

        /// <summary>
        /// Discount amount.
        /// </summary>
        /// <value>Discount amount.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        public double DiscountAmount { get; set; }

        /// <summary>
        /// Type of discount.
        /// </summary>
        /// <value>Type of discount.</value>
        [DataMember(Name = "discountType", EmitDefaultValue = false)]
        public string DiscountType { get; set; }

        /// <summary>
        /// Total Tax amount.
        /// </summary>
        /// <value>Total Tax amount.</value>
        [DataMember(Name = "totalTaxAmount", EmitDefaultValue = false)]
        public double TotalTaxAmount { get; set; }

        /// <summary>
        /// Total amount due for the invoice.
        /// </summary>
        /// <value>Total amount due for the invoice.</value>
        [DataMember(Name = "invoicedAmountDue", EmitDefaultValue = false)]
        public double InvoicedAmountDue { get; set; }

        /// <summary>
        /// Freight amount
        /// </summary>
        /// <value>Freight amount</value>
        [DataMember(Name = "freightAmount", EmitDefaultValue = false)]
        public double FreightAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsv61ResponseSummaryTotals {\n");
            sb.Append("  NetInvoiceAmount: ").Append(NetInvoiceAmount).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  InvoicedAmountDue: ").Append(InvoicedAmountDue).Append("\n");
            sb.Append("  FreightAmount: ").Append(FreightAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
