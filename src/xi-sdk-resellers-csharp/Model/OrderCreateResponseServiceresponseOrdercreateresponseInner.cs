/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-resellers-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-resellers-csharp.Model
{
    /// <summary>
    /// OrderCreateResponseServiceresponseOrdercreateresponseInner
    /// </summary>
    [DataContract(Name = "orderCreateResponse_serviceresponse_ordercreateresponse_inner")]
    public partial class OrderCreateResponseServiceresponseOrdercreateresponseInner : IValidatableObject
    {
        /// <summary>
        /// S&#x3D;Stocked PO D&#x3D;Direct Ship PO
        /// </summary>
        /// <value>S&#x3D;Stocked PO D&#x3D;Direct Ship PO</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrdertypeEnum
        {
            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 1,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 2
        }


        /// <summary>
        /// S&#x3D;Stocked PO D&#x3D;Direct Ship PO
        /// </summary>
        /// <value>S&#x3D;Stocked PO D&#x3D;Direct Ship PO</value>
        [DataMember(Name = "ordertype", EmitDefaultValue = false)]
        public OrdertypeEnum? Ordertype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateResponseServiceresponseOrdercreateresponseInner" /> class.
        /// </summary>
        /// <param name="numberoflineswithsuccess">Number of line items that were successful.</param>
        /// <param name="numberoflineswitherror">Number of line items with error.</param>
        /// <param name="numberoflineswithwarning">Number of line items with warnings.</param>
        /// <param name="globalorderid">Ingram sales order number.</param>
        /// <param name="ordertype">S&#x3D;Stocked PO D&#x3D;Direct Ship PO.</param>
        /// <param name="ordertimestamp">Time order received.</param>
        /// <param name="invoicingsystemorderid">Ingram Micro generated order number.</param>
        /// <param name="taxamount">taxamount.</param>
        /// <param name="freightamount">Freight amount customer pays for freight.</param>
        /// <param name="orderamount">Total amount of order with freight and taxes.</param>
        /// <param name="lines">Collection of lines.</param>
        public OrderCreateResponseServiceresponseOrdercreateresponseInner(string numberoflineswithsuccess = default(string), string numberoflineswitherror = default(string), string numberoflineswithwarning = default(string), string globalorderid = default(string), OrdertypeEnum? ordertype = default(OrdertypeEnum?), string ordertimestamp = default(string), string invoicingsystemorderid = default(string), decimal taxamount = default(decimal), decimal freightamount = default(decimal), decimal orderamount = default(decimal), List<OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner> lines = default(List<OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner>))
        {
            this.Numberoflineswithsuccess = numberoflineswithsuccess;
            this.Numberoflineswitherror = numberoflineswitherror;
            this.Numberoflineswithwarning = numberoflineswithwarning;
            this.Globalorderid = globalorderid;
            this.Ordertype = ordertype;
            this.Ordertimestamp = ordertimestamp;
            this.Invoicingsystemorderid = invoicingsystemorderid;
            this.Taxamount = taxamount;
            this.Freightamount = freightamount;
            this.Orderamount = orderamount;
            this.Lines = lines;
        }

        /// <summary>
        /// Number of line items that were successful
        /// </summary>
        /// <value>Number of line items that were successful</value>
        [DataMember(Name = "numberoflineswithsuccess", EmitDefaultValue = false)]
        public string Numberoflineswithsuccess { get; set; }

        /// <summary>
        /// Number of line items with error
        /// </summary>
        /// <value>Number of line items with error</value>
        [DataMember(Name = "numberoflineswitherror", EmitDefaultValue = false)]
        public string Numberoflineswitherror { get; set; }

        /// <summary>
        /// Number of line items with warnings
        /// </summary>
        /// <value>Number of line items with warnings</value>
        [DataMember(Name = "numberoflineswithwarning", EmitDefaultValue = false)]
        public string Numberoflineswithwarning { get; set; }

        /// <summary>
        /// Ingram sales order number
        /// </summary>
        /// <value>Ingram sales order number</value>
        [DataMember(Name = "globalorderid", EmitDefaultValue = false)]
        public string Globalorderid { get; set; }

        /// <summary>
        /// Time order received
        /// </summary>
        /// <value>Time order received</value>
        [DataMember(Name = "ordertimestamp", EmitDefaultValue = false)]
        public string Ordertimestamp { get; set; }

        /// <summary>
        /// Ingram Micro generated order number
        /// </summary>
        /// <value>Ingram Micro generated order number</value>
        [DataMember(Name = "invoicingsystemorderid", EmitDefaultValue = false)]
        public string Invoicingsystemorderid { get; set; }

        /// <summary>
        /// Gets or Sets Taxamount
        /// </summary>
        [DataMember(Name = "taxamount", EmitDefaultValue = false)]
        public decimal Taxamount { get; set; }

        /// <summary>
        /// Freight amount customer pays for freight
        /// </summary>
        /// <value>Freight amount customer pays for freight</value>
        [DataMember(Name = "freightamount", EmitDefaultValue = false)]
        public decimal Freightamount { get; set; }

        /// <summary>
        /// Total amount of order with freight and taxes
        /// </summary>
        /// <value>Total amount of order with freight and taxes</value>
        [DataMember(Name = "orderamount", EmitDefaultValue = false)]
        public decimal Orderamount { get; set; }

        /// <summary>
        /// Collection of lines
        /// </summary>
        /// <value>Collection of lines</value>
        [DataMember(Name = "Lines", EmitDefaultValue = false)]
        public List<OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner> Lines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateResponseServiceresponseOrdercreateresponseInner {\n");
            sb.Append("  Numberoflineswithsuccess: ").Append(Numberoflineswithsuccess).Append("\n");
            sb.Append("  Numberoflineswitherror: ").Append(Numberoflineswitherror).Append("\n");
            sb.Append("  Numberoflineswithwarning: ").Append(Numberoflineswithwarning).Append("\n");
            sb.Append("  Globalorderid: ").Append(Globalorderid).Append("\n");
            sb.Append("  Ordertype: ").Append(Ordertype).Append("\n");
            sb.Append("  Ordertimestamp: ").Append(Ordertimestamp).Append("\n");
            sb.Append("  Invoicingsystemorderid: ").Append(Invoicingsystemorderid).Append("\n");
            sb.Append("  Taxamount: ").Append(Taxamount).Append("\n");
            sb.Append("  Freightamount: ").Append(Freightamount).Append("\n");
            sb.Append("  Orderamount: ").Append(Orderamount).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
