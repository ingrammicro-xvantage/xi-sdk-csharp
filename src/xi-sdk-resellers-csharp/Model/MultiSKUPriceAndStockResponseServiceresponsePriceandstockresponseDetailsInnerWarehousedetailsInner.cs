/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-resellers-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-resellers-csharp.Model
{
    /// <summary>
    /// MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner
    /// </summary>
    [DataContract(Name = "multiSKUPriceAndStockResponse_serviceresponse_priceandstockresponse_details_inner_warehousedetails_inner")]
    public partial class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner : IValidatableObject
    {
        /// <summary>
        /// Unique 2-digit code of the Ingram Micro warehouse
        /// </summary>
        /// <value>Unique 2-digit code of the Ingram Micro warehouse</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WarehouseidEnum
        {
            /// <summary>
            /// Enum _10MiraLomaCA for value: 10-Mira Loma CA
            /// </summary>
            [EnumMember(Value = "10-Mira Loma CA")]
            _10MiraLomaCA = 1,

            /// <summary>
            /// Enum _20CarrolltonTX for value: 20-Carrollton TX
            /// </summary>
            [EnumMember(Value = "20-Carrollton TX")]
            _20CarrolltonTX = 2,

            /// <summary>
            /// Enum _30MillingtonTN for value: 30-Millington TN
            /// </summary>
            [EnumMember(Value = "30-Millington TN")]
            _30MillingtonTN = 3,

            /// <summary>
            /// Enum _40CarolStreamIL for value: 40-Carol Stream IL
            /// </summary>
            [EnumMember(Value = "40-Carol Stream IL")]
            _40CarolStreamIL = 4,

            /// <summary>
            /// Enum _80JonestownPA for value: 80-Jonestown PA
            /// </summary>
            [EnumMember(Value = "80-Jonestown PA")]
            _80JonestownPA = 5
        }


        /// <summary>
        /// Unique 2-digit code of the Ingram Micro warehouse
        /// </summary>
        /// <value>Unique 2-digit code of the Ingram Micro warehouse</value>
        [DataMember(Name = "warehouseid", EmitDefaultValue = false)]
        public WarehouseidEnum? Warehouseid { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner" /> class.
        /// </summary>
        /// <param name="warehouseid">Unique 2-digit code of the Ingram Micro warehouse.</param>
        /// <param name="warehousedescription">City of the Ingram Micro warehouse location.</param>
        /// <param name="availablequantity">On hand available quantity.</param>
        /// <param name="onorderquantity">On Order quantity.</param>
        /// <param name="onholdquantity">onholdquantity.</param>
        /// <param name="etadate">etadate.</param>
        public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner(WarehouseidEnum? warehouseid = default(WarehouseidEnum?), string warehousedescription = default(string), int availablequantity = default(int), int onorderquantity = default(int), string onholdquantity = default(string), string etadate = default(string))
        {
            this.Warehouseid = warehouseid;
            this.Warehousedescription = warehousedescription;
            this.Availablequantity = availablequantity;
            this.Onorderquantity = onorderquantity;
            this.Onholdquantity = onholdquantity;
            this.Etadate = etadate;
        }

        /// <summary>
        /// City of the Ingram Micro warehouse location
        /// </summary>
        /// <value>City of the Ingram Micro warehouse location</value>
        [DataMember(Name = "warehousedescription", EmitDefaultValue = false)]
        public string Warehousedescription { get; set; }

        /// <summary>
        /// On hand available quantity
        /// </summary>
        /// <value>On hand available quantity</value>
        [DataMember(Name = "availablequantity", EmitDefaultValue = false)]
        public int Availablequantity { get; set; }

        /// <summary>
        /// On Order quantity
        /// </summary>
        /// <value>On Order quantity</value>
        [DataMember(Name = "onorderquantity", EmitDefaultValue = false)]
        public int Onorderquantity { get; set; }

        /// <summary>
        /// Gets or Sets Onholdquantity
        /// </summary>
        [DataMember(Name = "onholdquantity", EmitDefaultValue = false)]
        public string Onholdquantity { get; set; }

        /// <summary>
        /// Gets or Sets Etadate
        /// </summary>
        [DataMember(Name = "etadate", EmitDefaultValue = false)]
        public string Etadate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner {\n");
            sb.Append("  Warehouseid: ").Append(Warehouseid).Append("\n");
            sb.Append("  Warehousedescription: ").Append(Warehousedescription).Append("\n");
            sb.Append("  Availablequantity: ").Append(Availablequantity).Append("\n");
            sb.Append("  Onorderquantity: ").Append(Onorderquantity).Append("\n");
            sb.Append("  Onholdquantity: ").Append(Onholdquantity).Append("\n");
            sb.Append("  Etadate: ").Append(Etadate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
