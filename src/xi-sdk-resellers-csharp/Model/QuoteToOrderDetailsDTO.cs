/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-resellers-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-resellers-csharp.Model
{
    /// <summary>
    /// QuoteToOrderDetailsDTO
    /// </summary>
    [DataContract(Name = "QuoteToOrderDetailsDTO")]
    public partial class QuoteToOrderDetailsDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteToOrderDetailsDTO" /> class.
        /// </summary>
        /// <param name="quoteNumber">A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote..</param>
        /// <param name="customerOrderNumber">The reseller&#39;s order number for reference in their system..</param>
        /// <param name="enduserOrderNumber">The end customer&#39;s order number for reference in their system..</param>
        /// <param name="billToAddressId">Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit..</param>
        /// <param name="endUserInfo">The contact information for the end user/customer provided by the reseller. Used to determine pricing and discounts..</param>
        /// <param name="shipToInfo">The shipping information provided by the reseller for order delivery..</param>
        /// <param name="additionalAttributes">Additional order create attributes..</param>
        /// <param name="vmfadditionalAttributes">The object containing the list of fields required at a header level by the vendor..</param>
        /// <param name="lines">The object containing the lines that require vendor mandatory fields..</param>
        public QuoteToOrderDetailsDTO(string quoteNumber = default(string), string customerOrderNumber = default(string), string enduserOrderNumber = default(string), string billToAddressId = default(string), List<QuoteToOrderDetailsDTOEndUserInfoInner> endUserInfo = default(List<QuoteToOrderDetailsDTOEndUserInfoInner>), List<QuoteToOrderDetailsDTOShipToInfoInner> shipToInfo = default(List<QuoteToOrderDetailsDTOShipToInfoInner>), List<QuoteToOrderDetailsDTOAdditionalAttributesInner> additionalAttributes = default(List<QuoteToOrderDetailsDTOAdditionalAttributesInner>), List<QuoteToOrderDetailsDTOVmfadditionalAttributesInner> vmfadditionalAttributes = default(List<QuoteToOrderDetailsDTOVmfadditionalAttributesInner>), List<QuoteToOrderDetailsDTOLinesInner> lines = default(List<QuoteToOrderDetailsDTOLinesInner>))
        {
            this.QuoteNumber = quoteNumber;
            this.CustomerOrderNumber = customerOrderNumber;
            this.EnduserOrderNumber = enduserOrderNumber;
            this.BillToAddressId = billToAddressId;
            this.EndUserInfo = endUserInfo;
            this.ShipToInfo = shipToInfo;
            this.AdditionalAttributes = additionalAttributes;
            this.VmfadditionalAttributes = vmfadditionalAttributes;
            this.Lines = lines;
        }

        /// <summary>
        /// A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.
        /// </summary>
        /// <value>A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.</value>
        [DataMember(Name = "quoteNumber", EmitDefaultValue = true)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// The reseller&#39;s order number for reference in their system.
        /// </summary>
        /// <value>The reseller&#39;s order number for reference in their system.</value>
        [DataMember(Name = "customerOrderNumber", EmitDefaultValue = true)]
        public string CustomerOrderNumber { get; set; }

        /// <summary>
        /// The end customer&#39;s order number for reference in their system.
        /// </summary>
        /// <value>The end customer&#39;s order number for reference in their system.</value>
        [DataMember(Name = "enduserOrderNumber", EmitDefaultValue = true)]
        public string EnduserOrderNumber { get; set; }

        /// <summary>
        /// Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.
        /// </summary>
        /// <value>Suffix used to identify billing address. Created during onboarding. Resellers are provided with one or more address IDs depending on how many bill to addresses they need for various flooring companies they are using for credit.</value>
        [DataMember(Name = "billToAddressId", EmitDefaultValue = true)]
        public string BillToAddressId { get; set; }

        /// <summary>
        /// The contact information for the end user/customer provided by the reseller. Used to determine pricing and discounts.
        /// </summary>
        /// <value>The contact information for the end user/customer provided by the reseller. Used to determine pricing and discounts.</value>
        [DataMember(Name = "endUserInfo", EmitDefaultValue = false)]
        public List<QuoteToOrderDetailsDTOEndUserInfoInner> EndUserInfo { get; set; }

        /// <summary>
        /// The shipping information provided by the reseller for order delivery.
        /// </summary>
        /// <value>The shipping information provided by the reseller for order delivery.</value>
        [DataMember(Name = "shipToInfo", EmitDefaultValue = false)]
        public List<QuoteToOrderDetailsDTOShipToInfoInner> ShipToInfo { get; set; }

        /// <summary>
        /// Additional order create attributes.
        /// </summary>
        /// <value>Additional order create attributes.</value>
        [DataMember(Name = "additionalAttributes", EmitDefaultValue = false)]
        public List<QuoteToOrderDetailsDTOAdditionalAttributesInner> AdditionalAttributes { get; set; }

        /// <summary>
        /// The object containing the list of fields required at a header level by the vendor.
        /// </summary>
        /// <value>The object containing the list of fields required at a header level by the vendor.</value>
        [DataMember(Name = "vmfadditionalAttributes", EmitDefaultValue = false)]
        public List<QuoteToOrderDetailsDTOVmfadditionalAttributesInner> VmfadditionalAttributes { get; set; }

        /// <summary>
        /// The object containing the lines that require vendor mandatory fields.
        /// </summary>
        /// <value>The object containing the lines that require vendor mandatory fields.</value>
        [DataMember(Name = "lines", EmitDefaultValue = false)]
        public List<QuoteToOrderDetailsDTOLinesInner> Lines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteToOrderDetailsDTO {\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  CustomerOrderNumber: ").Append(CustomerOrderNumber).Append("\n");
            sb.Append("  EnduserOrderNumber: ").Append(EnduserOrderNumber).Append("\n");
            sb.Append("  BillToAddressId: ").Append(BillToAddressId).Append("\n");
            sb.Append("  EndUserInfo: ").Append(EndUserInfo).Append("\n");
            sb.Append("  ShipToInfo: ").Append(ShipToInfo).Append("\n");
            sb.Append("  AdditionalAttributes: ").Append(AdditionalAttributes).Append("\n");
            sb.Append("  VmfadditionalAttributes: ").Append(VmfadditionalAttributes).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuoteNumber (string) maxLength
            if (this.QuoteNumber != null && this.QuoteNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteNumber, length must be less than 35.", new [] { "QuoteNumber" });
            }

            // CustomerOrderNumber (string) maxLength
            if (this.CustomerOrderNumber != null && this.CustomerOrderNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerOrderNumber, length must be less than 35.", new [] { "CustomerOrderNumber" });
            }

            // EnduserOrderNumber (string) maxLength
            if (this.EnduserOrderNumber != null && this.EnduserOrderNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnduserOrderNumber, length must be less than 35.", new [] { "EnduserOrderNumber" });
            }

            yield break;
        }
    }

}
