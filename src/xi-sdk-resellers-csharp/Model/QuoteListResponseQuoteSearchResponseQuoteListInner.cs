/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-resellers-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-resellers-csharp.Model
{
    /// <summary>
    /// QuoteListResponseQuoteSearchResponseQuoteListInner
    /// </summary>
    [DataContract(Name = "quoteListResponse_quoteSearchResponse_quoteList_inner")]
    public partial class QuoteListResponseQuoteSearchResponseQuoteListInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteListResponseQuoteSearchResponseQuoteListInner" /> class.
        /// </summary>
        /// <param name="quoteName">Quote Name given to quote by sales team or system generated. Generally used as a reference to identify the quote..</param>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes..</param>
        /// <param name="revisionNumber">When a quote has been revised and updated, the quote number remains the same throughout the lifecycle of the quote, however, a Revision number is updated for each revision of the quote. The revision numbers is associated with the Unique Quote Number..</param>
        /// <param name="endUserName">End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM.</param>
        /// <param name="bidNumber">Special Pricing Bid Number, also refers to as Dart Number relates to a unique pricing deal associated with a vendor for the quote..</param>
        /// <param name="totalAmount">Total amount of quoted price for all products in the quote..</param>
        /// <param name="quoteStatus">This refers to the primary status of the quote. API responses will return: Active.</param>
        /// <param name="createdDate">Date the Quote was initially Created.</param>
        /// <param name="lastModifiedDate">Date the Quote was last updated or modified..</param>
        /// <param name="quoteExpiryDate">Date the Quote Expires.</param>
        public QuoteListResponseQuoteSearchResponseQuoteListInner(string quoteName = default(string), string quoteNumber = default(string), int revisionNumber = default(int), string endUserName = default(string), string bidNumber = default(string), string totalAmount = default(string), string quoteStatus = default(string), DateTime createdDate = default(DateTime), DateTime lastModifiedDate = default(DateTime), DateTime quoteExpiryDate = default(DateTime))
        {
            this.QuoteName = quoteName;
            this.QuoteNumber = quoteNumber;
            this.RevisionNumber = revisionNumber;
            this.EndUserName = endUserName;
            this.BidNumber = bidNumber;
            this.TotalAmount = totalAmount;
            this.QuoteStatus = quoteStatus;
            this.CreatedDate = createdDate;
            this.LastModifiedDate = lastModifiedDate;
            this.QuoteExpiryDate = quoteExpiryDate;
        }

        /// <summary>
        /// Quote Name given to quote by sales team or system generated. Generally used as a reference to identify the quote.
        /// </summary>
        /// <value>Quote Name given to quote by sales team or system generated. Generally used as a reference to identify the quote.</value>
        [DataMember(Name = "quoteName", EmitDefaultValue = false)]
        public string QuoteName { get; set; }

        /// <summary>
        /// Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.
        /// </summary>
        /// <value>Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</value>
        [DataMember(Name = "quoteNumber", EmitDefaultValue = false)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// When a quote has been revised and updated, the quote number remains the same throughout the lifecycle of the quote, however, a Revision number is updated for each revision of the quote. The revision numbers is associated with the Unique Quote Number.
        /// </summary>
        /// <value>When a quote has been revised and updated, the quote number remains the same throughout the lifecycle of the quote, however, a Revision number is updated for each revision of the quote. The revision numbers is associated with the Unique Quote Number.</value>
        [DataMember(Name = "revisionNumber", EmitDefaultValue = false)]
        public int RevisionNumber { get; set; }

        /// <summary>
        /// End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM
        /// </summary>
        /// <value>End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM</value>
        [DataMember(Name = "endUserName", EmitDefaultValue = false)]
        public string EndUserName { get; set; }

        /// <summary>
        /// Special Pricing Bid Number, also refers to as Dart Number relates to a unique pricing deal associated with a vendor for the quote.
        /// </summary>
        /// <value>Special Pricing Bid Number, also refers to as Dart Number relates to a unique pricing deal associated with a vendor for the quote.</value>
        [DataMember(Name = "bidNumber", EmitDefaultValue = false)]
        public string BidNumber { get; set; }

        /// <summary>
        /// Total amount of quoted price for all products in the quote.
        /// </summary>
        /// <value>Total amount of quoted price for all products in the quote.</value>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// This refers to the primary status of the quote. API responses will return: Active
        /// </summary>
        /// <value>This refers to the primary status of the quote. API responses will return: Active</value>
        [DataMember(Name = "quoteStatus", EmitDefaultValue = false)]
        public string QuoteStatus { get; set; }

        /// <summary>
        /// Date the Quote was initially Created
        /// </summary>
        /// <value>Date the Quote was initially Created</value>
        /// <example>Tue Oct 08 00:00:00 UTC 2019</example>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Date the Quote was last updated or modified.
        /// </summary>
        /// <value>Date the Quote was last updated or modified.</value>
        /// <example>Tue Oct 08 00:00:00 UTC 2019</example>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Date the Quote Expires
        /// </summary>
        /// <value>Date the Quote Expires</value>
        /// <example>Tue Oct 08 00:00:00 UTC 2019</example>
        [DataMember(Name = "quoteExpiryDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime QuoteExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteListResponseQuoteSearchResponseQuoteListInner {\n");
            sb.Append("  QuoteName: ").Append(QuoteName).Append("\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  RevisionNumber: ").Append(RevisionNumber).Append("\n");
            sb.Append("  EndUserName: ").Append(EndUserName).Append("\n");
            sb.Append("  BidNumber: ").Append(BidNumber).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  QuoteStatus: ").Append(QuoteStatus).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  QuoteExpiryDate: ").Append(QuoteExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
