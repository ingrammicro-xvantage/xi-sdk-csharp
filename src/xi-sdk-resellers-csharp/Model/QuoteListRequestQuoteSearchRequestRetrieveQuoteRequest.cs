/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = xi-sdk-resellers-csharp.Client.OpenAPIDateConverter;

namespace xi-sdk-resellers-csharp.Model
{
    /// <summary>
    /// QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
    /// </summary>
    [DataContract(Name = "quoteListRequest_quoteSearchRequest_retrieveQuoteRequest")]
    public partial class QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest : IValidatableObject
    {
        /// <summary>
        /// Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.
        /// </summary>
        /// <value>Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortingEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2
        }


        /// <summary>
        /// Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.
        /// </summary>
        /// <value>Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.</value>
        [DataMember(Name = "sorting", EmitDefaultValue = false)]
        public SortingEnum? Sorting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest" /> class.
        /// </summary>
        /// <param name="quoteNumber">Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes..</param>
        /// <param name="bidNumber">Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts..</param>
        /// <param name="endUserName">End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM.</param>
        /// <param name="fromDate">Filter to select the beginning date of a desired date range. The default filter is set to the date the user is logged-in to request quotes. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;.</param>
        /// <param name="toDate">Filter to select the end date of a desired date range. The default number of days to request is the previous 30 days from the date user has logged in. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;.</param>
        /// <param name="pageIndex">Page index or page number for the list of quotes being returned. When less than 25 quotes are returned, the page number will be \&quot;1\&quot;. In cases where more than 25 quotes are returned, and the default quotes per page are 25 (see recordPerPage), then the list will continue on subsequent pages..</param>
        /// <param name="recordsPerPage">Number of records (quotes) to display per page in the quote list. The default is 25, but may be increased using the filter by up to 100 records per page. If more than 100 records are requested a message will be returned \&quot;The number of records requested exceeds the 100 record limit.\&quot; .</param>
        /// <param name="sorting">Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first..</param>
        /// <param name="sortingColumnName">Refers to the column selected to apply the sorting criteria. The default column is dateCreated and will sort by the most recently created quote first with the following in descending order. The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate, expiryDate, and endUserName..</param>
        /// <param name="thirdPartySource">Unique identifier used to identify the third party source accessing the services..</param>
        public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest(string quoteNumber = default(string), string bidNumber = default(string), string endUserName = default(string), DateTime fromDate = default(DateTime), DateTime toDate = default(DateTime), string pageIndex = default(string), string recordsPerPage = default(string), SortingEnum? sorting = default(SortingEnum?), string sortingColumnName = default(string), string thirdPartySource = default(string))
        {
            this.QuoteNumber = quoteNumber;
            this.BidNumber = bidNumber;
            this.EndUserName = endUserName;
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.PageIndex = pageIndex;
            this.RecordsPerPage = recordsPerPage;
            this.Sorting = sorting;
            this.SortingColumnName = sortingColumnName;
            this.ThirdPartySource = thirdPartySource;
        }

        /// <summary>
        /// Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.
        /// </summary>
        /// <value>Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.</value>
        [DataMember(Name = "quoteNumber", EmitDefaultValue = false)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts.
        /// </summary>
        /// <value>Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts.</value>
        [DataMember(Name = "bidNumber", EmitDefaultValue = false)]
        public string BidNumber { get; set; }

        /// <summary>
        /// End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM
        /// </summary>
        /// <value>End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM</value>
        [DataMember(Name = "endUserName", EmitDefaultValue = false)]
        public string EndUserName { get; set; }

        /// <summary>
        /// Filter to select the beginning date of a desired date range. The default filter is set to the date the user is logged-in to request quotes. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;
        /// </summary>
        /// <value>Filter to select the beginning date of a desired date range. The default filter is set to the date the user is logged-in to request quotes. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;</value>
        /// <example>Thu Aug 01 00:00:00 UTC 2019</example>
        [DataMember(Name = "fromDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FromDate { get; set; }

        /// <summary>
        /// Filter to select the end date of a desired date range. The default number of days to request is the previous 30 days from the date user has logged in. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;
        /// </summary>
        /// <value>Filter to select the end date of a desired date range. The default number of days to request is the previous 30 days from the date user has logged in. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;</value>
        /// <example>Fri Nov 01 00:00:00 UTC 2019</example>
        [DataMember(Name = "toDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ToDate { get; set; }

        /// <summary>
        /// Page index or page number for the list of quotes being returned. When less than 25 quotes are returned, the page number will be \&quot;1\&quot;. In cases where more than 25 quotes are returned, and the default quotes per page are 25 (see recordPerPage), then the list will continue on subsequent pages.
        /// </summary>
        /// <value>Page index or page number for the list of quotes being returned. When less than 25 quotes are returned, the page number will be \&quot;1\&quot;. In cases where more than 25 quotes are returned, and the default quotes per page are 25 (see recordPerPage), then the list will continue on subsequent pages.</value>
        [DataMember(Name = "pageIndex", EmitDefaultValue = false)]
        public string PageIndex { get; set; }

        /// <summary>
        /// Number of records (quotes) to display per page in the quote list. The default is 25, but may be increased using the filter by up to 100 records per page. If more than 100 records are requested a message will be returned \&quot;The number of records requested exceeds the 100 record limit.\&quot; 
        /// </summary>
        /// <value>Number of records (quotes) to display per page in the quote list. The default is 25, but may be increased using the filter by up to 100 records per page. If more than 100 records are requested a message will be returned \&quot;The number of records requested exceeds the 100 record limit.\&quot; </value>
        [DataMember(Name = "recordsPerPage", EmitDefaultValue = false)]
        public string RecordsPerPage { get; set; }

        /// <summary>
        /// Refers to the column selected to apply the sorting criteria. The default column is dateCreated and will sort by the most recently created quote first with the following in descending order. The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate, expiryDate, and endUserName.
        /// </summary>
        /// <value>Refers to the column selected to apply the sorting criteria. The default column is dateCreated and will sort by the most recently created quote first with the following in descending order. The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate, expiryDate, and endUserName.</value>
        /// <example>toDate</example>
        [DataMember(Name = "sortingColumnName", EmitDefaultValue = false)]
        public string SortingColumnName { get; set; }

        /// <summary>
        /// Unique identifier used to identify the third party source accessing the services.
        /// </summary>
        /// <value>Unique identifier used to identify the third party source accessing the services.</value>
        [DataMember(Name = "thirdPartySource", EmitDefaultValue = false)]
        public string ThirdPartySource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest {\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  BidNumber: ").Append(BidNumber).Append("\n");
            sb.Append("  EndUserName: ").Append(EndUserName).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  RecordsPerPage: ").Append(RecordsPerPage).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("  SortingColumnName: ").Append(SortingColumnName).Append("\n");
            sb.Append("  ThirdPartySource: ").Append(ThirdPartySource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuoteNumber (string) maxLength
            if (this.QuoteNumber != null && this.QuoteNumber.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteNumber, length must be less than 100.", new [] { "QuoteNumber" });
            }

            // BidNumber (string) maxLength
            if (this.BidNumber != null && this.BidNumber.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BidNumber, length must be less than 100.", new [] { "BidNumber" });
            }

            // EndUserName (string) maxLength
            if (this.EndUserName != null && this.EndUserName.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndUserName, length must be less than 300.", new [] { "EndUserName" });
            }

            // SortingColumnName (string) maxLength
            if (this.SortingColumnName != null && this.SortingColumnName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SortingColumnName, length must be less than 100.", new [] { "SortingColumnName" });
            }

            // ThirdPartySource (string) maxLength
            if (this.ThirdPartySource != null && this.ThirdPartySource.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThirdPartySource, length must be less than 100.", new [] { "ThirdPartySource" });
            }

            yield break;
        }
    }

}
