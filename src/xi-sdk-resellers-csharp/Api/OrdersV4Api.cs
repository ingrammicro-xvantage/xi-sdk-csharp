/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using xi-sdk-resellers-csharp.Client;
using xi-sdk-resellers-csharp.Client.Auth;
using xi-sdk-resellers-csharp.Model;

namespace xi-sdk-resellers-csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV4ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Order
        /// </summary>
        /// <remarks>
        /// The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderCreateResponse</returns>
        OrderCreateResponse PostV4Ordercreate(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new Order
        /// </summary>
        /// <remarks>
        /// The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        ApiResponse<OrderCreateResponse> PostV4OrdercreateWithHttpInfo(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        /// A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDeleteResponse</returns>
        OrderDeleteResponse PostV4Orderdelete(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        /// A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDeleteResponse</returns>
        ApiResponse<OrderDeleteResponse> PostV4OrderdeleteWithHttpInfo(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDetailResponse</returns>
        OrderDetailResponse PostV4Orderdetails(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0);

        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        ApiResponse<OrderDetailResponse> PostV4OrderdetailsWithHttpInfo(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0);
        /// <summary>
        /// Modify an Existing Order
        /// </summary>
        /// <remarks>
        /// The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderModifyResponse</returns>
        OrderModifyResponse PostV4Ordermodify(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0);

        /// <summary>
        /// Modify an Existing Order
        /// </summary>
        /// <remarks>
        /// The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderModifyResponse</returns>
        ApiResponse<OrderModifyResponse> PostV4OrdermodifyWithHttpInfo(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0);
        /// <summary>
        /// Order Search
        /// </summary>
        /// <remarks>
        /// Search your orders using various search parameters
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderSearchResponse</returns>
        OrderSearchResponse PostV4Ordersearch(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0);

        /// <summary>
        /// Order Search
        /// </summary>
        /// <remarks>
        /// Search your orders using various search parameters
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        ApiResponse<OrderSearchResponse> PostV4OrdersearchWithHttpInfo(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV4ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Order
        /// </summary>
        /// <remarks>
        /// The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        System.Threading.Tasks.Task<OrderCreateResponse> PostV4OrdercreateAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Order
        /// </summary>
        /// <remarks>
        /// The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCreateResponse>> PostV4OrdercreateWithHttpInfoAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        /// A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDeleteResponse</returns>
        System.Threading.Tasks.Task<OrderDeleteResponse> PostV4OrderdeleteAsync(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        /// A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDeleteResponse>> PostV4OrderdeleteWithHttpInfoAsync(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        System.Threading.Tasks.Task<OrderDetailResponse> PostV4OrderdetailsAsync(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailResponse>> PostV4OrderdetailsWithHttpInfoAsync(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify an Existing Order
        /// </summary>
        /// <remarks>
        /// The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderModifyResponse</returns>
        System.Threading.Tasks.Task<OrderModifyResponse> PostV4OrdermodifyAsync(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify an Existing Order
        /// </summary>
        /// <remarks>
        /// The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderModifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderModifyResponse>> PostV4OrdermodifyWithHttpInfoAsync(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Order Search
        /// </summary>
        /// <remarks>
        /// Search your orders using various search parameters
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        System.Threading.Tasks.Task<OrderSearchResponse> PostV4OrdersearchAsync(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Order Search
        /// </summary>
        /// <remarks>
        /// Search your orders using various search parameters
        /// </remarks>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSearchResponse>> PostV4OrdersearchWithHttpInfoAsync(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV4Api : IOrdersV4ApiSync, IOrdersV4ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersV4Api : IOrdersV4Api
    {
        private xi-sdk-resellers-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV4Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersV4Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV4Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersV4Api(string basePath)
        {
            this.Configuration = xi-sdk-resellers-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-resellers-csharp.Client.GlobalConfiguration.Instance,
                new xi-sdk-resellers-csharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new xi-sdk-resellers-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-resellers-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = xi-sdk-resellers-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV4Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersV4Api(xi-sdk-resellers-csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi-sdk-resellers-csharp.Client.Configuration.MergeConfigurations(
                xi-sdk-resellers-csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new xi-sdk-resellers-csharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new xi-sdk-resellers-csharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = xi-sdk-resellers-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV4Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersV4Api(xi-sdk-resellers-csharp.Client.ISynchronousClient client, xi-sdk-resellers-csharp.Client.IAsynchronousClient asyncClient, xi-sdk-resellers-csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi-sdk-resellers-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi-sdk-resellers-csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi-sdk-resellers-csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi-sdk-resellers-csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi-sdk-resellers-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Order The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderCreateResponse</returns>
        public OrderCreateResponse PostV4Ordercreate(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderCreateResponse> localVarResponse = PostV4OrdercreateWithHttpInfo(orderCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Order The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        public xi-sdk-resellers-csharp.Client.ApiResponse<OrderCreateResponse> PostV4OrdercreateWithHttpInfo(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCreateRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordercreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderCreateResponse>("/orders/v4/ordercreate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordercreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Order The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        public async System.Threading.Tasks.Task<OrderCreateResponse> PostV4OrdercreateAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderCreateResponse> localVarResponse = await PostV4OrdercreateWithHttpInfoAsync(orderCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Order The order create transaction is a real-time transaction that allows customers to place standard product and direct ship (licensing and warranties) orders with Ingram Micro using API.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-resellers-csharp.Client.ApiResponse<OrderCreateResponse>> PostV4OrdercreateWithHttpInfoAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCreateRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordercreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderCreateResponse>("/orders/v4/ordercreate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordercreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDeleteResponse</returns>
        public OrderDeleteResponse PostV4Orderdelete(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderDeleteResponse> localVarResponse = PostV4OrderdeleteWithHttpInfo(orderDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Order A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDeleteResponse</returns>
        public xi-sdk-resellers-csharp.Client.ApiResponse<OrderDeleteResponse> PostV4OrderdeleteWithHttpInfo(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderDeleteRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Orderdelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderDeleteResponse>("/orders/v4/orderdelete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Orderdelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDeleteResponse</returns>
        public async System.Threading.Tasks.Task<OrderDeleteResponse> PostV4OrderdeleteAsync(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderDeleteResponse> localVarResponse = await PostV4OrderdeleteWithHttpInfoAsync(orderDeleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Order A real-time request to delete a previously accepted order must be submitted before the order is released to Ingram Micro’s warehouse. After release the order is no longer eligible for deletion. Order delete transaction submitted after the order is released will be rejected and will not be applied. *Direct ship orders cannot be deleted. Contact your sales rep for assistance.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDeleteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-resellers-csharp.Client.ApiResponse<OrderDeleteResponse>> PostV4OrderdeleteWithHttpInfoAsync(OrderDeleteRequest? orderDeleteRequest = default(OrderDeleteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderDeleteRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Orderdelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderDeleteResponse>("/orders/v4/orderdelete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Orderdelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDetailResponse</returns>
        public OrderDetailResponse PostV4Orderdetails(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = PostV4OrderdetailsWithHttpInfo(orderDetailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        public xi-sdk-resellers-csharp.Client.ApiResponse<OrderDetailResponse> PostV4OrderdetailsWithHttpInfo(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderDetailRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Orderdetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderDetailResponse>("/orders/v4/orderdetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Orderdetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        public async System.Threading.Tasks.Task<OrderDetailResponse> PostV4OrderdetailsAsync(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = await PostV4OrderdetailsWithHttpInfoAsync(orderDetailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details A real-time request that allows the customer to query Ingram Micro for detailed information for a specific open or shipped order. Orders are searched using Ingram Micro Sales Order Number.
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-resellers-csharp.Client.ApiResponse<OrderDetailResponse>> PostV4OrderdetailsWithHttpInfoAsync(OrderDetailRequest? orderDetailRequest = default(OrderDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderDetailRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Orderdetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderDetailResponse>("/orders/v4/orderdetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Orderdetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify an Existing Order The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderModifyResponse</returns>
        public OrderModifyResponse PostV4Ordermodify(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderModifyResponse> localVarResponse = PostV4OrdermodifyWithHttpInfo(orderModifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an Existing Order The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderModifyResponse</returns>
        public xi-sdk-resellers-csharp.Client.ApiResponse<OrderModifyResponse> PostV4OrdermodifyWithHttpInfo(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderModifyRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordermodify";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderModifyResponse>("/orders/v4/ordermodify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordermodify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify an Existing Order The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderModifyResponse</returns>
        public async System.Threading.Tasks.Task<OrderModifyResponse> PostV4OrdermodifyAsync(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderModifyResponse> localVarResponse = await PostV4OrdermodifyWithHttpInfoAsync(orderModifyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an Existing Order The order modify transaction allows for changes to be made after the order creation process but before the order is released to Ingram Micro’s warehouse system.  Order modify transaction submitted after the order is released will be rejected and will not be applied.  Types of modifications allowable: Order release, add comment, and carrier change. NOTE - Direct Ship orders cannot be modified. 
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderModifyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderModifyResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-resellers-csharp.Client.ApiResponse<OrderModifyResponse>> PostV4OrdermodifyWithHttpInfoAsync(OrderModifyRequest? orderModifyRequest = default(OrderModifyRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderModifyRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordermodify";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderModifyResponse>("/orders/v4/ordermodify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordermodify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Search Search your orders using various search parameters
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderSearchResponse</returns>
        public OrderSearchResponse PostV4Ordersearch(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderSearchResponse> localVarResponse = PostV4OrdersearchWithHttpInfo(orderSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Search Search your orders using various search parameters
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        public xi-sdk-resellers-csharp.Client.ApiResponse<OrderSearchResponse> PostV4OrdersearchWithHttpInfo(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0)
        {
            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderSearchRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordersearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderSearchResponse>("/orders/v4/orderlookup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordersearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Search Search your orders using various search parameters
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        public async System.Threading.Tasks.Task<OrderSearchResponse> PostV4OrdersearchAsync(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi-sdk-resellers-csharp.Client.ApiResponse<OrderSearchResponse> localVarResponse = await PostV4OrdersearchWithHttpInfoAsync(orderSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Search Search your orders using various search parameters
        /// </summary>
        /// <exception cref="xi-sdk-resellers-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi-sdk-resellers-csharp.Client.ApiResponse<OrderSearchResponse>> PostV4OrdersearchWithHttpInfoAsync(OrderSearchRequest? orderSearchRequest = default(OrderSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi-sdk-resellers-csharp.Client.RequestOptions localVarRequestOptions = new xi-sdk-resellers-csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = xi-sdk-resellers-csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderSearchRequest;

            localVarRequestOptions.Operation = "OrdersV4Api.PostV4Ordersearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (application) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderSearchResponse>("/orders/v4/orderlookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV4Ordersearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
