/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.csharp.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.csharp.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.csharp.Model
{
    /// <summary>
    /// PriceAndAvailabilityRequestServicerequestPriceandstockrequest
    /// </summary>
    [DataContract(Name = "priceAndAvailabilityRequest_servicerequest_priceandstockrequest")]
    public partial class PriceAndAvailabilityRequestServicerequestPriceandstockrequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceAndAvailabilityRequestServicerequestPriceandstockrequest" /> class.
        /// </summary>
        /// <param name="showwarehouseavailability">True/false to show the availability of individual warehouses.</param>
        /// <param name="extravailabilityflag">Y/N to show extra availability flag.</param>
        /// <param name="includeallsystems">Flag to indicate if the price and stock information is required for all Ingram Micro systems..</param>
        /// <param name="item">item.</param>
        public PriceAndAvailabilityRequestServicerequestPriceandstockrequest(string showwarehouseavailability = default(string), string extravailabilityflag = default(string), bool includeallsystems = default(bool), List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> item = default(List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner>))
        {
            this.Showwarehouseavailability = showwarehouseavailability;
            this.Extravailabilityflag = extravailabilityflag;
            this.Includeallsystems = includeallsystems;
            this.Item = item;
        }

        /// <summary>
        /// True/false to show the availability of individual warehouses
        /// </summary>
        /// <value>True/false to show the availability of individual warehouses</value>
        [DataMember(Name = "showwarehouseavailability", EmitDefaultValue = false)]
        public string Showwarehouseavailability { get; set; }

        /// <summary>
        /// Y/N to show extra availability flag
        /// </summary>
        /// <value>Y/N to show extra availability flag</value>
        [DataMember(Name = "extravailabilityflag", EmitDefaultValue = false)]
        public string Extravailabilityflag { get; set; }

        /// <summary>
        /// Flag to indicate if the price and stock information is required for all Ingram Micro systems.
        /// </summary>
        /// <value>Flag to indicate if the price and stock information is required for all Ingram Micro systems.</value>
        [DataMember(Name = "includeallsystems", EmitDefaultValue = true)]
        public bool Includeallsystems { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name = "item", EmitDefaultValue = false)]
        public List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> Item { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceAndAvailabilityRequestServicerequestPriceandstockrequest {\n");
            sb.Append("  Showwarehouseavailability: ").Append(Showwarehouseavailability).Append("\n");
            sb.Append("  Extravailabilityflag: ").Append(Extravailabilityflag).Append("\n");
            sb.Append("  Includeallsystems: ").Append(Includeallsystems).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
