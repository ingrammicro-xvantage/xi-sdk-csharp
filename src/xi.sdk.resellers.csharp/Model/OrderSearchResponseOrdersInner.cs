/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.csharp.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.csharp.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.csharp.Model
{
    /// <summary>
    /// OrderSearchResponseOrdersInner
    /// </summary>
    [DataContract(Name = "OrderSearch_Response_orders_inner")]
    public partial class OrderSearchResponseOrdersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSearchResponseOrdersInner" /> class.
        /// </summary>
        /// <param name="ingramOrderNumber">The Ingram Micro order number..</param>
        /// <param name="ingramOrderDate">The date the order was created(UTC)..</param>
        /// <param name="customerOrderNumber">The reseller&#39;s order number for reference in their system..</param>
        /// <param name="vendorSalesOrderNumber">The vendor&#39;s order number.(only for D-Type Orders).</param>
        /// <param name="vendorName">The name of the vendor..</param>
        /// <param name="endUserCompanyName">The company name of the end user/customer..</param>
        /// <param name="orderTotal">The total of the order..</param>
        /// <param name="orderStatus">The header-level status of the order.(OPEN/CLOSED/CANCELLED).</param>
        /// <param name="subOrders">Individual Ingram Micro order numbers associated with a single reseller PO..</param>
        /// <param name="links">links.</param>
        public OrderSearchResponseOrdersInner(string ingramOrderNumber = default(string), string ingramOrderDate = default(string), string customerOrderNumber = default(string), string vendorSalesOrderNumber = default(string), string vendorName = default(string), string endUserCompanyName = default(string), decimal orderTotal = default(decimal), string orderStatus = default(string), List<OrderSearchResponseOrdersInnerSubOrdersInner> subOrders = default(List<OrderSearchResponseOrdersInnerSubOrdersInner>), OrderSearchResponseOrdersInnerLinks links = default(OrderSearchResponseOrdersInnerLinks))
        {
            this.IngramOrderNumber = ingramOrderNumber;
            this.IngramOrderDate = ingramOrderDate;
            this.CustomerOrderNumber = customerOrderNumber;
            this.VendorSalesOrderNumber = vendorSalesOrderNumber;
            this.VendorName = vendorName;
            this.EndUserCompanyName = endUserCompanyName;
            this.OrderTotal = orderTotal;
            this.OrderStatus = orderStatus;
            this.SubOrders = subOrders;
            this.Links = links;
        }

        /// <summary>
        /// The Ingram Micro order number.
        /// </summary>
        /// <value>The Ingram Micro order number.</value>
        [DataMember(Name = "ingramOrderNumber", EmitDefaultValue = false)]
        public string IngramOrderNumber { get; set; }

        /// <summary>
        /// The date the order was created(UTC).
        /// </summary>
        /// <value>The date the order was created(UTC).</value>
        [DataMember(Name = "ingramOrderDate", EmitDefaultValue = false)]
        public string IngramOrderDate { get; set; }

        /// <summary>
        /// The reseller&#39;s order number for reference in their system.
        /// </summary>
        /// <value>The reseller&#39;s order number for reference in their system.</value>
        [DataMember(Name = "customerOrderNumber", EmitDefaultValue = false)]
        public string CustomerOrderNumber { get; set; }

        /// <summary>
        /// The vendor&#39;s order number.(only for D-Type Orders)
        /// </summary>
        /// <value>The vendor&#39;s order number.(only for D-Type Orders)</value>
        [DataMember(Name = "vendorSalesOrderNumber", EmitDefaultValue = false)]
        public string VendorSalesOrderNumber { get; set; }

        /// <summary>
        /// The name of the vendor.
        /// </summary>
        /// <value>The name of the vendor.</value>
        [DataMember(Name = "vendorName", EmitDefaultValue = false)]
        public string VendorName { get; set; }

        /// <summary>
        /// The company name of the end user/customer.
        /// </summary>
        /// <value>The company name of the end user/customer.</value>
        [DataMember(Name = "endUserCompanyName", EmitDefaultValue = false)]
        public string EndUserCompanyName { get; set; }

        /// <summary>
        /// The total of the order.
        /// </summary>
        /// <value>The total of the order.</value>
        [DataMember(Name = "orderTotal", EmitDefaultValue = false)]
        public decimal OrderTotal { get; set; }

        /// <summary>
        /// The header-level status of the order.(OPEN/CLOSED/CANCELLED)
        /// </summary>
        /// <value>The header-level status of the order.(OPEN/CLOSED/CANCELLED)</value>
        [DataMember(Name = "orderStatus", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Individual Ingram Micro order numbers associated with a single reseller PO.
        /// </summary>
        /// <value>Individual Ingram Micro order numbers associated with a single reseller PO.</value>
        [DataMember(Name = "subOrders", EmitDefaultValue = false)]
        public List<OrderSearchResponseOrdersInnerSubOrdersInner> SubOrders { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public OrderSearchResponseOrdersInnerLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderSearchResponseOrdersInner {\n");
            sb.Append("  IngramOrderNumber: ").Append(IngramOrderNumber).Append("\n");
            sb.Append("  IngramOrderDate: ").Append(IngramOrderDate).Append("\n");
            sb.Append("  CustomerOrderNumber: ").Append(CustomerOrderNumber).Append("\n");
            sb.Append("  VendorSalesOrderNumber: ").Append(VendorSalesOrderNumber).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  EndUserCompanyName: ").Append(EndUserCompanyName).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  SubOrders: ").Append(SubOrders).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
