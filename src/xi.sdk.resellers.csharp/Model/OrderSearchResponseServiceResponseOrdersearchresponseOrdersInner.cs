/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.csharp.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.csharp.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.csharp.Model
{
    /// <summary>
    /// OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner
    /// </summary>
    [DataContract(Name = "orderSearchResponse_serviceResponse_ordersearchresponse_orders_inner")]
    public partial class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner" /> class.
        /// </summary>
        /// <param name="ordernumber">Ingram micro sales order number (required).</param>
        /// <param name="entrytimestamp">The order creation date-time in UTC format (required).</param>
        /// <param name="customerordernumber">PO/Order number submitted while creating the order.</param>
        /// <param name="suborders">An order MAY get divided into various sub orders, for example if the SKUs are being shipped from different warehouse..</param>
        /// <param name="links">links.</param>
        public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner(string ordernumber = default(string), string entrytimestamp = default(string), string customerordernumber = default(string), List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner> suborders = default(List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner>), OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerLinks links = default(OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerLinks))
        {
            // to ensure "ordernumber" is required (not null)
            if (ordernumber == null)
            {
                throw new ArgumentNullException("ordernumber is a required property for OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner and cannot be null");
            }
            this.Ordernumber = ordernumber;
            // to ensure "entrytimestamp" is required (not null)
            if (entrytimestamp == null)
            {
                throw new ArgumentNullException("entrytimestamp is a required property for OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner and cannot be null");
            }
            this.Entrytimestamp = entrytimestamp;
            this.Customerordernumber = customerordernumber;
            this.Suborders = suborders;
            this.Links = links;
        }

        /// <summary>
        /// Ingram micro sales order number
        /// </summary>
        /// <value>Ingram micro sales order number</value>
        [DataMember(Name = "ordernumber", IsRequired = true, EmitDefaultValue = true)]
        public string Ordernumber { get; set; }

        /// <summary>
        /// The order creation date-time in UTC format
        /// </summary>
        /// <value>The order creation date-time in UTC format</value>
        [DataMember(Name = "entrytimestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Entrytimestamp { get; set; }

        /// <summary>
        /// PO/Order number submitted while creating the order
        /// </summary>
        /// <value>PO/Order number submitted while creating the order</value>
        [DataMember(Name = "customerordernumber", EmitDefaultValue = false)]
        public string Customerordernumber { get; set; }

        /// <summary>
        /// An order MAY get divided into various sub orders, for example if the SKUs are being shipped from different warehouse.
        /// </summary>
        /// <value>An order MAY get divided into various sub orders, for example if the SKUs are being shipped from different warehouse.</value>
        [DataMember(Name = "suborders", EmitDefaultValue = false)]
        public List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner> Suborders { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInner {\n");
            sb.Append("  Ordernumber: ").Append(Ordernumber).Append("\n");
            sb.Append("  Entrytimestamp: ").Append(Entrytimestamp).Append("\n");
            sb.Append("  Customerordernumber: ").Append(Customerordernumber).Append("\n");
            sb.Append("  Suborders: ").Append(Suborders).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
