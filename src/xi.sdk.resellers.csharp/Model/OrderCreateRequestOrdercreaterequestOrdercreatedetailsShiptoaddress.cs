/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = xi.sdk.resellers.csharp.Client.FileParameter;
using OpenAPIDateConverter = xi.sdk.resellers.csharp.Client.OpenAPIDateConverter;

namespace xi.sdk.resellers.csharp.Model
{
    /// <summary>
    /// OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress
    /// </summary>
    [DataContract(Name = "orderCreateRequest_ordercreaterequest_ordercreatedetails_shiptoaddress")]
    public partial class OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress" /> class.
        /// </summary>
        /// <param name="attention">Customer contact name.</param>
        /// <param name="addressline1">Company Name or person to deliver. *If there isn’t an attention line please add the company name on address line 1.   UPS and FedEx will create surcharges if address line 1 contains a physical address. (required).</param>
        /// <param name="addressline2">Street address for delivery (required).</param>
        /// <param name="addressline3">Continuation of address line 2.</param>
        /// <param name="city">Ship to city (required).</param>
        /// <param name="state">Ship to State or Region (required).</param>
        /// <param name="postalcode">Ship to Zip code or Postal code (required).</param>
        /// <param name="countrycode">Ship to country.</param>
        public OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress(string attention = default(string), string addressline1 = default(string), string addressline2 = default(string), string addressline3 = default(string), string city = default(string), string state = default(string), string postalcode = default(string), string countrycode = default(string))
        {
            // to ensure "addressline1" is required (not null)
            if (addressline1 == null)
            {
                throw new ArgumentNullException("addressline1 is a required property for OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress and cannot be null");
            }
            this.Addressline1 = addressline1;
            // to ensure "addressline2" is required (not null)
            if (addressline2 == null)
            {
                throw new ArgumentNullException("addressline2 is a required property for OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress and cannot be null");
            }
            this.Addressline2 = addressline2;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress and cannot be null");
            }
            this.State = state;
            // to ensure "postalcode" is required (not null)
            if (postalcode == null)
            {
                throw new ArgumentNullException("postalcode is a required property for OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress and cannot be null");
            }
            this.Postalcode = postalcode;
            this.Attention = attention;
            this.Addressline3 = addressline3;
            this.Countrycode = countrycode;
        }

        /// <summary>
        /// Customer contact name
        /// </summary>
        /// <value>Customer contact name</value>
        /// <example>“Mr. Customer”</example>
        [DataMember(Name = "attention", EmitDefaultValue = false)]
        public string Attention { get; set; }

        /// <summary>
        /// Company Name or person to deliver. *If there isn’t an attention line please add the company name on address line 1.   UPS and FedEx will create surcharges if address line 1 contains a physical address.
        /// </summary>
        /// <value>Company Name or person to deliver. *If there isn’t an attention line please add the company name on address line 1.   UPS and FedEx will create surcharges if address line 1 contains a physical address.</value>
        /// <example>“Ingram Micro”</example>
        [DataMember(Name = "addressline1", IsRequired = true, EmitDefaultValue = true)]
        public string Addressline1 { get; set; }

        /// <summary>
        /// Street address for delivery
        /// </summary>
        /// <value>Street address for delivery</value>
        /// <example>3351 Michelson Dr</example>
        [DataMember(Name = "addressline2", IsRequired = true, EmitDefaultValue = true)]
        public string Addressline2 { get; set; }

        /// <summary>
        /// Continuation of address line 2
        /// </summary>
        /// <value>Continuation of address line 2</value>
        /// <example>Ste 100 or ship to phone number</example>
        [DataMember(Name = "addressline3", EmitDefaultValue = false)]
        public string Addressline3 { get; set; }

        /// <summary>
        /// Ship to city
        /// </summary>
        /// <value>Ship to city</value>
        /// <example>Irvine</example>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Ship to State or Region
        /// </summary>
        /// <value>Ship to State or Region</value>
        /// <example>CA</example>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Ship to Zip code or Postal code
        /// </summary>
        /// <value>Ship to Zip code or Postal code</value>
        /// <example>92712</example>
        [DataMember(Name = "postalcode", IsRequired = true, EmitDefaultValue = true)]
        public string Postalcode { get; set; }

        /// <summary>
        /// Ship to country
        /// </summary>
        /// <value>Ship to country</value>
        /// <example>US</example>
        [DataMember(Name = "countrycode", EmitDefaultValue = false)]
        public string Countrycode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress {\n");
            sb.Append("  Attention: ").Append(Attention).Append("\n");
            sb.Append("  Addressline1: ").Append(Addressline1).Append("\n");
            sb.Append("  Addressline2: ").Append(Addressline2).Append("\n");
            sb.Append("  Addressline3: ").Append(Addressline3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Postalcode: ").Append(Postalcode).Append("\n");
            sb.Append("  Countrycode: ").Append(Countrycode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Attention (string) maxLength
            if (this.Attention != null && this.Attention.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attention, length must be less than 35.", new [] { "Attention" });
            }

            // Addressline1 (string) maxLength
            if (this.Addressline1 != null && this.Addressline1.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Addressline1, length must be less than 35.", new [] { "Addressline1" });
            }

            // Addressline2 (string) maxLength
            if (this.Addressline2 != null && this.Addressline2.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Addressline2, length must be less than 35.", new [] { "Addressline2" });
            }

            // Addressline3 (string) maxLength
            if (this.Addressline3 != null && this.Addressline3.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Addressline3, length must be less than 35.", new [] { "Addressline3" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 21)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 21.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 2.", new [] { "State" });
            }

            // Postalcode (string) maxLength
            if (this.Postalcode != null && this.Postalcode.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Postalcode, length must be less than 9.", new [] { "Postalcode" });
            }

            // Countrycode (string) maxLength
            if (this.Countrycode != null && this.Countrycode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Countrycode, length must be less than 2.", new [] { "Countrycode" });
            }

            yield break;
        }
    }

}
