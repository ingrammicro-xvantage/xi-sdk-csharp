/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.csharp.Client;
using xi.sdk.resellers.csharp.Model;

namespace xi.sdk.resellers.csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Renewals Details
        /// </summary>
        /// <remarks>
        /// The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>RenewalsDetailsResponse</returns>
        RenewalsDetailsResponse GetResellersV6Renewalsdetails(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?));

        /// <summary>
        /// Renewals Details
        /// </summary>
        /// <remarks>
        /// The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of RenewalsDetailsResponse</returns>
        ApiResponse<RenewalsDetailsResponse> GetResellersV6RenewalsdetailsWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?));
        /// <summary>
        /// Renewals Search
        /// </summary>
        /// <remarks>
        /// The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <returns>RenewalsSearchResponse</returns>
        RenewalsSearchResponse PostRenewalssearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?));

        /// <summary>
        /// Renewals Search
        /// </summary>
        /// <remarks>
        /// The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of RenewalsSearchResponse</returns>
        ApiResponse<RenewalsSearchResponse> PostRenewalssearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Renewals Details
        /// </summary>
        /// <remarks>
        /// The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewalsDetailsResponse</returns>
        System.Threading.Tasks.Task<RenewalsDetailsResponse> GetResellersV6RenewalsdetailsAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renewals Details
        /// </summary>
        /// <remarks>
        /// The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewalsDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RenewalsDetailsResponse>> GetResellersV6RenewalsdetailsWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Renewals Search
        /// </summary>
        /// <remarks>
        /// The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewalsSearchResponse</returns>
        System.Threading.Tasks.Task<RenewalsSearchResponse> PostRenewalssearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renewals Search
        /// </summary>
        /// <remarks>
        /// The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewalsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RenewalsSearchResponse>> PostRenewalssearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApi : IRenewalsApiSync, IRenewalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RenewalsApi : IDisposable, IRenewalsApi
    {
        private xi.sdk.resellers.csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public RenewalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public RenewalsApi(string basePath)
        {
            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public RenewalsApi(xi.sdk.resellers.csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RenewalsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RenewalsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RenewalsApi(HttpClient client, xi.sdk.resellers.csharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public RenewalsApi(xi.sdk.resellers.csharp.Client.ISynchronousClient client, xi.sdk.resellers.csharp.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Renewals Details The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>RenewalsDetailsResponse</returns>
        public RenewalsDetailsResponse GetResellersV6Renewalsdetails(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsDetailsResponse> localVarResponse = GetResellersV6RenewalsdetailsWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, renewalId, iMSenderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renewals Details The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <returns>ApiResponse of RenewalsDetailsResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsDetailsResponse> GetResellersV6RenewalsdetailsWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'renewalId' is set
            if (renewalId == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'renewalId' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("renewalId", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(renewalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RenewalsDetailsResponse>("/resellers/v6/renewals/{renewalId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Renewalsdetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renewals Details The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewalsDetailsResponse</returns>
        public async System.Threading.Tasks.Task<RenewalsDetailsResponse> GetResellersV6RenewalsdetailsAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsDetailsResponse> localVarResponse = await GetResellersV6RenewalsdetailsWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, renewalId, iMSenderID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renewals Details The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="renewalId">Unique Ingram renewal ID.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewalsDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsDetailsResponse>> GetResellersV6RenewalsdetailsWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string renewalId, string? iMSenderID = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling RenewalsApi->GetResellersV6Renewalsdetails");

            // verify the required parameter 'renewalId' is set
            if (renewalId == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'renewalId' when calling RenewalsApi->GetResellersV6Renewalsdetails");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("renewalId", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(renewalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RenewalsDetailsResponse>("/resellers/v6/renewals/{renewalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResellersV6Renewalsdetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renewals Search The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <returns>RenewalsSearchResponse</returns>
        public RenewalsSearchResponse PostRenewalssearch(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsSearchResponse> localVarResponse = PostRenewalssearchWithHttpInfo(iMCustomerNumber, iMCountryCode, iMCorrelationID, contentType, iMSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renewals Search The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of RenewalsSearchResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsSearchResponse> PostRenewalssearchWithHttpInfo(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling RenewalsApi->PostRenewalssearch");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (ingramPurchaseOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ingramPurchaseOrderNumber", ingramPurchaseOrderNumber));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Content type", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = renewalsSearchRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RenewalsSearchResponse>("/resellers/v6/renewals/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRenewalssearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renewals Search The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewalsSearchResponse</returns>
        public async System.Threading.Tasks.Task<RenewalsSearchResponse> PostRenewalssearchAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsSearchResponse> localVarResponse = await PostRenewalssearchWithHttpInfoAsync(iMCustomerNumber, iMCountryCode, iMCorrelationID, contentType, iMSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renewals Search The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction across all the systems.</param>
        /// <param name="contentType">The media type for JSON Request.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany (optional)</param>
        /// <param name="customerOrderNumber">The reseller&#39;s unique PO/Order number. (optional)</param>
        /// <param name="ingramPurchaseOrderNumber">Sales order number. (optional)</param>
        /// <param name="serialNumber">A serial number of the product. (optional)</param>
        /// <param name="page">Number of page. (optional)</param>
        /// <param name="size">The submitted pagesize, default is 25. (optional)</param>
        /// <param name="sort">Refers to the column selected to apply the sorting criteria. (optional)</param>
        /// <param name="renewalsSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewalsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<RenewalsSearchResponse>> PostRenewalssearchWithHttpInfoAsync(string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string contentType, string? iMSenderID = default(string?), string? customerOrderNumber = default(string?), string? ingramPurchaseOrderNumber = default(string?), string? serialNumber = default(string?), string? page = default(string?), string? size = default(string?), string? sort = default(string?), RenewalsSearchRequest? renewalsSearchRequest = default(RenewalsSearchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling RenewalsApi->PostRenewalssearch");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'contentType' when calling RenewalsApi->PostRenewalssearch");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (customerOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerOrderNumber", customerOrderNumber));
            }
            if (ingramPurchaseOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ingramPurchaseOrderNumber", ingramPurchaseOrderNumber));
            }
            if (serialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "serialNumber", serialNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Content type", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = renewalsSearchRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RenewalsSearchResponse>("/resellers/v6/renewals/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRenewalssearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
