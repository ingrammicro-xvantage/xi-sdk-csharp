/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.csharp.Client;
using xi.sdk.resellers.csharp.Model;

namespace xi.sdk.resellers.csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV6ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Order Details v6
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>OrderDetailResponse</returns>
        OrderDetailResponse GetOrderdetailsV6(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?));

        /// <summary>
        /// Get Order Details v6
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        ApiResponse<OrderDetailResponse> GetOrderdetailsV6WithHttpInfo(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV6ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Order Details v6
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        System.Threading.Tasks.Task<OrderDetailResponse> GetOrderdetailsV6Async(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Details v6
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailResponse>> GetOrderdetailsV6WithHttpInfoAsync(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV6Api : IOrdersV6ApiSync, IOrdersV6ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersV6Api : IDisposable, IOrdersV6Api
    {
        private xi.sdk.resellers.csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrdersV6Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrdersV6Api(string basePath)
        {
            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrdersV6Api(xi.sdk.resellers.csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV6Api(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV6Api(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV6Api(HttpClient client, xi.sdk.resellers.csharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV6Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrdersV6Api(xi.sdk.resellers.csharp.Client.ISynchronousClient client, xi.sdk.resellers.csharp.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Order Details v6 Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>OrderDetailResponse</returns>
        public OrderDetailResponse GetOrderdetailsV6(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = GetOrderdetailsV6WithHttpInfo(ordernumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details v6 Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> GetOrderdetailsV6WithHttpInfo(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersV6Api->GetOrderdetailsV6");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (simulateStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "simulateStatus", simulateStatus));
            }
            if (isIml != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isIml", isIml));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderDetailResponse>("/resellers/v6/orders/{ordernumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderdetailsV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details v6 Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        public async System.Threading.Tasks.Task<OrderDetailResponse> GetOrderdetailsV6Async(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = await GetOrderdetailsV6WithHttpInfoAsync(ordernumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, iMSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details v6 Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">The Ingram Micro sales order number.</param>
        /// <param name="iMCustomerNumber">Your unique Ingram Micro customer number.</param>
        /// <param name="iMCountryCode">Two-character ISO country code.</param>
        /// <param name="iMCorrelationID">Unique transaction number to identify each transaction accross all the systems.</param>
        /// <param name="iMSenderID">Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)</param>
        /// <param name="ingramOrderDate">The date and time in UTC format that the order was created. (optional)</param>
        /// <param name="vendorNumber">Vendor Number. (optional)</param>
        /// <param name="simulateStatus">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="isIml">True/False only for IML customers. (optional)</param>
        /// <param name="regionCode">Region code for sandbox testing - Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse>> GetOrderdetailsV6WithHttpInfoAsync(string ordernumber, string iMCustomerNumber, string iMCountryCode, string iMCorrelationID, string? iMSenderID = default(string?), DateTime? ingramOrderDate = default(DateTime?), string? vendorNumber = default(string?), string? simulateStatus = default(string?), bool? isIml = default(bool?), string? regionCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCustomerNumber' is set
            if (iMCustomerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCustomerNumber' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCountryCode' is set
            if (iMCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCountryCode' when calling OrdersV6Api->GetOrderdetailsV6");

            // verify the required parameter 'iMCorrelationID' is set
            if (iMCorrelationID == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'iMCorrelationID' when calling OrdersV6Api->GetOrderdetailsV6");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            if (ingramOrderDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ingramOrderDate", ingramOrderDate));
            }
            if (vendorNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "vendorNumber", vendorNumber));
            }
            if (simulateStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "simulateStatus", simulateStatus));
            }
            if (isIml != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isIml", isIml));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }
            localVarRequestOptions.HeaderParameters.Add("IM-CustomerNumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCustomerNumber)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CountryCode", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCountryCode)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IM-CorrelationID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMCorrelationID)); // header parameter
            if (iMSenderID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("IM-SenderID", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(iMSenderID)); // header parameter
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderDetailResponse>("/resellers/v6/orders/{ordernumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderdetailsV6", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
