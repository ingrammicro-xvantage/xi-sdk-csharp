/*
 * Reseller API Documentation
 *
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using xi.sdk.resellers.csharp.Client;
using xi.sdk.resellers.csharp.Model;

namespace xi.sdk.resellers.csharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV5ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel an Existing Order
        /// </summary>
        /// <remarks>
        /// This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <returns>OrderCancelResponse</returns>
        OrderCancelResponse DeleteOrdersOrderNumber(string ordernumber, string customerNumber, string isoCountryCode, string entryDate);

        /// <summary>
        /// Cancel an Existing Order
        /// </summary>
        /// <remarks>
        /// This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <returns>ApiResponse of OrderCancelResponse</returns>
        ApiResponse<OrderCancelResponse> DeleteOrdersOrderNumberWithHttpInfo(string ordernumber, string customerNumber, string isoCountryCode, string entryDate);
        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <returns>OrderSearchResponse</returns>
        OrderSearchResponse GetOrdersSearch(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?));

        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        ApiResponse<OrderSearchResponse> GetOrdersSearchWithHttpInfo(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?));
        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <returns>OrderDetailResponse</returns>
        OrderDetailResponse GetV5OrdersDetails(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?));

        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        ApiResponse<OrderDetailResponse> GetV5OrdersDetailsWithHttpInfo(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?));
        /// <summary>
        /// Create a New Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <returns>OrderCreateResponse</returns>
        OrderCreateResponse PostV5OrdersCreate(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?));

        /// <summary>
        /// Create a New Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        ApiResponse<OrderCreateResponse> PostV5OrdersCreateWithHttpInfo(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV5ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel an Existing Order
        /// </summary>
        /// <remarks>
        /// This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCancelResponse</returns>
        System.Threading.Tasks.Task<OrderCancelResponse> DeleteOrdersOrderNumberAsync(string ordernumber, string customerNumber, string isoCountryCode, string entryDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an Existing Order
        /// </summary>
        /// <remarks>
        /// This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCancelResponse>> DeleteOrdersOrderNumberWithHttpInfoAsync(string ordernumber, string customerNumber, string isoCountryCode, string entryDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        System.Threading.Tasks.Task<OrderSearchResponse> GetOrdersSearchAsync(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search your Orders
        /// </summary>
        /// <remarks>
        /// Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSearchResponse>> GetOrdersSearchWithHttpInfoAsync(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        System.Threading.Tasks.Task<OrderDetailResponse> GetV5OrdersDetailsAsync(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Details
        /// </summary>
        /// <remarks>
        /// Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailResponse>> GetV5OrdersDetailsWithHttpInfoAsync(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a New Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        System.Threading.Tasks.Task<OrderCreateResponse> PostV5OrdersCreateAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a New Order
        /// </summary>
        /// <remarks>
        /// Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </remarks>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCreateResponse>> PostV5OrdersCreateWithHttpInfoAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersV5Api : IOrdersV5ApiSync, IOrdersV5ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersV5Api : IDisposable, IOrdersV5Api
    {
        private xi.sdk.resellers.csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrdersV5Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrdersV5Api(string basePath)
        {
            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrdersV5Api(xi.sdk.resellers.csharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV5Api(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV5Api(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                new xi.sdk.resellers.csharp.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OrdersV5Api(HttpClient client, xi.sdk.resellers.csharp.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = xi.sdk.resellers.csharp.Client.Configuration.MergeConfigurations(
                xi.sdk.resellers.csharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new xi.sdk.resellers.csharp.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersV5Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrdersV5Api(xi.sdk.resellers.csharp.Client.ISynchronousClient client, xi.sdk.resellers.csharp.Client.IAsynchronousClient asyncClient, xi.sdk.resellers.csharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = xi.sdk.resellers.csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public xi.sdk.resellers.csharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public xi.sdk.resellers.csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel an Existing Order This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <returns>OrderCancelResponse</returns>
        public OrderCancelResponse DeleteOrdersOrderNumber(string ordernumber, string customerNumber, string isoCountryCode, string entryDate)
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderCancelResponse> localVarResponse = DeleteOrdersOrderNumberWithHttpInfo(ordernumber, customerNumber, isoCountryCode, entryDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an Existing Order This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <returns>ApiResponse of OrderCancelResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<OrderCancelResponse> DeleteOrdersOrderNumberWithHttpInfo(string ordernumber, string customerNumber, string isoCountryCode, string entryDate)
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customerNumber' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'isoCountryCode' is set
            if (isoCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isoCountryCode' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'entryDate' is set
            if (entryDate == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'entryDate' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerNumber", customerNumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isoCountryCode", isoCountryCode));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "entryDate", entryDate));

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OrderCancelResponse>("/resellers/v5/Orders/{ordernumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrdersOrderNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an Existing Order This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCancelResponse</returns>
        public async System.Threading.Tasks.Task<OrderCancelResponse> DeleteOrdersOrderNumberAsync(string ordernumber, string customerNumber, string isoCountryCode, string entryDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderCancelResponse> localVarResponse = await DeleteOrdersOrderNumberWithHttpInfoAsync(ordernumber, customerNumber, isoCountryCode, entryDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an Existing Order This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isoCountryCode">2 chars ISO country code</param>
        /// <param name="entryDate">Order entry date (yyyy-mm-dd)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCancelResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<OrderCancelResponse>> DeleteOrdersOrderNumberWithHttpInfoAsync(string ordernumber, string customerNumber, string isoCountryCode, string entryDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customerNumber' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'isoCountryCode' is set
            if (isoCountryCode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isoCountryCode' when calling OrdersV5Api->DeleteOrdersOrderNumber");

            // verify the required parameter 'entryDate' is set
            if (entryDate == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'entryDate' when calling OrdersV5Api->DeleteOrdersOrderNumber");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerNumber", customerNumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isoCountryCode", isoCountryCode));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "entryDate", entryDate));

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OrderCancelResponse>("/resellers/v5/Orders/{ordernumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrdersOrderNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your Orders Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <returns>OrderSearchResponse</returns>
        public OrderSearchResponse GetOrdersSearch(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderSearchResponse> localVarResponse = GetOrdersSearchWithHttpInfo(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your Orders Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <returns>ApiResponse of OrderSearchResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<OrderSearchResponse> GetOrdersSearchWithHttpInfo(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?))
        {
            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customerNumber' when calling OrdersV5Api->GetOrdersSearch");

            // verify the required parameter 'isocountrycode' is set
            if (isocountrycode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isocountrycode' when calling OrdersV5Api->GetOrdersSearch");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerNumber", customerNumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isocountrycode", isocountrycode));
            if (ordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ordernumber", ordernumber));
            }
            if (customerordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerordernumber", customerordernumber));
            }
            if (orderstatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "orderstatus", orderstatus));
            }
            if (startcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "startcreatetimestamp", startcreatetimestamp));
            }
            if (endcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "endcreatetimestamp", endcreatetimestamp));
            }
            if (pagesize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "pagesize", pagesize));
            }
            if (pagenumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "pagenumber", pagenumber));
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderSearchResponse>("/resellers/v5/Orders/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrdersSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search your Orders Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSearchResponse</returns>
        public async System.Threading.Tasks.Task<OrderSearchResponse> GetOrdersSearchAsync(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderSearchResponse> localVarResponse = await GetOrdersSearchWithHttpInfoAsync(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search your Orders Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 char iso country code</param>
        /// <param name="ordernumber">Ingram sales order number (optional)</param>
        /// <param name="customerordernumber">Search using your PO/Order number (optional)</param>
        /// <param name="orderstatus">Ingram Micro order status (optional, default to any)</param>
        /// <param name="startcreatetimestamp">Search start date/time in UTC format (optional)</param>
        /// <param name="endcreatetimestamp">Search end date/time in UTC format (optional)</param>
        /// <param name="pagesize">Number of records required in the call (optional)</param>
        /// <param name="pagenumber">the page number reference (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSearchResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<OrderSearchResponse>> GetOrdersSearchWithHttpInfoAsync(string customerNumber, string isocountrycode, string? ordernumber = default(string?), string? customerordernumber = default(string?), string? orderstatus = default(string?), DateTime? startcreatetimestamp = default(DateTime?), DateTime? endcreatetimestamp = default(DateTime?), int? pagesize = default(int?), int? pagenumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customerNumber' when calling OrdersV5Api->GetOrdersSearch");

            // verify the required parameter 'isocountrycode' is set
            if (isocountrycode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isocountrycode' when calling OrdersV5Api->GetOrdersSearch");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerNumber", customerNumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isocountrycode", isocountrycode));
            if (ordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "ordernumber", ordernumber));
            }
            if (customerordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerordernumber", customerordernumber));
            }
            if (orderstatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "orderstatus", orderstatus));
            }
            if (startcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "startcreatetimestamp", startcreatetimestamp));
            }
            if (endcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "endcreatetimestamp", endcreatetimestamp));
            }
            if (pagesize != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "pagesize", pagesize));
            }
            if (pagenumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "pagenumber", pagenumber));
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderSearchResponse>("/resellers/v5/Orders/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrdersSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <returns>OrderDetailResponse</returns>
        public OrderDetailResponse GetV5OrdersDetails(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = GetV5OrdersDetailsWithHttpInfo(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <returns>ApiResponse of OrderDetailResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> GetV5OrdersDetailsWithHttpInfo(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV5Api->GetV5OrdersDetails");

            // verify the required parameter 'customernumber' is set
            if (customernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customernumber' when calling OrdersV5Api->GetV5OrdersDetails");

            // verify the required parameter 'isocountrycode' is set
            if (isocountrycode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isocountrycode' when calling OrdersV5Api->GetV5OrdersDetails");

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customernumber", customernumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isocountrycode", isocountrycode));
            if (customerordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerordernumber", customerordernumber));
            }
            if (startcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "startcreatetimestamp", startcreatetimestamp));
            }
            if (endcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "endcreatetimestamp", endcreatetimestamp));
            }
            if (simulate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "simulate", simulate));
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderDetailResponse>("/resellers/v5/Orders/{ordernumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV5OrdersDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Details Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailResponse</returns>
        public async System.Threading.Tasks.Task<OrderDetailResponse> GetV5OrdersDetailsAsync(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse> localVarResponse = await GetV5OrdersDetailsWithHttpInfoAsync(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Details Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordernumber">Ingram Micro sales order number</param>
        /// <param name="customernumber">Your unique Ingram Micro customer number</param>
        /// <param name="isocountrycode">2 chars ISO country code</param>
        /// <param name="customerordernumber">Your PO/Order Number provide at the time of order creation (optional)</param>
        /// <param name="startcreatetimestamp">Filter start date - format YYYY-MM-DD (optional)</param>
        /// <param name="endcreatetimestamp">Filter end date - format YYYY-MM-DD (optional)</param>
        /// <param name="simulate">Order response for various order statuses. Not for use in production. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<OrderDetailResponse>> GetV5OrdersDetailsWithHttpInfoAsync(string ordernumber, string customernumber, string isocountrycode, string? customerordernumber = default(string?), DateTime? startcreatetimestamp = default(DateTime?), string? endcreatetimestamp = default(string?), string? simulate = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ordernumber' is set
            if (ordernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'ordernumber' when calling OrdersV5Api->GetV5OrdersDetails");

            // verify the required parameter 'customernumber' is set
            if (customernumber == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'customernumber' when calling OrdersV5Api->GetV5OrdersDetails");

            // verify the required parameter 'isocountrycode' is set
            if (isocountrycode == null)
                throw new xi.sdk.resellers.csharp.Client.ApiException(400, "Missing required parameter 'isocountrycode' when calling OrdersV5Api->GetV5OrdersDetails");


            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ordernumber", xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToString(ordernumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customernumber", customernumber));
            localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "isocountrycode", isocountrycode));
            if (customerordernumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "customerordernumber", customerordernumber));
            }
            if (startcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "startcreatetimestamp", startcreatetimestamp));
            }
            if (endcreatetimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "endcreatetimestamp", endcreatetimestamp));
            }
            if (simulate != null)
            {
                localVarRequestOptions.QueryParameters.Add(xi.sdk.resellers.csharp.Client.ClientUtils.ParameterToMultiMap("", "simulate", simulate));
            }

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderDetailResponse>("/resellers/v5/Orders/{ordernumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV5OrdersDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a New Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <returns>OrderCreateResponse</returns>
        public OrderCreateResponse PostV5OrdersCreate(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderCreateResponse> localVarResponse = PostV5OrdersCreateWithHttpInfo(orderCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a New Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <returns>ApiResponse of OrderCreateResponse</returns>
        public xi.sdk.resellers.csharp.Client.ApiResponse<OrderCreateResponse> PostV5OrdersCreateWithHttpInfo(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?))
        {
            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCreateRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderCreateResponse>("/resellers/v5/Orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV5OrdersCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a New Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResponse</returns>
        public async System.Threading.Tasks.Task<OrderCreateResponse> PostV5OrdersCreateAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            xi.sdk.resellers.csharp.Client.ApiResponse<OrderCreateResponse> localVarResponse = await PostV5OrdersCreateWithHttpInfoAsync(orderCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a New Order Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
        /// </summary>
        /// <exception cref="xi.sdk.resellers.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResponse)</returns>
        public async System.Threading.Tasks.Task<xi.sdk.resellers.csharp.Client.ApiResponse<OrderCreateResponse>> PostV5OrdersCreateWithHttpInfoAsync(OrderCreateRequest? orderCreateRequest = default(OrderCreateRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            xi.sdk.resellers.csharp.Client.RequestOptions localVarRequestOptions = new xi.sdk.resellers.csharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = xi.sdk.resellers.csharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCreateRequest;

            // authentication (application) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderCreateResponse>("/resellers/v5/Orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostV5OrdersCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
